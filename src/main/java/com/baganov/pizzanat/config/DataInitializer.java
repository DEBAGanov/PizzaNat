package com.baganov.pizzanat.config;

import com.baganov.pizzanat.entity.OrderStatus;
import com.baganov.pizzanat.entity.Role;
import com.baganov.pizzanat.entity.User;
import com.baganov.pizzanat.repository.OrderStatusRepository;
import com.baganov.pizzanat.repository.RoleRepository;
import com.baganov.pizzanat.repository.UserRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final OrderStatusRepository orderStatusRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    @Transactional
    public void run(String... args) {
        log.info("üöÄ DataInitializer –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...");
        try {
            initializeRoles();
            initializeOrderStatuses();
            createTestUsers();
            log.info("‚úÖ DataInitializer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ DataInitializer: {}", e.getMessage(), e);
        }
    }

    private void initializeRoles() {
        if (roleRepository.count() == 0) {
            log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π");
            Role userRole = new Role();
            userRole.setName("ROLE_USER");
            roleRepository.save(userRole);

            Role adminRole = new Role();
            adminRole.setName("ROLE_ADMIN");
            roleRepository.save(adminRole);
            log.info("–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã");
        }
    }

    private void initializeOrderStatuses() {
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤");

        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
        createOrderStatus("CREATED", "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω");
        createOrderStatus("CONFIRMED", "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
        createOrderStatus("PREPARING", "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è");
        createOrderStatus("READY", "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤");
        createOrderStatus("DELIVERING", "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è");
        createOrderStatus("DELIVERED", "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
        createOrderStatus("CANCELLED", "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω");

        log.info("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã");
    }

    private void createOrderStatus(String name, String description) {
        if (orderStatusRepository.findByName(name).isEmpty()) {
            OrderStatus status = new OrderStatus();
            status.setName(name);
            status.setDescription(description);
            status.setActive(true);
            orderStatusRepository.save(status);
            log.info("–°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {} - {}", name, description);
        }
    }

    private void createTestUsers() {
        if (userRepository.findByUsername("admin").isEmpty()) {
            log.info("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'admin'");

            Role adminRole = roleRepository.findByName("ROLE_ADMIN")
                    .orElseThrow(() -> new IllegalStateException("–†–æ–ª—å ROLE_ADMIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

            User admin = new User();
            admin.setUsername("admin");
            admin.setEmail("admin@example.com");
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setFirstName("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
            admin.setLastName("–°–∏—Å—Ç–µ–º—ã");
            admin.setPhone("+79001234567");
            admin.setActive(true);
            admin.setCreatedAt(LocalDateTime.now());
            admin.setUpdatedAt(LocalDateTime.now());

            Set<Role> roles = new HashSet<>();
            roles.add(adminRole);
            admin.setRoles(roles);

            userRepository.save(admin);
            log.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        }

        if (userRepository.findByUsername("user").isEmpty()) {
            log.info("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'user'");

            Role userRole = roleRepository.findByName("ROLE_USER")
                    .orElseThrow(() -> new IllegalStateException("–†–æ–ª—å ROLE_USER –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

            User user = new User();
            user.setUsername("user");
            user.setEmail("user@example.com");
            user.setPassword(passwordEncoder.encode("password"));
            user.setFirstName("–û–±—ã—á–Ω—ã–π");
            user.setLastName("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
            user.setPhone("+79007654321");
            user.setActive(true);
            user.setCreatedAt(LocalDateTime.now());
            user.setUpdatedAt(LocalDateTime.now());

            Set<Role> roles = new HashSet<>();
            roles.add(userRole);
            user.setRoles(roles);

            userRepository.save(user);
            log.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        }
    }
}