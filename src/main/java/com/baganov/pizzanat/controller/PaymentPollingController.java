/**
 * @file: PaymentPollingController.java
 * @description: REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã
 * @dependencies: PaymentPollingService
 * @created: 2025-01-23
 */
package com.baganov.pizzanat.controller;

import com.baganov.pizzanat.service.PaymentPollingService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã
 * –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã polling
 */
@RestController
@RequestMapping("/api/v1/payments/polling")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Payment Polling", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã")
public class PaymentPollingController {

    private final PaymentPollingService paymentPollingService;

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    @PostMapping("/{paymentId}/force-check")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(
        summary = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞", 
        description = "–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–ö–∞—Å—Å–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    public ResponseEntity<Map<String, Object>> forceCheckPayment(
            @Parameter(description = "ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", required = true) 
            @PathVariable Long paymentId) {

        try {
            log.info("üîß –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ #{}", paymentId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            paymentPollingService.forcePollPayment(paymentId);
            
            Map<String, Object> response = Map.of(
                "success", true,
                "message", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ #" + paymentId + " –∑–∞–ø—É—â–µ–Ω–∞",
                "paymentId", paymentId,
                "note", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"
            );
            
            return ResponseEntity.ok(response);
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paymentId);
            
            Map<String, Object> errorResponse = Map.of(
                "success", false,
                "error", "PAYMENT_NOT_FOUND",
                "message", "–ü–ª–∞—Ç–µ–∂ #" + paymentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "paymentId", paymentId
            );
            
            return ResponseEntity.notFound().build();
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ #{}: {}", paymentId, e.getMessage(), e);
            
            Map<String, Object> errorResponse = Map.of(
                "success", false,
                "error", "POLLING_ERROR",
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(),
                "paymentId", paymentId
            );
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
     */
    @GetMapping("/statistics")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(
        summary = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞", 
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –¥–ª—è –æ–ø—Ä–æ—Å–∞",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    public ResponseEntity<Map<String, Object>> getPollingStatistics() {

        try {
            log.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π");
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö)
            paymentPollingService.logPollingStatistics();
            
            Map<String, Object> response = Map.of(
                "success", true,
                "message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
                "pollingInterval", "60 —Å–µ–∫—É–Ω–¥",
                "maxPollingDuration", "10 –º–∏–Ω—É—Ç",
                "note", "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö PaymentPollingService"
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ polling: {}", e.getMessage(), e);
            
            Map<String, Object> errorResponse = Map.of(
                "success", false,
                "error", "STATISTICS_ERROR",
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage()
            );
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
     */
    @GetMapping("/info")
    @Operation(
        summary = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –æ–ø—Ä–æ—Å–∞", 
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
    )
    public ResponseEntity<Map<String, Object>> getPollingInfo() {

        Map<String, Object> info = Map.of(
            "system", "PaymentPollingService",
            "description", "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã",
            "problem", "Webhook'–∏ –æ—Ç –Æ–ö–∞—Å—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 10 –º–∏–Ω—É—Ç",
            "solution", "–û–ø—Ä–æ—Å –Æ–ö–∞—Å—Å—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞",
            "pollingInterval", "60 —Å–µ–∫—É–Ω–¥",
            "maxPollingDuration", "10 –º–∏–Ω—É—Ç –Ω–∞ –ø–ª–∞—Ç–µ–∂",
            "supportedStatuses", Map.of(
                "monitored", "PENDING, WAITING_FOR_CAPTURE",
                "target", "SUCCEEDED, CANCELLED, FAILED"
            ),
            "behavior", Map.of(
                "cashOrders", "–û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏",
                "onlineOrders", "–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
                "successNotification", "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–æ—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π '–û–ü–õ–ê–ß–ï–ù –°–ë–ü/–ö–ê–†–¢–û–ô'",
                "failureNotification", "–ê–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
            )
        );
        
        return ResponseEntity.ok(info);
    }
} 