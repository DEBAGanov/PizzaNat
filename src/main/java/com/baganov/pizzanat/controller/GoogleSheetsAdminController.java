/**
 * @file: GoogleSheetsAdminController.java
 * @description: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * @dependencies: GoogleCredentialsDownloadService, GoogleSheetsService
 * @created: 2025-01-28
 */
package com.baganov.pizzanat.controller;

import com.baganov.pizzanat.service.GoogleCredentialsDownloadService;
import com.baganov.pizzanat.service.GoogleSheetsService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/v1/admin/google-sheets")
@RequiredArgsConstructor
@Tag(name = "Google Sheets Admin", description = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
@ConditionalOnProperty(name = "google.sheets.enabled", havingValue = "true")
public class GoogleSheetsAdminController {

    private final GoogleCredentialsDownloadService credentialsDownloadService;
    private final GoogleSheetsService googleSheetsService;

    /**
     * –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ S3
     */
    @PostMapping("/credentials/download")
    @Operation(summary = "–ó–∞–≥—Ä—É–∑–∏—Ç—å Google Sheets credentials –∏–∑ S3", 
               security = @SecurityRequirement(name = "bearerAuth"))
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> downloadCredentials() {
        log.info("üîÑ –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets credentials –∏–∑ S3");
        
        try {
            boolean success = credentialsDownloadService.downloadCredentials();
            
            if (success) {
                return ResponseEntity.ok(Map.of(
                    "status", "success",
                    "message", "Google Sheets credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ S3",
                    "credentialsExist", credentialsDownloadService.credentialsExist()
                ));
            } else {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets credentials –∏–∑ S3"
                ));
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ credentials: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ credentials
     */
    @GetMapping("/credentials/status")
    @Operation(summary = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Google Sheets credentials", 
               security = @SecurityRequirement(name = "bearerAuth"))
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getCredentialsStatus() {
        try {
            boolean credentialsExist = credentialsDownloadService.credentialsExist();
            String downloadInfo = credentialsDownloadService.getDownloadInfo();
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "credentialsExist", credentialsExist,
                "downloadInfo", downloadInfo
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ credentials: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Ç–∞–±–ª–∏—Ü—ã
     */
    @PostMapping("/sheet/initialize")
    @Operation(summary = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏", 
               security = @SecurityRequirement(name = "bearerAuth"))
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> initializeSheet() {
        log.info("üîÑ –ó–∞–ø—Ä–æ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets —Ç–∞–±–ª–∏—Ü—ã");
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials
            if (!credentialsDownloadService.credentialsExist()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "Google Sheets credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ credentials –∏–∑ S3."
                ));
            }
            
            googleSheetsService.initializeSheet();
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Google Sheets —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Sheets
     */
    @GetMapping("/config")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Sheets", 
               security = @SecurityRequirement(name = "bearerAuth"))
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getConfig() {
        try {
            String downloadInfo = credentialsDownloadService.getDownloadInfo();
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "configuration", downloadInfo,
                "credentialsExist", credentialsDownloadService.credentialsExist()
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(Map.of(
                "status", "error",
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage()
            ));
        }
    }
}