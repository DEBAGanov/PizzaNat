/**
 * @file: DeliveryController.java
 * @description: REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
 * @dependencies: Spring Web, AddressSuggestionService
 * @created: 2025-01-23
 */
package com.baganov.pizzanat.controller;

import com.baganov.pizzanat.model.dto.address.AddressSuggestion;
import com.baganov.pizzanat.service.AddressSuggestionService;
import com.baganov.pizzanat.service.DeliveryLocationService;
import com.baganov.pizzanat.service.DeliveryZoneService;
import com.baganov.pizzanat.model.dto.delivery.DeliveryLocationDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤,
 * –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
 */
@RestController
@RequestMapping("/api/v1/delivery")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "–î–æ—Å—Ç–∞–≤–∫–∞", description = "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –∞–¥—Ä–µ—Å–∞–º–∏")
public class DeliveryController {

    private final AddressSuggestionService addressSuggestionService;
    private final DeliveryLocationService deliveryLocationService;
    private final DeliveryZoneService deliveryZoneService;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –í–æ–ª–∂—Å–∫
     *
     * @param query –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)
     * @param limit –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
     * @return —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
     */
    @GetMapping("/address-suggestions")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –í–æ–ª–∂—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)")
    public ResponseEntity<List<AddressSuggestion>> getAddressSuggestions(
            @Parameter(description = "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)", example = "–õ–µ–Ω–∏–Ω–∞") @RequestParam(required = false) String query,
            @Parameter(description = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", example = "10") @RequestParam(defaultValue = "10") int limit) {

        try {
            log.info("–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è: {}, –ª–∏–º–∏—Ç: {}", query, limit);

            if (query == null || query.trim().length() < 2) {
                log.warn("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {}", query);
                return ResponseEntity.badRequest().build();
            }

            List<AddressSuggestion> suggestions = addressSuggestionService.getSuggestions(query.trim());

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (suggestions.size() > limit) {
                suggestions = suggestions.subList(0, limit);
            }

            log.info("–ù–∞–π–¥–µ–Ω–æ {} –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {}", suggestions.size(), query);
            return ResponseEntity.ok(suggestions);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤", e);
            return ResponseEntity.status(500).build();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –í–æ–ª–∂—Å–∫
     *
     * @param address –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
     */
    @GetMapping("/validate-address")
    @Operation(summary = "–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞", description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –í–æ–ª–∂—Å–∫")
    @ApiResponse(responseCode = "200", description = "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω")
    @ApiResponse(responseCode = "400", description = "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
    public ResponseEntity<Map<String, Object>> validateAddress(
            @Parameter(description = "–ê–¥—Ä–µ—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏", example = "–í–æ–ª–∂—Å–∫, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, 1") @RequestParam(required = false) String address) {

        try {
            log.info("–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞: {}", address);

            if (address == null || address.trim().isEmpty()) {
                return ResponseEntity.badRequest().build();
            }

            boolean isValid = addressSuggestionService.isValidAddress(address.trim());
            List<AddressSuggestion> suggestions = isValid ? addressSuggestionService.getSuggestions(address.trim())
                    : List.of();

            Map<String, Object> response = new HashMap<>();
            response.put("valid", isValid);
            response.put("address", address.trim());
            response.put("message", isValid ? "–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –≥–æ—Ä–æ–¥–µ –í–æ–ª–∂—Å–∫" : "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–æ—Ä–æ–¥–µ –í–æ–ª–∂—Å–∫");
            response.put("suggestions", suggestions);

            log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ '{}': {}", address, isValid);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞", e);
            return ResponseEntity.status(500).build();
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     *
     * @param address     –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
     * @param orderAmount —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    @GetMapping("/estimate")
    @Operation(summary = "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", description = "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    @ApiResponse(responseCode = "200", description = "–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    @ApiResponse(responseCode = "400", description = "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    public ResponseEntity<Map<String, Object>> estimateDelivery(
            @Parameter(description = "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", example = "–í–æ–ª–∂—Å–∫, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, 1") @RequestParam(required = false) String address,
            @Parameter(description = "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫", example = "1200.00") @RequestParam(required = false) BigDecimal orderAmount) {

        try {
            log.info("–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {}, —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {}", address, orderAmount);

            if (address == null || address.trim().isEmpty()) {
                return ResponseEntity.badRequest().build();
            }

            String cleanAddress = address.trim();

            // –ê–ö–¢–ò–í–ù–ê–Ø –ó–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å fallback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            log.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –¥–ª—è –∞–¥—Ä–µ—Å–∞: {}", cleanAddress);
            DeliveryZoneService.DeliveryCalculationResult result;
            try {
                log.info("üìç –í—ã–∑—ã–≤–∞–µ–º –∑–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É...");
                result = deliveryZoneService.calculateDelivery(cleanAddress,
                        orderAmount != null ? orderAmount : BigDecimal.ZERO);
                log.info("‚úÖ –ó–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∞–¥—Ä–µ—Å: {} -> –∑–æ–Ω–∞: {}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {}",
                        cleanAddress, result.getZoneName(), result.getDeliveryCost());
            } catch (Exception e) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {}", e.getMessage(), e);
                log.error("üö® –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:", e);
                result = createFallbackDeliveryResult(cleanAddress,
                        orderAmount != null ? orderAmount : BigDecimal.ZERO);
            }

            Map<String, Object> response = new HashMap<>();
            response.put("address", result.getAddress());
            response.put("deliveryAvailable", result.isDeliveryAvailable());

            if (result.isDeliveryAvailable()) {
                response.put("deliveryCost", result.getDeliveryCost());
                response.put("baseCost", result.getBaseCost());
                response.put("currency", result.getCurrency());
                response.put("estimatedTime", result.getEstimatedTime());
                response.put("estimatedTimeMin", result.getEstimatedTimeMin());
                response.put("estimatedTimeMax", result.getEstimatedTimeMax());
                response.put("freeDeliveryThreshold", result.getFreeDeliveryThreshold());
                response.put("isDeliveryFree", result.isDeliveryFree());
                response.put("message", result.getMessage());
                response.put("zoneName", result.getZoneName());
                response.put("zoneDescription", result.getZoneDescription());
                response.put("workingHours", result.getWorkingHours());
                response.put("city", result.getCity());
                response.put("region", result.getRegion());
            } else {
                response.put("deliveryCost", null);
                response.put("estimatedTime", null);
                response.put("message", result.getMessage());
                response.put("reason", result.getReason());
                response.put("zoneName", result.getZoneName());
            }

            log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è '{}': –¥–æ—Å—Ç—É–ø–Ω–∞={}, –∑–æ–Ω–∞={}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={}",
                    cleanAddress, result.isDeliveryAvailable(), result.getZoneName(),
                    result.isDeliveryAvailable() ? result.getDeliveryCost() + " RUB" : "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏", e);
            return ResponseEntity.status(500).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
     *
     * @return —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    @GetMapping("/locations")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –ø—É–Ω–∫—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏")
    @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω")
    public ResponseEntity<List<DeliveryLocationDTO>> getDeliveryLocations() {
        try {
            log.info("–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏");
            List<DeliveryLocationDTO> locations = deliveryLocationService.getAllActiveLocations();
            return ResponseEntity.ok(locations);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏", e);
            return ResponseEntity.status(500).build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID
     *
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    @GetMapping("/locations/{id}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –ø—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
    @ApiResponse(responseCode = "200", description = "–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω")
    @ApiResponse(responseCode = "404", description = "–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    public ResponseEntity<DeliveryLocationDTO> getDeliveryLocationById(
            @Parameter(description = "ID –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", example = "1") @PathVariable Integer id) {
        try {
            log.info("–ó–∞–ø—Ä–æ—Å –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å ID: {}", id);
            DeliveryLocationDTO location = deliveryLocationService.getLocationById(id);
            return ResponseEntity.ok(location);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID: {}", id, e);
            return ResponseEntity.status(500).build();
        }
    }

    /**
     * Fallback –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     */
    private DeliveryZoneService.DeliveryCalculationResult createFallbackDeliveryResult(String address,
            BigDecimal orderAmount) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ - 250‚ÇΩ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        BigDecimal baseCost = new BigDecimal("250"); // 250‚ÇΩ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±—ã–ª–æ 200‚ÇΩ)
        BigDecimal freeThreshold = new BigDecimal("1200"); // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1200‚ÇΩ (–±—ã–ª–æ 1000‚ÇΩ)
        boolean isDeliveryFree = orderAmount.compareTo(freeThreshold) >= 0;
        BigDecimal finalCost = isDeliveryFree ? BigDecimal.ZERO : baseCost;

        return DeliveryZoneService.DeliveryCalculationResult.builder()
                .address(address)
                .deliveryAvailable(true)
                .zoneName("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–æ–Ω–∞")
                .zoneDescription("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –í–æ–ª–∂—Å–∫ (fallback —Ç–∞—Ä–∏—Ñ)")
                .deliveryCost(finalCost)
                .baseCost(baseCost)
                .freeDeliveryThreshold(freeThreshold)
                .isDeliveryFree(isDeliveryFree)
                .estimatedTimeMin(30)
                .estimatedTimeMax(50) // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                .estimatedTime("30-50 –º–∏–Ω—É—Ç")
                .currency("RUB")
                .message(isDeliveryFree ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞" : "–î–æ—Å—Ç–∞–≤–∫–∞ - " + finalCost + " ‚ÇΩ")
                .workingHours("09:00-22:00")
                .city("–í–æ–ª–∂—Å–∫")
                .region("–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª")
                .build();
    }
}