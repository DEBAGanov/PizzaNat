/**
 * @file: YooKassaPaymentController.java
 * @description: REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa
 * @dependencies: YooKassaPaymentService, Spring Security
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.controller;

import com.baganov.pizzanat.model.dto.payment.CreatePaymentRequest;
import com.baganov.pizzanat.model.dto.payment.PaymentResponse;
import com.baganov.pizzanat.model.dto.payment.SbpBankInfo;
import com.baganov.pizzanat.service.YooKassaPaymentService;
import com.fasterxml.jackson.databind.JsonNode;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/payments/yookassa")
@RequiredArgsConstructor
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
@Tag(name = "–ÆKassa –ü–ª–∞—Ç–µ–∂–∏", description = "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –ÆKassa")
public class YooKassaPaymentController {

    private final YooKassaPaymentService yooKassaPaymentService;

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    @PostMapping("/create")
    @Operation(summary = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –°–ë–ü", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<PaymentResponse> createPayment(
            @Valid @RequestBody CreatePaymentRequest request,
            Authentication authentication) {

        log.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: –∑–∞–∫–∞–∑={}, –º–µ—Ç–æ–¥={}, –±–∞–Ω–∫={}",
                request.getOrderId(), request.getMethod(), request.getBankId());

        try {
            PaymentResponse payment = yooKassaPaymentService.createPayment(request);

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ID={}, URL={}",
                    payment.getId(), payment.getConfirmationUrl());

            return ResponseEntity.ok(payment);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {}", e.getMessage());
            return ResponseEntity.badRequest().build();

        } catch (IllegalStateException e) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {}", e.getMessage());
            return ResponseEntity.unprocessableEntity().build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
     */
    @GetMapping("/{paymentId}")
    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<PaymentResponse> getPayment(
            @Parameter(description = "ID –ø–ª–∞—Ç–µ–∂–∞", required = true) @PathVariable Long paymentId,
            Authentication authentication) {

        try {
            PaymentResponse payment = yooKassaPaymentService.getPayment(paymentId);
            return ResponseEntity.ok(payment);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paymentId);
            return ResponseEntity.notFound().build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
     */
    @GetMapping("/order/{orderId}")
    @Operation(summary = "–ü–ª–∞—Ç–µ–∂–∏ –∑–∞–∫–∞–∑–∞", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<List<PaymentResponse>> getPaymentsForOrder(
            @Parameter(description = "ID –∑–∞–∫–∞–∑–∞", required = true) @PathVariable Long orderId,
            Authentication authentication) {

        try {
            List<PaymentResponse> payments = yooKassaPaymentService.getPaymentsForOrder(orderId);
            return ResponseEntity.ok(payments);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {}: {}", orderId, e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    @PostMapping("/{paymentId}/check-status")
    @Operation(summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞", description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<PaymentResponse> checkPaymentStatus(
            @Parameter(description = "ID –ø–ª–∞—Ç–µ–∂–∞", required = true) @PathVariable Long paymentId,
            Authentication authentication) {

        try {
            PaymentResponse payment = yooKassaPaymentService.checkPaymentStatus(paymentId);
            return ResponseEntity.ok(payment);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paymentId);
            return ResponseEntity.notFound().build();

        } catch (IllegalStateException e) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            return ResponseEntity.unprocessableEntity().build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    @PostMapping("/{paymentId}/cancel")
    @Operation(summary = "–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞", description = "–û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING –∏–ª–∏ WAITING_FOR_CAPTURE)", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<PaymentResponse> cancelPayment(
            @Parameter(description = "ID –ø–ª–∞—Ç–µ–∂–∞", required = true) @PathVariable Long paymentId,
            Authentication authentication) {

        try {
            PaymentResponse payment = yooKassaPaymentService.cancelPayment(paymentId);

            log.info("üö´ –ü–ª–∞—Ç–µ–∂ {} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", paymentId);
            return ResponseEntity.ok(payment);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paymentId);
            return ResponseEntity.notFound().build();

        } catch (IllegalStateException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {} –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å: {}", paymentId, e.getMessage());
            return ResponseEntity.unprocessableEntity().build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤ –¥–ª—è –°–ë–ü
     */
    @GetMapping("/sbp/banks")
    @Operation(summary = "–ë–∞–Ω–∫–∏ –°–ë–ü", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π")
    public ResponseEntity<List<SbpBankInfo>> getSbpBanks() {
        try {
            List<SbpBankInfo> banks = yooKassaPaymentService.getSbpBanks();
            return ResponseEntity.ok(banks);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤ –°–ë–ü: {}", e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
     */
    @PostMapping("/webhook")
    @Operation(summary = "Webhook –ÆKassa", description = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ÆKassa")
    public ResponseEntity<Map<String, String>> handleWebhook(
            @RequestBody JsonNode notification,
            @RequestHeader(value = "X-YooKassa-Event-Type", required = false) String eventType) {

        try {
            log.info("üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa: —Ç–∏–ø={}", eventType);

            boolean success = yooKassaPaymentService.processWebhookNotification(notification);

            if (success) {
                log.info("‚úÖ Webhook –ÆKassa –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                return ResponseEntity.ok(Map.of("status", "success"));
            } else {
                log.warn("‚ö†Ô∏è Webhook –ÆKassa –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                return ResponseEntity.badRequest()
                        .body(Map.of("status", "error", "message", "Failed to process webhook"));
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(Map.of("status", "error", "message", e.getMessage()));
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ÆKassa ID (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥)
     */
    @GetMapping("/yookassa/{yookassaPaymentId}")
    @Operation(summary = "–ü–ª–∞—Ç–µ–∂ –ø–æ –ÆKassa ID", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –∏–∑ –ÆKassa", security = @SecurityRequirement(name = "bearerAuth"))
    public ResponseEntity<PaymentResponse> getPaymentByYooKassaId(
            @Parameter(description = "ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa", required = true) @PathVariable String yookassaPaymentId,
            Authentication authentication) {

        try {
            PaymentResponse payment = yooKassaPaymentService.getPaymentByYooKassaId(yookassaPaymentId);
            return ResponseEntity.ok(payment);

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", yookassaPaymentId);
            return ResponseEntity.notFound().build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa {}: {}", yookassaPaymentId, e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Health check –¥–ª—è –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    @GetMapping("/health")
    @Operation(summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ÆKassa")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            Map<String, Object> health = Map.of(
                    "status", "ok",
                    "service", "yookassa",
                    "timestamp", System.currentTimeMillis(),
                    "message", "–ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");

            return ResponseEntity.ok(health);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ health check –ÆKassa: {}", e.getMessage());

            Map<String, Object> health = Map.of(
                    "status", "error",
                    "service", "yookassa",
                    "timestamp", System.currentTimeMillis(),
                    "message", e.getMessage());

            return ResponseEntity.internalServerError().body(health);
        }
    }
}