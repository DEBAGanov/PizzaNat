/**
 * @file: PaymentMetricsController.java
 * @description: REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ÆKassa
 * @dependencies: PaymentMetricsService, Spring Web
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.controller;

import com.baganov.pizzanat.service.PaymentMetricsService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Map;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/payments/metrics")
@RequiredArgsConstructor
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
@Tag(name = "Payment Metrics", description = "API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
public class PaymentMetricsController {

    private final PaymentMetricsService paymentMetricsService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
     */
    @GetMapping("/summary")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
    @ApiResponse(responseCode = "200", description = "–°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<PaymentMetricsService.PaymentMetricsSummary> getMetricsSummary() {
        log.info("üìä –ó–∞–ø—Ä–æ—Å —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π");

        PaymentMetricsService.PaymentMetricsSummary summary = paymentMetricsService.getMetricsSummary();

        log.info("üìä –°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫: –≤—Å–µ–≥–æ={}, —É—Å–ø–µ—à–Ω—ã—Ö={}, –∫–æ–Ω–≤–µ—Ä—Å–∏—è={}%",
                summary.totalPayments(), summary.successfulPayments(), summary.conversionRate());

        return ResponseEntity.ok(summary);
    }

    /**
     * Health check –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
     */
    @GetMapping("/health")
    @Operation(summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫")
    @ApiResponse(responseCode = "200", description = "–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    public ResponseEntity<Map<String, Object>> getHealthStatus() {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫");

        try {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
            Map<String, Object> health = Map.of(
                    "status", "UP",
                    "service", "payment-metrics",
                    "timestamp", LocalDateTime.now(),
                    "version", "1.0.0",
                    "yookassa_enabled", true);

            return ResponseEntity.ok(health);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ health check —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
            
            Map<String, Object> errorHealth = Map.of(
                    "status", "DOWN",
                    "service", "payment-metrics",
                    "timestamp", LocalDateTime.now(),
                    "error", e.getMessage());
                    
            return ResponseEntity.status(500).body(errorHealth);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–∏–∫–∞—Ö
     */
    @GetMapping("/details")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–∏–∫–∞—Ö", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    @ApiResponse(responseCode = "200", description = "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getDetailedMetrics() {
        log.info("üìä –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π");

        try {
            PaymentMetricsService.PaymentMetricsSummary summary = paymentMetricsService.getMetricsSummary();

            Map<String, Object> details = Map.of(
                    "summary", summary,
                    "timestamp", LocalDateTime.now(),
                    "metrics_collection", Map.of(
                            "enabled", true,
                            "update_interval_ms", 60000,
                            "retention_hours", 24),
                    "performance", Map.of(
                            "conversion_rate", summary.conversionRate(),
                            "average_amount",
                            summary.totalAmount().doubleValue() / Math.max(1, summary.successfulPayments()),
                            "failure_rate",
                            (double) summary.failedPayments() / Math.max(1, summary.totalPayments()) * 100.0));

            return ResponseEntity.ok(details);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);

            Map<String, Object> response = Map.of(
                    "status", "error",
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: " + e.getMessage(),
                    "timestamp", LocalDateTime.now());

            return ResponseEntity.status(500).body(response);
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
     */
    @PostMapping("/refresh")
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä—É—á–Ω—É—é", description = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
    @ApiResponse(responseCode = "200", description = "–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> refreshMetrics() {
        log.info("üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π");

        try {
            paymentMetricsService.updateAggregatedMetrics();

            Map<String, Object> response = Map.of(
                    "status", "success",
                    "message", "–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    "timestamp", LocalDateTime.now());

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);

            Map<String, Object> response = Map.of(
                    "status", "error",
                    "message", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: " + e.getMessage(),
                    "timestamp", LocalDateTime.now());

            return ResponseEntity.status(500).body(response);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @GetMapping("/config")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    @ApiResponse(responseCode = "200", description = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getMonitoringConfig() {
        log.debug("‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");

        Map<String, Object> config = Map.of(
                "yookassa_enabled", true,
                "metrics_enabled", true,
                "monitoring", Map.of(
                        "update_interval_seconds", 60,
                        "retention_period_hours", 24,
                        "alert_thresholds", Map.of(
                                "low_conversion_rate", 70.0,
                                "high_failure_rate", 10.0,
                                "max_response_time_ms", 5000)),
                "endpoints", Map.of(
                        "metrics_summary", "/api/v1/payments/metrics/summary",
                        "health_check", "/api/v1/payments/metrics/health",
                        "detailed_metrics", "/api/v1/payments/metrics/details",
                        "prometheus_metrics", "/actuator/prometheus"));

        return ResponseEntity.ok(config);
    }
}