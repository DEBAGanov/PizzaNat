/**
 * @file: ScheduledNotificationService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
 * @dependencies: ScheduledNotificationRepository, TelegramUserNotificationService, Order, User
 * @created: 2025-06-13
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.entity.Order;
import com.baganov.pizzanat.entity.ScheduledNotification;
import com.baganov.pizzanat.entity.ScheduledNotification.NotificationStatus;
import com.baganov.pizzanat.entity.ScheduledNotification.NotificationType;
import com.baganov.pizzanat.entity.User;
import com.baganov.pizzanat.repository.ScheduledNotificationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID - Single Responsibility –∏ Dependency Inversion.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduledNotificationService {

    private final ScheduledNotificationRepository scheduledNotificationRepository;
    private final TelegramUserNotificationService telegramUserNotificationService;

    @Value("${app.url:https://pizzanat.ru}")
    private String appUrl;

    @Value("${app.referral.delay.hours:1}")
    private int referralDelayHours;

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
     *
     * @param order –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
     */
    @Transactional
    public void scheduleReferralReminder(Order order) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Telegram ID
        if (order.getUser() == null || order.getUser().getTelegramId() == null) {
            log.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} - –Ω–µ—Ç Telegram ID",
                    order.getId());
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        Optional<ScheduledNotification> existing = scheduledNotificationRepository
                .findByOrderIdAndNotificationType(order.getId(), NotificationType.REFERRAL_REMINDER);

        if (existing.isPresent()) {
            log.debug("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", order.getId());
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        String message = createReferralMessage(order);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        LocalDateTime scheduledAt = LocalDateTime.now().plusHours(referralDelayHours);

        ScheduledNotification notification = ScheduledNotification.builder()
                .order(order)
                .user(order.getUser())
                .telegramId(order.getUser().getTelegramId())
                .notificationType(NotificationType.REFERRAL_REMINDER)
                .message(message)
                .scheduledAt(scheduledAt)
                .status(NotificationStatus.PENDING)
                .build();

        scheduledNotificationRepository.save(notification);

        log.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} –Ω–∞ {}",
                order.getId(), order.getUser().getUsername(), scheduledAt);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     *
     * @param order –∑–∞–∫–∞–∑
     * @return —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private String createReferralMessage(Order order) {
        return String.format(
                "üçï <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –≤ PizzaNat!</b>\n\n" +
                        "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞—à–∞ –ø–∏—Ü—Ü–∞! üòä\n\n" +
                        "–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥—Ä—É–∑—å—è–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n" +
                        "üëâ <a href=\"%s\">%s</a>\n\n" +
                        "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! ‚ù§Ô∏è\n\n" +
                        "<i>–ö–æ–º–∞–Ω–¥–∞ PizzaNat</i>",
                appUrl, appUrl);
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç = 300,000 –º—Å
    @Transactional
    public void processScheduledNotifications() {
        LocalDateTime now = LocalDateTime.now();

        // –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        List<ScheduledNotification> readyNotifications = scheduledNotificationRepository.findReadyToSend(now);

        if (readyNotifications.isEmpty()) {
            log.debug("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ");
            return;
        }

        log.info("–ù–∞–π–¥–µ–Ω–æ {} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", readyNotifications.size());

        for (ScheduledNotification notification : readyNotifications) {
            processNotification(notification);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        List<ScheduledNotification> failedNotifications = scheduledNotificationRepository.findFailedForRetry(now);

        if (!failedNotifications.isEmpty()) {
            log.info("–ù–∞–π–¥–µ–Ω–æ {} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞", failedNotifications.size());

            for (ScheduledNotification notification : failedNotifications) {
                processNotification(notification);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     *
     * @param notification —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    @Async
    @Transactional
    public void processNotification(ScheduledNotification notification) {
        try {
            log.debug("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{} —Ç–∏–ø–∞ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    notification.getId(), notification.getNotificationType(),
                    notification.getUser() != null ? notification.getUser().getUsername() : "unknown");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            boolean sent = sendNotification(notification);

            if (sent) {
                notification.markAsSent();
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", notification.getId());
            } else {
                notification.markAsFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{}", notification.getId());
            }

        } catch (Exception e) {
            notification.markAsFailed("–û—à–∏–±–∫–∞: " + e.getMessage());
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}: {}", notification.getId(), e.getMessage(), e);
        } finally {
            scheduledNotificationRepository.save(notification);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
     *
     * @param notification —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @return true –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    private boolean sendNotification(ScheduledNotification notification) {
        try {
            switch (notification.getNotificationType()) {
                case REFERRAL_REMINDER:
                    return sendReferralReminder(notification);
                case ORDER_FEEDBACK:
                    return sendOrderFeedback(notification);
                case LOYALTY_REMINDER:
                    return sendLoyaltyReminder(notification);
                case SPECIAL_OFFER:
                    return sendSpecialOffer(notification);
                default:
                    log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", notification.getNotificationType());
                    return false;
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}: {}", notification.getId(), e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
     */
    private boolean sendReferralReminder(ScheduledNotification notification) {
        if (notification.getTelegramId() == null) {
            log.warn("–ù–µ—Ç Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}", notification.getId());
            return false;
        }

        try {
            telegramUserNotificationService.sendPersonalMessage(
                    notification.getTelegramId(),
                    notification.getMessage());
            return true;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}: {}", notification.getId(), e.getMessage());
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    private boolean sendOrderFeedback(ScheduledNotification notification) {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}", notification.getId());
        return true;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
     */
    private boolean sendLoyaltyReminder(ScheduledNotification notification) {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}", notification.getId());
        return true;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     */
    private boolean sendSpecialOffer(ScheduledNotification notification) {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{}", notification.getId());
        return true;
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞
     *
     * @param orderId ID –∑–∞–∫–∞–∑–∞
     */
    @Transactional
    public void cancelNotificationsForOrder(Integer orderId) {
        scheduledNotificationRepository.cancelPendingNotificationsByOrderId(orderId, LocalDateTime.now());
        log.info("–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}", orderId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00)
     */
    @Scheduled(cron = "0 0 3 * * *")
    @Transactional
    public void cleanupOldNotifications() {
        LocalDateTime cutoff = LocalDateTime.now().minusDays(30); // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π

        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            scheduledNotificationRepository.deleteOldSentNotifications(cutoff);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            scheduledNotificationRepository.deleteOldFailedNotifications(cutoff);

            log.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
     *
     * @param from –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
     * @param to   –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
     * @return —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    public List<Object[]> getStatistics(LocalDateTime from, LocalDateTime to) {
        return scheduledNotificationRepository.getStatistics(from, to);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –∏ —Å—Ç–∞—Ç—É—Å—É
     *
     * @param type   —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param status —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public long getNotificationCount(NotificationType type, NotificationStatus status) {
        return scheduledNotificationRepository.countByNotificationTypeAndStatus(type, status);
    }
}