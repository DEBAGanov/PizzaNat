/**
 * @file: PaymentMetricsService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ÆKassa
 * @dependencies: MetricsConfig, PaymentRepository, MeterRegistry
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.MetricsConfig;
import com.baganov.pizzanat.entity.Payment;
import com.baganov.pizzanat.entity.PaymentMethod;
import com.baganov.pizzanat.entity.PaymentStatus;
import com.baganov.pizzanat.repository.PaymentRepository;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
@Slf4j
@Service
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
public class PaymentMetricsService {

    private final PaymentRepository paymentRepository;
    private final MetricsConfig metricsConfig;
    private final MeterRegistry meterRegistry;

    // –ú–µ—Ç—Ä–∏–∫–∏ - —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    private final Counter paymentTotalCounter;
    private final Counter paymentSuccessCounter;
    private final Counter paymentFailureCounter;
    private final Counter paymentCancelledCounter;
    private final Counter sbpPaymentCounter;
    private final Counter cardPaymentCounter;
    private final Timer paymentCreationTimer;

    public PaymentMetricsService(PaymentRepository paymentRepository,
                               MetricsConfig metricsConfig,
                               MeterRegistry meterRegistry) {
        this.paymentRepository = paymentRepository;
        this.metricsConfig = metricsConfig;
        this.meterRegistry = meterRegistry;

        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        this.paymentTotalCounter = Counter.builder("yookassa.payments.total")
                .description("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                .tag("service", "yookassa")
                .register(meterRegistry);

        this.paymentSuccessCounter = Counter.builder("yookassa.payments.success")
                .description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                .tag("service", "yookassa")
                .register(meterRegistry);

        this.paymentFailureCounter = Counter.builder("yookassa.payments.failure")
                .description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                .tag("service", "yookassa")
                .register(meterRegistry);

        this.paymentCancelledCounter = Counter.builder("yookassa.payments.cancelled")
                .description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                .tag("service", "yookassa")
                .register(meterRegistry);

        this.sbpPaymentCounter = Counter.builder("yookassa.payments.sbp")
                .description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –°–ë–ü")
                .tag("method", "sbp")
                .register(meterRegistry);

        this.cardPaymentCounter = Counter.builder("yookassa.payments.card")
                .description("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                .tag("method", "card")
                .register(meterRegistry);

        this.paymentCreationTimer = Timer.builder("yookassa.payments.creation.time")
                .description("–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa")
                .tag("service", "yookassa")
                .register(meterRegistry);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
     */
    public void recordPaymentCreated(Payment payment) {
        log.debug("üìä –ó–∞–ø–∏—Å—ã–≤–∞—é –º–µ—Ç—Ä–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ID={}, –º–µ—Ç–æ–¥={}, —Å—É–º–º–∞={}",
                payment.getId(), payment.getMethod(), payment.getAmount());

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        paymentTotalCounter.increment();
        metricsConfig.incrementTotalPayments();

        // –£—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
        if (payment.getMethod() == PaymentMethod.SBP) {
            sbpPaymentCounter.increment();
            metricsConfig.incrementSbpPayments();
        } else if (payment.getMethod() == PaymentMethod.BANK_CARD) {
            cardPaymentCounter.increment();
            metricsConfig.incrementCardPayments();
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        meterRegistry.counter("yookassa.payments.by.amount.range",
                "range", getAmountRange(payment.getAmount()))
                .increment();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    public void recordPaymentStatusChange(Payment payment, PaymentStatus oldStatus) {
        log.debug("üìä –ó–∞–ø–∏—Å—ã–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ID={}, {} ‚Üí {}",
                payment.getId(), oldStatus, payment.getStatus());

        PaymentStatus newStatus = payment.getStatus();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        switch (newStatus) {
            case SUCCEEDED -> {
                paymentSuccessCounter.increment();
                metricsConfig.incrementSuccessfulPayments();
                recordSuccessfulPaymentMetrics(payment);
            }
            case FAILED -> {
                paymentFailureCounter.increment();
                metricsConfig.incrementFailedPayments();
                recordFailedPaymentMetrics(payment, oldStatus);
            }
            case CANCELLED -> {
                paymentCancelledCounter.increment();
                metricsConfig.incrementCancelledPayments();
            }
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        if (newStatus.isCompleted() && payment.getCreatedAt() != null) {
            recordPaymentDuration(payment);
        }
    }

    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
     */
    public <T> T recordPaymentCreationTime(Timer.Sample sample, T result) {
        sample.stop(paymentCreationTimer);
        return result;
    }

    /**
     * –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
     */
    public Timer.Sample startPaymentCreationTimer() {
        return Timer.start(meterRegistry);
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    @Scheduled(fixedRate = 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void updateAggregatedMetrics() {
        try {
            log.debug("üìä –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫");
            updateHourlyMetrics();
            updateDailyMetrics();
            updateConversionMetrics();
            log.debug("üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    private void updateHourlyMetrics() {
        try {
            LocalDateTime hourAgo = LocalDateTime.now().minusHours(1);
            List<Payment> recentPayments = paymentRepository.findByCreatedAtBetweenOrderByCreatedAtDesc(hourAgo,
                    LocalDateTime.now());

            long totalLastHour = recentPayments.size();
            long successfulLastHour = recentPayments.stream()
                    .mapToLong(p -> p.getStatus() == PaymentStatus.SUCCEEDED ? 1 : 0)
                    .sum();

            meterRegistry.gauge("yookassa.payments.last.hour.total", totalLastHour);
            meterRegistry.gauge("yookassa.payments.last.hour.successful", successfulLastHour);

            if (totalLastHour > 0) {
                double conversionLastHour = (double) successfulLastHour / totalLastHour * 100.0;
                meterRegistry.gauge("yookassa.payments.last.hour.conversion", conversionLastHour);
            }

            log.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—á–∞—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –≤—Å–µ–≥–æ={}, —É—Å–ø–µ—à–Ω—ã—Ö={}", totalLastHour, successfulLastHour);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    private void updateDailyMetrics() {
        try {
            LocalDateTime dayAgo = LocalDateTime.now().minusDays(1);
            List<Payment> dailyPayments = paymentRepository.findByCreatedAtBetweenOrderByCreatedAtDesc(dayAgo,
                    LocalDateTime.now());

            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            Map<PaymentStatus, Long> statusCounts = dailyPayments.stream()
                    .collect(Collectors.groupingBy(Payment::getStatus, Collectors.counting()));

            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
            Map<PaymentMethod, Long> methodCounts = dailyPayments.stream()
                    .collect(Collectors.groupingBy(Payment::getMethod, Collectors.counting()));

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            statusCounts.forEach((status, count) -> {
                try {
                    meterRegistry.gauge("yookassa.payments.daily.by.status." + status.name().toLowerCase(), count);
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {}: {}", status, e.getMessage());
                }
            });

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º
            methodCounts.forEach((method, count) -> {
                try {
                    meterRegistry.gauge("yookassa.payments.daily.by.method." + method.name().toLowerCase(), count);
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ –º–µ—Ç–æ–¥–∞ {}: {}", method, e.getMessage());
                }
            });

            // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –¥–µ–Ω—å
            long successfulCount = statusCounts.getOrDefault(PaymentStatus.SUCCEEDED, 0L);
            if (successfulCount > 0) {
                BigDecimal averageAmount = dailyPayments.stream()
                        .filter(p -> p.getStatus() == PaymentStatus.SUCCEEDED)
                        .map(Payment::getAmount)
                        .reduce(BigDecimal.ZERO, BigDecimal::add)
                        .divide(BigDecimal.valueOf(successfulCount), 2, java.math.RoundingMode.HALF_UP);

                meterRegistry.gauge("yookassa.payments.daily.average.amount", averageAmount.doubleValue());

                log.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –ø–ª–∞—Ç–µ–∂–µ–π={}, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫={}‚ÇΩ",
                        dailyPayments.size(), averageAmount);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
     */
    private void updateConversionMetrics() {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
            LocalDateTime now = LocalDateTime.now();
            for (int hour = 0; hour < 24; hour++) {
                try {
                    LocalDateTime startHour = now.withHour(hour).withMinute(0).withSecond(0);
                    LocalDateTime endHour = startHour.plusHours(1);

                    List<Payment> hourlyPayments = paymentRepository.findByCreatedAtBetweenOrderByCreatedAtDesc(startHour,
                            endHour);
                    if (!hourlyPayments.isEmpty()) {
                        long successful = hourlyPayments.stream()
                                .mapToLong(p -> p.getStatus() == PaymentStatus.SUCCEEDED ? 1 : 0)
                                .sum();
                        double conversion = (double) successful / hourlyPayments.size() * 100.0;

                        meterRegistry.gauge("yookassa.payments.conversion.by.hour." + hour, conversion);
                    }
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è —á–∞—Å–∞ {}: {}", hour, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void recordSuccessfulPaymentMetrics(Payment payment) {
        // –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–ª–∞—Ç–µ–∂–∞
        meterRegistry.counter("yookassa.payments.successful.by.amount.range",
                "range", getAmountRange(payment.getAmount()))
                .increment();

        // –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–µ—Ç–æ–¥—É –ø–ª–∞—Ç–µ–∂–∞
        meterRegistry.counter("yookassa.payments.successful.by.method",
                "method", payment.getMethod().name().toLowerCase())
                .increment();
    }

    /**
     * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void recordFailedPaymentMetrics(Payment payment, PaymentStatus oldStatus) {
        // –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ —ç—Ç–∞–ø–∞–º
        String failureStage = determineFailureStage(oldStatus);
        meterRegistry.counter("yookassa.payments.failures.by.stage",
                "stage", failureStage)
                .increment();

        // –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ –º–µ—Ç–æ–¥—É –ø–ª–∞—Ç–µ–∂–∞
        meterRegistry.counter("yookassa.payments.failures.by.method",
                "method", payment.getMethod().name().toLowerCase())
                .increment();
    }

    /**
     * –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
     */
    private void recordPaymentDuration(Payment payment) {
        if (payment.getUpdatedAt() != null) {
            long durationSeconds = java.time.Duration.between(
                    payment.getCreatedAt(), payment.getUpdatedAt()).getSeconds();

            meterRegistry.timer("yookassa.payments.completion.time",
                    "status", payment.getStatus().name().toLowerCase())
                    .record(java.time.Duration.ofSeconds(durationSeconds));
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
     */
    private String getAmountRange(BigDecimal amount) {
        if (amount.compareTo(BigDecimal.valueOf(500)) < 0)
            return "0-500";
        if (amount.compareTo(BigDecimal.valueOf(1000)) < 0)
            return "500-1000";
        if (amount.compareTo(BigDecimal.valueOf(2000)) < 0)
            return "1000-2000";
        if (amount.compareTo(BigDecimal.valueOf(5000)) < 0)
            return "2000-5000";
        return "5000+";
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
     */
    private String determineFailureStage(PaymentStatus oldStatus) {
        return switch (oldStatus) {
            case PENDING -> "creation";
            case WAITING_FOR_CAPTURE -> "capture";
            default -> "unknown";
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public PaymentMetricsSummary getMetricsSummary() {
        try {
            LocalDateTime dayAgo = LocalDateTime.now().minusDays(1);
            List<Payment> dailyPayments = paymentRepository.findByCreatedAtBetweenOrderByCreatedAtDesc(dayAgo,
                    LocalDateTime.now());

            long total = dailyPayments.size();
            long successful = dailyPayments.stream()
                    .mapToLong(p -> p.getStatus() == PaymentStatus.SUCCEEDED ? 1 : 0)
                    .sum();
            long failed = dailyPayments.stream()
                    .mapToLong(p -> p.getStatus() == PaymentStatus.FAILED ? 1 : 0)
                    .sum();

            double conversionRate = total > 0 ? (double) successful / total * 100.0 : 0.0;

            BigDecimal totalAmount = dailyPayments.stream()
                    .filter(p -> p.getStatus() == PaymentStatus.SUCCEEDED)
                    .map(Payment::getAmount)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            log.debug("üìä –°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫: –≤—Å–µ–≥–æ={}, —É—Å–ø–µ—à–Ω—ã—Ö={}, –Ω–µ—É–¥–∞—á–Ω—ã—Ö={}, –∫–æ–Ω–≤–µ—Ä—Å–∏—è={}%",
                    total, successful, failed, conversionRate);

            return new PaymentMetricsSummary(total, successful, failed, conversionRate, totalAmount);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return new PaymentMetricsSummary(0, 0, 0, 0.0, BigDecimal.ZERO);
        }
    }

    /**
     * DTO –¥–ª—è —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫
     */
    public record PaymentMetricsSummary(
            long totalPayments,
            long successfulPayments,
            long failedPayments,
            double conversionRate,
            BigDecimal totalAmount) {
    }
}