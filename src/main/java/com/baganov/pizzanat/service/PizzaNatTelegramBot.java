/**
 * @file: PizzaNatTelegramBot.java
 * @description: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è PizzaNat —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥ –∏ inline –∫–Ω–æ–ø–æ–∫
 * @dependencies: TelegramBots API, Spring Boot, TelegramWebhookService
 * @created: 2025-01-11
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.TelegramConfig;
import com.baganov.pizzanat.model.dto.telegram.TelegramUserData;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
public class PizzaNatTelegramBot extends TelegramLongPollingBot {

    private final TelegramConfig.TelegramAuthProperties telegramAuthProperties;
    private final TelegramAuthService telegramAuthService;

    @Autowired
    public PizzaNatTelegramBot(TelegramConfig.TelegramAuthProperties telegramAuthProperties,
            TelegramAuthService telegramAuthService) {
        this.telegramAuthProperties = telegramAuthProperties;
        this.telegramAuthService = telegramAuthService;
        log.info("PizzaNat Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    @Override
    public String getBotUsername() {
        return "PizzaNatBot"; // –ò–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return telegramAuthProperties.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        log.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {}", update.getUpdateId());

        try {
            if (update.hasMessage()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {}: {}", update.getUpdateId(), e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();

        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                message.getFrom().getId(), text != null ? text : "–∫–æ–Ω—Ç–∞–∫—Ç/–º–µ–¥–∏–∞");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if (message.hasContact()) {
            handleContactMessage(message);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        if (text == null) {
            return;
        }

        if (text.startsWith("/start")) {
            handleStartCommand(message);
        } else if (text.equals("/help")) {
            handleHelpCommand(message);
        } else if (text.equals("/menu")) {
            handleMenuCommand(message);
        } else {
            handleUnknownCommand(message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫)
     */
    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();

        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query: {}", data);

        try {
            if (data.startsWith("confirm_auth_")) {
                String authToken = data.substring(13);
                handleAuthConfirmation(callbackQuery, authToken);
            } else if (data.startsWith("cancel_auth_")) {
                String authToken = data.substring(12);
                handleAuthCancellation(callbackQuery, authToken);
            } else if (data.equals("request_phone")) {
                handlePhoneRequest(callbackQuery);
            }

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            answerCallbackQuery(callbackQuery.getId(), null);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: {}", e.getMessage(), e);
            answerCallbackQuery(callbackQuery.getId(), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private void handleStartCommand(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();

        if (text.contains(" ")) {
            // –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: /start TOKEN
            String authToken = text.substring(text.indexOf(" ") + 1).trim();
            log.info("–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", authToken);

            TelegramUserData user = convertToTelegramUserData(message.getFrom());
            sendAuthConfirmationMessage(chatId, authToken, user);
        } else {
            // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
            sendWelcomeMessage(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
     */
    private void handleHelpCommand(Message message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(message.getChatId());
        sendMessage.setText(
                "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ PizzaNat Bot*\n\n" +
                        "*–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*\n" +
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PizzaNat\n" +
                        "2. –í—ã–±–µ—Ä–∏—Ç–µ \"–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram\"\n" +
                        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n" +
                        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ —ç—Ç–æ–º –±–æ—Ç–µ\n\n" +
                        "*–ö–æ–º–∞–Ω–¥—ã:*\n" +
                        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n" +
                        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
     */
    private void handleMenuCommand(Message message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(message.getChatId());
        sendMessage.setText("üçï *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PizzaNat*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        sendMessage.setParseMode("Markdown");

        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton phoneButton = new InlineKeyboardButton();
        phoneButton.setText("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω");
        phoneButton.setCallbackData("request_phone");
        row1.add(phoneButton);

        rows.add(row1);
        markup.setKeyboard(rows);
        sendMessage.setReplyMarkup(markup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    private void handleUnknownCommand(Message message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(message.getChatId());
        sendMessage.setText("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendWelcomeMessage(Long chatId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(
                "üçï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaNat!*\n\n" +
                        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n" +
                        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n" +
                        "–ö–æ–º–∞–Ω–¥—ã:\n" +
                        "/help - —Å–ø—Ä–∞–≤–∫–∞\n" +
                        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void sendAuthConfirmationMessage(Long chatId, String authToken, TelegramUserData user) {
        // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        SendMessage phoneMessage = new SendMessage();
        phoneMessage.setChatId(chatId);
        phoneMessage.setText(String.format(
                "üçï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaNat!*\n\n" +
                        "–ü—Ä–∏–≤–µ—Ç, %s!\n\n" +
                        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                user.getDisplayName()));
        phoneMessage.setParseMode("Markdown");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();

        KeyboardButton phoneButton = new KeyboardButton();
        phoneButton.setText("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω");
        phoneButton.setRequestContact(true);
        row.add(phoneButton);

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        phoneMessage.setReplyMarkup(keyboardMarkup);

        try {
            execute(phoneMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", e.getMessage());
        }

        // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        SendMessage confirmMessage = new SendMessage();
        confirmMessage.setChatId(chatId);
        confirmMessage.setText("–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞:");

        InlineKeyboardMarkup inlineMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();

        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥");
        confirmButton.setCallbackData("confirm_auth_" + authToken);
        row1.add(confirmButton);

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelButton.setCallbackData("cancel_auth_" + authToken);
        row1.add(cancelButton);

        rows.add(row1);
        inlineMarkup.setKeyboard(rows);
        confirmMessage.setReplyMarkup(inlineMarkup);

        try {
            execute(confirmMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void handleAuthConfirmation(CallbackQuery callbackQuery, String authToken) {
        Long chatId = callbackQuery.getMessage().getChatId();
        TelegramUserData user = convertToTelegramUserData(callbackQuery.getFrom());

        try {
            telegramAuthService.confirmAuth(authToken, user);
            sendAuthSuccessMessage(chatId, user);
            log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å —Ç–æ–∫–µ–Ω–æ–º: {}",
                    user.getId(), authToken);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {}: {}",
                    authToken, e.getMessage(), e);
            sendAuthErrorMessage(chatId, e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void handleAuthCancellation(CallbackQuery callbackQuery, String authToken) {
        Long chatId = callbackQuery.getMessage().getChatId();
        sendAuthCancelledMessage(chatId);
        log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {}",
                callbackQuery.getFrom().getId(), authToken);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void handlePhoneRequest(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("üì± –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();

        KeyboardButton phoneButton = new KeyboardButton();
        phoneButton.setText("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω");
        phoneButton.setRequestContact(true);
        row.add(phoneButton);

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        sendMessage.setReplyMarkup(keyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    private void handleContactMessage(Message message) {
        Contact contact = message.getContact();
        Long chatId = message.getChatId();

        if (contact == null) {
            log.warn("–ü–æ–ª—É—á–µ–Ω null –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", message.getFrom().getId());
            return;
        }

        log.info("–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Ç–µ–ª–µ—Ñ–æ–Ω {}",
                message.getFrom().getId(),
                contact.getPhoneNumber() != null
                        ? contact.getPhoneNumber().replaceAll("(\\d{1,3})(\\d{3})(\\d{3})(\\d+)", "$1***$2***$4")
                        : "null");

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!contact.getUserId().equals(message.getFrom().getId())) {
                sendNotOwnContactMessage(chatId, contact.getFirstName() + " " + contact.getLastName());
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            TelegramUserData updatedUser = TelegramUserData.builder()
                    .id(message.getFrom().getId())
                    .username(message.getFrom().getUserName())
                    .firstName(
                            contact.getFirstName() != null ? contact.getFirstName() : message.getFrom().getFirstName())
                    .lastName(contact.getLastName() != null ? contact.getLastName() : message.getFrom().getLastName())
                    .phoneNumber(contact.getPhoneNumber())
                    .build();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            telegramAuthService.updateUserWithPhoneNumber(updatedUser);

            sendPhoneReceivedMessage(chatId, contact.getPhoneNumber(), updatedUser.getDisplayName());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    message.getFrom().getId(), e.getMessage(), e);
            sendContactErrorMessage(chatId);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void sendAuthSuccessMessage(Long chatId, TelegramUserData user) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(String.format(
                "‚úÖ *–í—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n" +
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n\n" +
                        "üçï –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ PizzaNat!\n\n" +
                        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑ –≤–∫—É—Å–Ω–æ–π –ø–∏—Ü—Ü—ã.",
                user.getDisplayName()));
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void sendAuthErrorMessage(Long chatId, String errorMessage) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(
                "‚ùå *–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*\n\n" +
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. " +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.\n\n" +
                        "_–î–µ—Ç–∞–ª–∏: " + errorMessage + "_");
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private void sendAuthCancelledMessage(Long chatId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(
                "‚ùå *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n" +
                        "–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. " +
                        "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.");
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void sendPhoneReceivedMessage(Long chatId, String phoneNumber, String userName) {
        String maskedPhone = phoneNumber.replaceAll("(\\d{1,3})(\\d{3})(\\d{3})(\\d+)", "$1***$2***$4");

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(String.format(
                "‚úÖ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω!*\n\n" +
                        "–°–ø–∞—Å–∏–±–æ, %s!\n\n" +
                        "–í–∞—à –Ω–æ–º–µ—Ä: %s\n\n" +
                        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                userName, maskedPhone));
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    private void sendContactErrorMessage(Long chatId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(
                "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞*\n\n" +
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. " +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
     */
    private void sendNotOwnContactMessage(Long chatId, String contactName) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(String.format(
                "‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç*\n\n" +
                        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç: %s\n\n" +
                        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è " +
                        "*–≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º* –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ " +
                        "—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\".",
                contactName != null ? contactName : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"));
        sendMessage.setParseMode("Markdown");

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–≤–µ—Ç –Ω–∞ callback query
     */
    private void answerCallbackQuery(String callbackQueryId, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackQueryId);
        if (text != null) {
            answer.setText(text);
        }

        try {
            execute(answer);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {}", e.getMessage());
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Telegram User –≤ TelegramUserData
     */
    private TelegramUserData convertToTelegramUserData(org.telegram.telegrambots.meta.api.objects.User user) {
        return TelegramUserData.builder()
                .id(user.getId())
                .username(user.getUserName())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .build();
    }
}