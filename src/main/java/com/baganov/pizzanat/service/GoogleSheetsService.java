/**
 * @file: GoogleSheetsService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API
 * @dependencies: Google Sheets API, Spring Retry, Order, Payment
 * @created: 2025-01-28
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.GoogleSheetsConfiguration;
import com.baganov.pizzanat.entity.Order;
import com.baganov.pizzanat.entity.Payment;
import com.baganov.pizzanat.entity.PaymentMethod;
import com.baganov.pizzanat.repository.PaymentRepository;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.model.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "google.sheets.enabled", havingValue = "true")
public class GoogleSheetsService {

    private final Sheets sheetsClient;
    private final GoogleSheetsConfiguration config;
    private final PaymentRepository paymentRepository;
    
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
    private static final String HEADER_RANGE = "A1:P1";
    private static final String INSERT_RANGE = "A2:P2";

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
     */
    @Async
    public void initializeSheet() {
        try {
            log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Ç–∞–±–ª–∏—Ü—ã");
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            List<Object> headers = Arrays.asList(
                "ID –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email",
                "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", 
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", "–û–±—â–∞—è —Å—É–º–º–∞",
                "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", 
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂"
            );
            
            ValueRange headerRange = new ValueRange()
                    .setValues(Arrays.asList(headers));
            
            UpdateValuesResponse response = sheetsClient.spreadsheets().values()
                    .update(config.getSpreadsheetId(), HEADER_RANGE, headerRange)
                    .setValueInputOption("RAW")
                    .execute();
                    
            log.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã: {} —è—á–µ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", 
                    response.getUpdatedCells());
                    
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets —Ç–∞–±–ª–∏—Ü—ã: {}", e.getMessage(), e);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É (–≤ –Ω–∞—á–∞–ª–æ)
     */
    @Async
    @Retryable(value = {IOException.class}, maxAttempts = 3, backoff = @Backoff(delay = 1000))
    public void addOrderToSheet(Order order) {
        try {
            log.info("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{} –≤ Google Sheets", order.getId());
            
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            List<Object> orderData = formatOrderData(order);
            
            // –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            insertRowAtTop(orderData);
            
            log.info("‚úÖ –ó–∞–∫–∞–∑ #{} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets", order.getId());
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{} –≤ Google Sheets: {}", 
                    order.getId(), e.getMessage(), e);
            throw new RuntimeException("Failed to add order to Google Sheets", e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    @Async
    @Retryable(value = {IOException.class}, maxAttempts = 3, backoff = @Backoff(delay = 1000))
    public void updateOrderStatus(Integer orderId, String newStatus) {
        try {
            log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{} –≤ Google Sheets: {}", orderId, newStatus);
            
            // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–∫–∞–∑–æ–º
            int rowIndex = findOrderRow(orderId);
            if (rowIndex == -1) {
                log.warn("‚ö†Ô∏è –ó–∞–∫–∞–∑ #{} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets", orderId);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–ª–æ–Ω–∫–∞ N)
            String range = String.format("%s!N%d", config.getSheetName(), rowIndex);
            ValueRange valueRange = new ValueRange()
                    .setValues(Arrays.asList(Arrays.asList(newStatus)));
            
            sheetsClient.spreadsheets().values()
                    .update(config.getSpreadsheetId(), range, valueRange)
                    .setValueInputOption("RAW")
                    .execute();
                    
            log.info("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets", orderId);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{}: {}", orderId, e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    @Async
    @Retryable(value = {IOException.class}, maxAttempts = 3, backoff = @Backoff(delay = 1000))
    public void updatePaymentStatus(Integer orderId, String paymentStatus) {
        try {
            log.info("üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} –≤ Google Sheets: {}", 
                    orderId, paymentStatus);
            
            int rowIndex = findOrderRow(orderId);
            if (rowIndex == -1) {
                log.warn("‚ö†Ô∏è –ó–∞–∫–∞–∑ #{} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets", orderId);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∫–æ–ª–æ–Ω–∫–∞ M)
            String range = String.format("%s!M%d", config.getSheetName(), rowIndex);
            ValueRange valueRange = new ValueRange()
                    .setValues(Arrays.asList(Arrays.asList(paymentStatus)));
            
            sheetsClient.spreadsheets().values()
                    .update(config.getSpreadsheetId(), range, valueRange)
                    .setValueInputOption("RAW")
                    .execute();
                    
            log.info("‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets", orderId);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}: {}", 
                    orderId, e.getMessage(), e);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è Google Sheets
     */
    private List<Object> formatOrderData(Order order) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
        List<Payment> payments = paymentRepository.findByOrderIdOrderByCreatedAtDesc(order.getId().longValue());
        Payment lastPayment = payments.isEmpty() ? null : payments.get(0);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞ - –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        String orderItems = order.getItems().stream()
                .map(item -> String.format("%s x%d (%.0f‚ÇΩ)", 
                        item.getProduct().getName(),
                        item.getQuantity(),
                        item.getPrice()))
                .collect(Collectors.joining(";\n")); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ;\n –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —è—á–µ–π–∫–µ
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        String paymentStatus = "–ù–µ –æ–ø–ª–∞—á–µ–Ω";
        String paymentUrl = "";
        if (order.getPaymentMethod() != null) {
            switch (order.getPaymentMethod()) {
                case CASH:
                    paymentStatus = "–ù–∞–ª–∏—á–Ω—ã–º–∏";
                    break;
                case SBP:
                case BANK_CARD:
                    if (lastPayment != null) {
                        paymentStatus = lastPayment.getStatus().getDescription();
                        if (lastPayment.getConfirmationUrl() != null) {
                            paymentUrl = lastPayment.getConfirmationUrl();
                        }
                    }
                    break;
            }
        }
        
        return Arrays.asList(
            order.getId(),                                                    // A: ID –∑–∞–∫–∞–∑–∞
            order.getCreatedAt().format(DATE_FORMATTER),                     // B: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            order.getContactName(),                                          // C: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            order.getContactPhone(),                                         // D: –¢–µ–ª–µ—Ñ–æ–Ω
            order.getUser() != null ? order.getUser().getEmail() : "",       // E: Email
            orderItems,                                                      // F: –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
            order.getDeliveryAddress() != null ? 
                order.getDeliveryAddress() : 
                order.getDeliveryLocation().getAddress(),                    // G: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            order.getDeliveryType() != null ? order.getDeliveryType() : "–°–∞–º–æ–≤—ã–≤–æ–∑", // H: –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
            formatAmount(order.getItemsAmount()),                            // I: –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
            formatAmount(order.getDeliveryCost()),                           // J: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
            formatAmount(order.getTotalAmount()),                            // K: –û–±—â–∞—è —Å—É–º–º–∞
            order.getPaymentMethod() != null ? 
                order.getPaymentMethod().getDisplayName() : "–ù–∞–ª–∏—á–Ω—ã–º–∏",     // L: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            paymentStatus,                                                   // M: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            order.getStatus().getName(),                                     // N: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order.getComment() != null ? order.getComment() : "",            // O: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            paymentUrl                                                       // P: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂
        );
    }

    /**
     * –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
     */
    private void insertRowAtTop(List<Object> rowData) throws IOException {
        // –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        InsertDimensionRequest insertRequest = new InsertDimensionRequest()
                .setRange(new DimensionRange()
                        .setSheetId(getSheetId())
                        .setDimension("ROWS")
                        .setStartIndex(1)
                        .setEndIndex(2));

        BatchUpdateSpreadsheetRequest batchRequest = new BatchUpdateSpreadsheetRequest()
                .setRequests(Arrays.asList(new Request().setInsertDimension(insertRequest)));

        sheetsClient.spreadsheets()
                .batchUpdate(config.getSpreadsheetId(), batchRequest)
                .execute();

        // –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        ValueRange valueRange = new ValueRange()
                .setValues(Arrays.asList(rowData));

        sheetsClient.spreadsheets().values()
                .update(config.getSpreadsheetId(), INSERT_RANGE, valueRange)
                .setValueInputOption("RAW")
                .execute();
    }

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–∫–∞–∑–æ–º –ø–æ ID
     */
    private int findOrderRow(Integer orderId) throws IOException {
        String range = String.format("%s!A:A", config.getSheetName());
                    ValueRange response = sheetsClient.spreadsheets().values()
                .get(config.getSpreadsheetId(), range)
                .execute();

        List<List<Object>> values = response.getValues();
        if (values != null) {
            for (int i = 1; i < values.size(); i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                List<Object> row = values.get(i);
                if (!row.isEmpty() && row.get(0).toString().equals(orderId.toString())) {
                    return i + 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1-indexed –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                }
            }
        }
        return -1;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ª–∏—Å—Ç–∞
     */
    private Integer getSheetId() throws IOException {
                    Spreadsheet spreadsheet = sheetsClient.spreadsheets()
                .get(config.getSpreadsheetId())
                .execute();
        
        return spreadsheet.getSheets().get(0).getProperties().getSheetId();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatAmount(BigDecimal amount) {
        return amount != null ? String.format("%.0f‚ÇΩ", amount) : "0‚ÇΩ";
    }
}