/**
 * @file: GoogleCredentialsDownloadService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets credentials –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * @dependencies: S3Client, Google Sheets Configuration
 * @created: 2025-01-28
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.GoogleSheetsConfiguration;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;
import software.amazon.awssdk.services.s3.model.NoSuchKeyException;

import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "google.sheets.enabled", havingValue = "true")
public class GoogleCredentialsDownloadService {

    private final S3Client s3Client;
    private final GoogleSheetsConfiguration googleSheetsConfig;
    private final Environment environment;

    // S3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è dev –∏ prod
    @Value("${s3.bucket:#{null}}")
    private String devBucket;

    @Value("${timeweb.s3.bucket:#{null}}")
    private String prodBucket;

    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É credentials –≤ S3
    @Value("${google.sheets.s3-credentials-key:config/google-credentials.json}")
    private String s3CredentialsKey;

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ S3
    @Value("${google.sheets.download-from-s3:true}")
    private boolean downloadFromS3;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ credentials –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @PostConstruct
    public void downloadCredentialsOnStartup() {
        if (!downloadFromS3) {
            log.info("üîß –ó–∞–≥—Ä—É–∑–∫–∞ Google Sheets credentials –∏–∑ S3 –æ—Ç–∫–ª—é—á–µ–Ω–∞");
            return;
        }

        try {
            log.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Google Sheets credentials –∏–∑ S3...");
            
            String bucket = getBucket();
            String localPath = googleSheetsConfig.getCredentialsPath();
            
            log.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:");
            log.info("   S3 Bucket: {}", bucket);
            log.info("   S3 Key: {}", s3CredentialsKey);
            log.info("   Local Path: {}", localPath);
            
            downloadCredentialsFromS3(bucket, s3CredentialsKey, localPath);
            
            log.info("‚úÖ Google Sheets credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ S3");
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets credentials –∏–∑ S3: {}", e.getMessage(), e);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
            Path localFile = Paths.get(googleSheetsConfig.getCredentialsPath());
            if (Files.exists(localFile)) {
                log.warn("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª credentials");
            } else {
                log.error("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.");
                throw new RuntimeException("Google Sheets credentials –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", e);
            }
        }
    }

    /**
     * –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ credentials –∏–∑ S3
     */
    public boolean downloadCredentials() {
        try {
            String bucket = getBucket();
            String localPath = googleSheetsConfig.getCredentialsPath();
            
            downloadCredentialsFromS3(bucket, s3CredentialsKey, localPath);
            
            log.info("‚úÖ Google Sheets credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ S3 (—Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)");
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Google Sheets credentials –∏–∑ S3: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ S3
     */
    private void downloadCredentialsFromS3(String bucket, String s3Key, String localPath) throws IOException {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path localFile = Paths.get(localPath);
        Path parentDir = localFile.getParent();
        if (parentDir != null && !Files.exists(parentDir)) {
            Files.createDirectories(parentDir);
            log.info("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", parentDir);
        }

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3
        GetObjectRequest request = GetObjectRequest.builder()
                .bucket(bucket)
                .key(s3Key)
                .build();

        try (ResponseInputStream<GetObjectResponse> s3Object = s3Client.getObject(request)) {
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ—â–∞–µ–º
            Path tempFile = Paths.get(localPath + ".tmp");
            Files.copy(s3Object, tempFile, StandardCopyOption.REPLACE_EXISTING);
            Files.move(tempFile, localFile, StandardCopyOption.REPLACE_EXISTING);
            
            log.info("üì• –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ S3: {} ‚Üí {}", s3Key, localPath);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            long fileSize = Files.size(localFile);
            log.info("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {} –±–∞–π—Ç", fileSize);
            
            if (fileSize == 0) {
                throw new IOException("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª credentials –ø—É—Å—Ç");
            }
            
        } catch (NoSuchKeyException e) {
            throw new IOException("–§–∞–π–ª " + s3Key + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3 bucket " + bucket, e);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è credentials —Ñ–∞–π–ª–∞
     */
    public boolean credentialsExist() {
        Path credentialsFile = Paths.get(googleSheetsConfig.getCredentialsPath());
        boolean exists = Files.exists(credentialsFile);
        
        if (exists) {
            try {
                long size = Files.size(credentialsFile);
                log.debug("üìä Google Sheets credentials —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {} –±–∞–π—Ç", size);
                return size > 0;
            } catch (IOException e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ credentials —Ñ–∞–π–ª–∞: {}", e.getMessage());
                return false;
            }
        } else {
            log.debug("üìä Google Sheets credentials —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", credentialsFile);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ bucket –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è
     */
    private String getBucket() {
        boolean isProd = isProdProfile();
        String bucket = isProd ? prodBucket : devBucket;
        
        if (bucket == null) {
            throw new IllegalStateException("S3 bucket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è " + (isProd ? "prod" : "dev"));
        }
        
        log.debug("ü™£ –ò—Å–ø–æ–ª—å–∑—É–µ–º S3 bucket: {} (–ø—Ä–æ—Ñ–∏–ª—å: {})", bucket, isProd ? "prod" : "dev");
        return bucket;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å production
     */
    private boolean isProdProfile() {
        for (String profile : environment.getActiveProfiles()) {
            if (profile.equals("prod")) {
                return true;
            }
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
     */
    public String getDownloadInfo() {
        return String.format(
            "Google Sheets Credentials Download Info:\n" +
            "  Enabled: %s\n" +
            "  S3 Bucket: %s\n" +
            "  S3 Key: %s\n" +
            "  Local Path: %s\n" +
            "  File Exists: %s\n" +
            "  Profile: %s",
            downloadFromS3,
            getBucket(),
            s3CredentialsKey,
            googleSheetsConfig.getCredentialsPath(),
            credentialsExist(),
            isProdProfile() ? "prod" : "dev"
        );
    }
}