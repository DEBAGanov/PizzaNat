/**
 * @file: TelegramBotService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è
 * @dependencies: Spring Web, Jackson
 * @created: 2025-05-31
 * @updated: 2025-01-15 - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–æ–≤
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.TelegramConfig;
import com.baganov.pizzanat.entity.Order;
import com.baganov.pizzanat.entity.OrderItem;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramBotService {

    private final TelegramConfig.TelegramProperties telegramProperties;
    private final RestTemplate telegramRestTemplate;

    @Value("${telegram.enabled:true}")
    private boolean telegramEnabled;

    @Value("${telegram.bot.enabled:true}")
    private boolean mainBotEnabled;

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
     */
    public void sendNewOrderNotification(Order order) {
        if (!isTelegramNotificationsEnabled()) {
            log.debug("üö´ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
            return;
        }

        String message = formatNewOrderMessage(order);
        sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
     */
    public void sendOrderStatusUpdateNotification(Order order, String oldStatus, String newStatus) {
        if (!isTelegramNotificationsEnabled()) {
            log.debug("üö´ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
            return;
        }

        String message = formatStatusUpdateMessage(order, oldStatus, newStatus);
        sendMessage(message);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private boolean isTelegramNotificationsEnabled() {
        if (!telegramEnabled) {
            log.debug("Telegram –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω (TELEGRAM_ENABLED=false)");
            return false;
        }

        if (!mainBotEnabled) {
            log.debug("–û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (TELEGRAM_BOT_ENABLED=false)");
            return false;
        }

        if (!telegramProperties.isEnabled()) {
            log.debug("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return false;
        }

        return true;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    private String formatNewOrderMessage(Order order) {
        StringBuilder message = new StringBuilder();
        message.append("üçï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #").append(order.getId()).append("</b>\n\n");

        message.append("üìÖ <b>–î–∞—Ç–∞:</b> ").append(order.getCreatedAt().format(DATE_FORMATTER)).append("\n");

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å–∏—Å—Ç–µ–º—ã
        if (order.getUser() != null) {
            message.append("üë§ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–ò–°–¢–ï–ú–´</b>\n");
            message.append("–ò–º—è: ").append(order.getUser().getFirstName());
            if (order.getUser().getLastName() != null) {
                message.append(" ").append(order.getUser().getLastName());
            }
            message.append("\n");

            if (order.getUser().getUsername() != null) {
                message.append("Username: @").append(order.getUser().getUsername()).append("\n");
            }

            if (order.getUser().getPhone() != null) {
                message.append("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").append(order.getUser().getPhone()).append("\n");
            } else if (order.getUser().getPhoneNumber() != null) {
                message.append("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").append(order.getUser().getPhoneNumber()).append("\n");
            }

            if (order.getUser().getEmail() != null) {
                message.append("Email: ").append(order.getUser().getEmail()).append("\n");
            }
            message.append("\n");
        }

        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        message.append("üìû <b>–ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê</b>\n");
        message.append("–ò–º—è: ").append(order.getContactName()).append("\n");
        message.append("–¢–µ–ª–µ—Ñ–æ–Ω: ").append(order.getContactPhone()).append("\n");

        // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        if (order.getDeliveryAddress() != null) {
            message.append("üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ").append(order.getDeliveryAddress()).append("\n");
        } else if (order.getDeliveryLocation() != null) {
            message.append("üìç <b>–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:</b> ").append(order.getDeliveryLocation().getAddress()).append("\n");
        }

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if (order.getComment() != null && !order.getComment().trim().isEmpty()) {
            message.append("üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ").append(order.getComment()).append("\n");
        }

        message.append("üìã <b>–°—Ç–∞—Ç—É—Å:</b> ").append(order.getStatus().getName()).append("\n\n");

        // –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        message.append("üõí <b>–°–û–°–¢–ê–í –ó–ê–ö–ê–ó–ê:</b>\n");
        for (OrderItem item : order.getItems()) {
            message.append("‚Ä¢ ").append(item.getProduct().getName())
                    .append(" x").append(item.getQuantity())
                    .append(" = ").append(item.getPrice()).append(" ‚ÇΩ\n");
        }

        message.append("\nüí∞ <b>–ò–¢–û–ì–û: ").append(order.getTotalAmount()).append(" ‚ÇΩ</b>");

        return message.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private String formatStatusUpdateMessage(Order order, String oldStatus, String newStatus) {
        StringBuilder message = new StringBuilder();
        message.append("üîÑ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê #").append(order.getId()).append("</b>\n\n");

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å–∏—Å—Ç–µ–º—ã
        if (order.getUser() != null) {
            message.append("üë§ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–ò–°–¢–ï–ú–´</b>\n");
            message.append("–ò–º—è: ").append(order.getUser().getFirstName());
            if (order.getUser().getLastName() != null) {
                message.append(" ").append(order.getUser().getLastName());
            }
            message.append("\n");

            if (order.getUser().getUsername() != null) {
                message.append("Username: @").append(order.getUser().getUsername()).append("\n");
            }

            if (order.getUser().getPhone() != null) {
                message.append("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").append(order.getUser().getPhone()).append("\n");
            } else if (order.getUser().getPhoneNumber() != null) {
                message.append("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").append(order.getUser().getPhoneNumber()).append("\n");
            }
            message.append("\n");
        }

        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        message.append("üìû <b>–ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê</b>\n");
        message.append("–ò–º—è: ").append(order.getContactName()).append("\n");
        message.append("–¢–µ–ª–µ—Ñ–æ–Ω: ").append(order.getContactPhone()).append("\n");
        message.append("üí∞ <b>–°—É–º–º–∞:</b> ").append(order.getTotalAmount()).append(" ‚ÇΩ\n\n");

        message.append("üìã <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b>\n");
        message.append("‚ùå –ë—ã–ª–æ: ").append(oldStatus).append("\n");
        message.append("‚úÖ –°—Ç–∞–ª–æ: ").append(newStatus);

        return message.toString();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     */
    private void sendMessage(String text) {
        try {
            String url = telegramProperties.getApiUrl() + "/sendMessage";

            TelegramMessage telegramMessage = new TelegramMessage();
            telegramMessage.setChatId(telegramProperties.getChatId());
            telegramMessage.setText(text);
            telegramMessage.setParseMode("HTML");

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<TelegramMessage> entity = new HttpEntity<>(telegramMessage, headers);

            ResponseEntity<String> response = telegramRestTemplate.postForEntity(url, entity, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            } else {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * DTO –¥–ª—è Telegram API
     */
    @Data
    private static class TelegramMessage {
        @JsonProperty("chat_id")
        private String chatId;

        private String text;

        @JsonProperty("parse_mode")
        private String parseMode;
    }
}