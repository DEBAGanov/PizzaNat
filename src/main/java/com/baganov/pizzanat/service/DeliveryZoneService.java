/**
 * @file: DeliveryZoneService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É
 * @dependencies: Spring Data JPA, DeliveryZone entities
 * @created: 2025-01-23
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.entity.DeliveryZone;
import com.baganov.pizzanat.entity.DeliveryZoneKeyword;
import com.baganov.pizzanat.entity.DeliveryZoneStreet;
import com.baganov.pizzanat.repository.DeliveryZoneRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class DeliveryZoneService {

    private final DeliveryZoneRepository deliveryZoneRepository;

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É
     *
     * @param address –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π Optional –µ—Å–ª–∏ –∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    @org.springframework.transaction.annotation.Transactional(readOnly = true)
    public Optional<DeliveryZone> determineZoneByAddress(String address) {
        if (address == null || address.trim().isEmpty()) {
            log.warn("–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏");
            return Optional.empty();
        }

        log.info("=== –ù–ê–ß–ê–õ–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò ===");
        log.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {}", address);

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è
            // MultipleBagFetchException
            // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–æ–Ω—ã —Å —É–ª–∏—Ü–∞–º–∏
            List<DeliveryZone> activeZones = deliveryZoneRepository.findByIsActiveTrueWithStreets();
            log.info("–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω –≤ –ë–î: {}", activeZones.size());

            if (activeZones.isEmpty()) {
                log.error("‚ùå –í –ë–î –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ó–û–ù –î–û–°–¢–ê–í–ö–ò!");
                return Optional.empty();
            }

            // 2. –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–æ–Ω –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            List<Integer> zoneIds = activeZones.stream()
                    .map(DeliveryZone::getId)
                    .toList();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
            List<DeliveryZone> zonesWithKeywords = deliveryZoneRepository.loadKeywordsForZones(zoneIds);
            log.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è {} –∑–æ–Ω", zonesWithKeywords.size());

            // 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: —É –Ω–∞—Å –µ—Å—Ç—å zones —Å streets –∏ zonesWithKeywords —Å
            // keywords
            // –ü–æ—Å–∫–æ–ª—å–∫—É Hibernate –∫—ç—à–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏, keywords —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö
            // –æ–±—ä–µ–∫—Ç–∞—Ö
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π keywords –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            for (DeliveryZone zone : zonesWithKeywords) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é keywords –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
                int keywordsCount = zone.getKeywords().size();
                log.debug("–ó–æ–Ω–∞ {}: –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤={}", zone.getName(), keywordsCount);
            }

            // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–æ–Ω —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ keywords
            Map<Integer, DeliveryZone> zonesMap = zonesWithKeywords.stream()
                    .collect(Collectors.toMap(DeliveryZone::getId, zone -> zone));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω—ã —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
            for (DeliveryZone zone : activeZones) {
                DeliveryZone zoneWithKeywords = zonesMap.get(zone.getId());
                log.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã: {} (ID: {}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {}, —É–ª–∏—Ü: {})",
                        zone.getName(), zone.getId(), zone.getPriority(),
                        zone.getStreets().size());

                if (addressMatchesZone(address, zone, zoneWithKeywords)) {
                    log.info("‚úÖ –ù–ê–ô–î–ï–ù–ê –ó–û–ù–ê: –ê–¥—Ä–µ—Å '{}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–æ–Ω–µ: {} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {}‚ÇΩ)",
                            address, zone.getName(), zone.getBaseCost());
                    return Optional.of(zone);
                } else {
                    log.info("‚ùå –ê–¥—Ä–µ—Å '{}' –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–æ–Ω–µ: {}", address, zone.getName());
                }
            }

            log.warn("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {}", address);
            log.info("=== –ö–û–ù–ï–¶ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò ===");
            return Optional.empty();
        } catch (Exception e) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ determineZoneByAddress: {}", e.getMessage(), e);
            throw e;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
     *
     * @param address          –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param zoneWithStreets  –∑–æ–Ω–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É–ª–∏—Ü–∞–º–∏
     * @param zoneWithKeywords –∑–æ–Ω–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–º–æ–∂–µ—Ç
     *                         –±—ã—Ç—å null)
     */
    private boolean addressMatchesZone(String address, DeliveryZone zoneWithStreets, DeliveryZone zoneWithKeywords) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É–ª–∏—Ü–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É–ª–∏—Ü–∞–º–∏)
        for (DeliveryZoneStreet street : zoneWithStreets.getStreets()) {
            if (street.matchesAddress(address)) {
                log.debug("–ê–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–ª–∏—Ü–µ '{}' –≤ –∑–æ–Ω–µ '{}'",
                        street.getStreetName(), zoneWithStreets.getName());
                return true;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏
        // —Å–ª–æ–≤–∞–º–∏)
        if (zoneWithKeywords != null) {
            for (DeliveryZoneKeyword keyword : zoneWithKeywords.getKeywords()) {
                if (keyword.matchesAddress(address)) {
                    log.debug("–ê–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{}' –≤ –∑–æ–Ω–µ '{}'",
                            keyword.getKeyword(), zoneWithStreets.getName());
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
     *
     * @param address     –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
     * @param orderAmount —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    public DeliveryCalculationResult calculateDelivery(String address, BigDecimal orderAmount) {
        Optional<DeliveryZone> zoneOpt = determineZoneByAddress(address);

        if (zoneOpt.isEmpty()) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–æ–Ω—É —Å 250‚ÇΩ
            log.info("–ê–¥—Ä–µ—Å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ 250‚ÇΩ", address);

            BigDecimal standardCost = new BigDecimal("250"); // 250‚ÇΩ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            BigDecimal freeThreshold = new BigDecimal("1200"); // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1200‚ÇΩ
            boolean isDeliveryFree = orderAmount.compareTo(freeThreshold) >= 0;
            BigDecimal finalCost = isDeliveryFree ? BigDecimal.ZERO : standardCost;

            return DeliveryCalculationResult.builder()
                    .address(address)
                    .deliveryAvailable(true) // –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                    .zoneName("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–æ–Ω–∞")
                    .zoneDescription("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –í–æ–ª–∂—Å–∫ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)")
                    .deliveryCost(finalCost)
                    .baseCost(standardCost)
                    .freeDeliveryThreshold(freeThreshold)
                    .isDeliveryFree(isDeliveryFree)
                    .estimatedTimeMin(30)
                    .estimatedTimeMax(50)
                    .estimatedTime("30-50 –º–∏–Ω—É—Ç")
                    .currency("RUB")
                    .message(isDeliveryFree ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞" : "–î–æ—Å—Ç–∞–≤–∫–∞ - " + finalCost + " ‚ÇΩ")
                    .workingHours("09:00-22:00")
                    .city("–í–æ–ª–∂—Å–∫")
                    .region("–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª")
                    .reason(null) // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
                    .build();
        }

        DeliveryZone zone = zoneOpt.get();
        BigDecimal finalCost = zone.getFinalDeliveryCost(orderAmount);
        boolean isFree = zone.isDeliveryFree(orderAmount);

        return DeliveryCalculationResult.builder()
                .address(address)
                .deliveryAvailable(true)
                .zoneName(zone.getName())
                .zoneDescription(zone.getDescription())
                .deliveryCost(finalCost)
                .baseCost(zone.getBaseCost())
                .freeDeliveryThreshold(zone.getFreeDeliveryThreshold())
                .isDeliveryFree(isFree)
                .estimatedTimeMin(zone.getDeliveryTimeMin())
                .estimatedTimeMax(zone.getDeliveryTimeMax())
                .estimatedTime(zone.getFormattedDeliveryTime())
                .currency("RUB")
                .message(isFree ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞" : "–î–æ—Å—Ç–∞–≤–∫–∞ - " + finalCost + " ‚ÇΩ")
                .workingHours("09:00-22:00") // TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
                .city("–í–æ–ª–∂—Å–∫")
                .region("–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª")
                .build();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    public List<DeliveryZone> getAllActiveZones() {
        return deliveryZoneRepository.findByIsActiveTrueOrderByPriorityDesc();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–æ–Ω—É –ø–æ ID
     */
    public Optional<DeliveryZone> getZoneById(Integer id) {
        return deliveryZoneRepository.findById(id);
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class DeliveryCalculationResult {
        private String address;
        private boolean deliveryAvailable;
        private String reason;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–æ–Ω–µ
        private String zoneName;
        private String zoneDescription;

        // –°—Ç–æ–∏–º–æ—Å—Ç—å
        private BigDecimal deliveryCost;
        private BigDecimal baseCost;
        private BigDecimal freeDeliveryThreshold;
        private boolean isDeliveryFree;
        private String currency;

        // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
        private Integer estimatedTimeMin;
        private Integer estimatedTimeMax;
        private String estimatedTime;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        private String message;
        private String workingHours;
        private String city;
        private String region;
    }
}