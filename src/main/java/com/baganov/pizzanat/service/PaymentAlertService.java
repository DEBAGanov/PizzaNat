/**
 * @file: PaymentAlertService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * @dependencies: PaymentMetricsService, Spring Events
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.entity.Payment;
import com.baganov.pizzanat.entity.PaymentStatus;
import com.baganov.pizzanat.event.PaymentAlertEvent;
import com.baganov.pizzanat.service.PaymentMetricsService.PaymentMetricsSummary;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
 */
@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
public class PaymentAlertService {

    private final PaymentMetricsService paymentMetricsService;
    private final ApplicationEventPublisher eventPublisher;

    // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    private static final double LOW_CONVERSION_THRESHOLD = 70.0; // %
    private static final double HIGH_FAILURE_RATE_THRESHOLD = 10.0; // %
    private static final long MAX_PENDING_TIME_MINUTES = 30; // –º–∏–Ω—É—Ç
    private static final int MIN_PAYMENTS_FOR_ALERT = 5; // –º–∏–Ω–∏–º—É–º –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞)
    private final AtomicBoolean lowConversionAlertSent = new AtomicBoolean(false);
    private final AtomicBoolean highFailureRateAlertSent = new AtomicBoolean(false);
    private final AtomicLong lastAlertTime = new AtomicLong(0);
    private static final long ALERT_COOLDOWN_MINUTES = 30; // –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void checkCriticalEvents() {
        try {
            log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã");

            PaymentMetricsSummary summary = paymentMetricsService.getMetricsSummary();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if (summary.totalPayments() >= MIN_PAYMENTS_FOR_ALERT) {
                checkConversionRate(summary);
                checkFailureRate(summary);
                checkSystemHealth();
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {}", e.getMessage(), e);
            sendSystemErrorAlert(e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
     */
    public void onPaymentCreated(Payment payment) {
        log.debug("üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ID={}", payment.getId());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã
        if (payment.getAmount().compareTo(BigDecimal.valueOf(10000)) > 0) {
            sendHighAmountPaymentAlert(payment);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    public void onPaymentStatusChanged(Payment payment, PaymentStatus oldStatus) {
        log.debug("üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ID={}, {} ‚Üí {}",
                payment.getId(), oldStatus, payment.getStatus());

        switch (payment.getStatus()) {
            case FAILED -> handlePaymentFailure(payment, oldStatus);
            case SUCCEEDED -> handlePaymentSuccess(payment);
            case PENDING -> checkPendingPaymentTimeout(payment);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
     */
    private void checkConversionRate(PaymentMetricsSummary summary) {
        double conversionRate = summary.conversionRate();

        if (conversionRate < LOW_CONVERSION_THRESHOLD && !lowConversionAlertSent.get()) {
            if (canSendAlert()) {
                sendLowConversionAlert(conversionRate, summary);
                lowConversionAlertSent.set(true);
                updateLastAlertTime();
            }
        } else if (conversionRate >= LOW_CONVERSION_THRESHOLD) {
            lowConversionAlertSent.set(false); // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –æ—à–∏–±–æ–∫
     */
    private void checkFailureRate(PaymentMetricsSummary summary) {
        double failureRate = summary.totalPayments() > 0
                ? (double) summary.failedPayments() / summary.totalPayments() * 100.0
                : 0.0;

        if (failureRate > HIGH_FAILURE_RATE_THRESHOLD && !highFailureRateAlertSent.get()) {
            if (canSendAlert()) {
                sendHighFailureRateAlert(failureRate, summary);
                highFailureRateAlertSent.set(true);
                updateLastAlertTime();
            }
        } else if (failureRate <= HIGH_FAILURE_RATE_THRESHOLD) {
            highFailureRateAlertSent.set(false); // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    private void checkSystemHealth() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏:
        // - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ÆKassa API
        // - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
        // - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏/CPU
        log.debug("üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void handlePaymentFailure(Payment payment, PaymentStatus oldStatus) {
        log.warn("‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ: ID={}, —Å—É–º–º–∞={}‚ÇΩ, –æ—à–∏–±–∫–∞={}",
                payment.getId(), payment.getAmount(), payment.getErrorMessage());

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (payment.getAmount().compareTo(BigDecimal.valueOf(5000)) > 0) {
            sendCriticalPaymentFailureAlert(payment);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void handlePaymentSuccess(Payment payment) {
        log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: ID={}, —Å—É–º–º–∞={}‚ÇΩ",
                payment.getId(), payment.getAmount());

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
        if (payment.getAmount().compareTo(BigDecimal.valueOf(15000)) > 0) {
            sendLargePaymentSuccessAlert(payment);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
     */
    private void checkPendingPaymentTimeout(Payment payment) {
        if (payment.getCreatedAt() != null) {
            long minutesAgo = java.time.Duration.between(
                    payment.getCreatedAt(), LocalDateTime.now()).toMinutes();

            if (minutesAgo > MAX_PENDING_TIME_MINUTES) {
                sendPendingPaymentTimeoutAlert(payment, minutesAgo);
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –Ω–∏–∑–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
     */
    private void sendLowConversionAlert(double conversionRate, PaymentMetricsSummary summary) {
        String message = String.format(
                "üö® –ê–õ–ï–†–¢: –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–ª–∞—Ç–µ–∂–µ–π!\n\n" +
                        "üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: %.1f%% (–Ω–æ—Ä–º–∞: >%.0f%%)\n" +
                        "üìà –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: %d\n" +
                        "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %d\n" +
                        "‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: %d\n" +
                        "üí∞ –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s",
                conversionRate, LOW_CONVERSION_THRESHOLD,
                summary.totalPayments(), summary.successfulPayments(), summary.failedPayments(),
                summary.totalAmount().doubleValue(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.LOW_CONVERSION);
        log.error("üö® –ê–õ–ï–†–¢: –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {}%", conversionRate);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ –æ—à–∏–±–æ–∫
     */
    private void sendHighFailureRateAlert(double failureRate, PaymentMetricsSummary summary) {
        String message = String.format(
                "üö® –ê–õ–ï–†–¢: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π!\n\n" +
                        "üìä –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: %.1f%% (–Ω–æ—Ä–º–∞: <%.0f%%)\n" +
                        "üìà –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: %d\n" +
                        "‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: %d\n" +
                        "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %d\n\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s",
                failureRate, HIGH_FAILURE_RATE_THRESHOLD,
                summary.totalPayments(), summary.failedPayments(), summary.successfulPayments(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.HIGH_FAILURE_RATE);
        log.error("üö® –ê–õ–ï–†–¢: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π: {}%", failureRate);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –∫—Ä—É–ø–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
     */
    private void sendHighAmountPaymentAlert(Payment payment) {
        String message = String.format(
                "üí∞ –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n" +
                        "üÜî ID: %d\n" +
                        "üíµ –°—É–º–º–∞: %.2f‚ÇΩ\n" +
                        "üè¶ –ú–µ—Ç–æ–¥: %s\n" +
                        "üì¶ –ó–∞–∫–∞–∑: #%d\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s",
                payment.getId(), payment.getAmount().doubleValue(),
                payment.getMethod().getDisplayName(),
                payment.getOrder().getId(),
                payment.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.HIGH_AMOUNT_PAYMENT);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void sendCriticalPaymentFailureAlert(Payment payment) {
        String message = String.format(
                "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–õ–ê–¢–ï–ñ–ê!\n\n" +
                        "üÜî ID: %d\n" +
                        "üíµ –°—É–º–º–∞: %.2f‚ÇΩ\n" +
                        "üè¶ –ú–µ—Ç–æ–¥: %s\n" +
                        "‚ùå –û—à–∏–±–∫–∞: %s\n" +
                        "üì¶ –ó–∞–∫–∞–∑: #%d\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s",
                payment.getId(), payment.getAmount().doubleValue(),
                payment.getMethod().getDisplayName(),
                payment.getErrorMessage() != null ? payment.getErrorMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                payment.getOrder().getId(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.CRITICAL_PAYMENT_FAILURE);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω–æ–º —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
     */
    private void sendLargePaymentSuccessAlert(Payment payment) {
        String message = String.format(
                "üéâ –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" +
                        "üÜî ID: %d\n" +
                        "üí∞ –°—É–º–º–∞: %.2f‚ÇΩ\n" +
                        "üè¶ –ú–µ—Ç–æ–¥: %s\n" +
                        "üì¶ –ó–∞–∫–∞–∑: #%d\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s",
                payment.getId(), payment.getAmount().doubleValue(),
                payment.getMethod().getDisplayName(),
                payment.getOrder().getId(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.LARGE_PAYMENT_SUCCESS);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –∑–∞–≤–∏—Å—à–µ–º –ø–ª–∞—Ç–µ–∂–µ
     */
    private void sendPendingPaymentTimeoutAlert(Payment payment, long minutesAgo) {
        String message = String.format(
                "‚è∞ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–∏—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!\n\n" +
                        "üÜî ID: %d\n" +
                        "üíµ –°—É–º–º–∞: %.2f‚ÇΩ\n" +
                        "üè¶ –ú–µ—Ç–æ–¥: %s\n" +
                        "üì¶ –ó–∞–∫–∞–∑: #%d\n" +
                        "‚è±Ô∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: %d –º–∏–Ω\n" +
                        "‚è∞ –°–æ–∑–¥–∞–Ω: %s",
                payment.getId(), payment.getAmount().doubleValue(),
                payment.getMethod().getDisplayName(),
                payment.getOrder().getId(), minutesAgo,
                payment.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.PENDING_PAYMENT_TIMEOUT);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ
     */
    private void sendSystemErrorAlert(Exception e) {
        String message = String.format(
                "üö® –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê!\n\n" +
                        "‚ùå –û—à–∏–±–∫–∞: %s\n" +
                        "üìã –ö–ª–∞—Å—Å: %s\n" +
                        "‚è∞ –í—Ä–µ–º—è: %s\n\n" +
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã!",
                e.getMessage(),
                e.getClass().getSimpleName(),
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));

        sendTelegramAlert(message, PaymentAlertEvent.AlertType.SYSTEM_ERROR);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     */
    private void sendTelegramAlert(String message, PaymentAlertEvent.AlertType alertType) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
            PaymentAlertEvent alertEvent = new PaymentAlertEvent(this, message, alertType);
            eventPublisher.publishEvent(alertEvent);

            log.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —Ç–∏–ø–∞ {}: {}", alertType, message);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {}", e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ (–∫—É–ª–¥–∞—É–Ω)
     */
    private boolean canSendAlert() {
        long now = System.currentTimeMillis();
        long lastAlert = lastAlertTime.get();
        return (now - lastAlert) > (ALERT_COOLDOWN_MINUTES * 60 * 1000);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
     */
    private void updateLastAlertTime() {
        lastAlertTime.set(System.currentTimeMillis());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
     */
    public AlertStatistics getAlertStatistics() {
        return new AlertStatistics(
                lowConversionAlertSent.get(),
                highFailureRateAlertSent.get(),
                lastAlertTime.get(),
                ALERT_COOLDOWN_MINUTES);
    }

    /**
     * DTO –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
     */
    public record AlertStatistics(
            boolean lowConversionAlertActive,
            boolean highFailureRateAlertActive,
            long lastAlertTimestamp,
            long cooldownMinutes) {
    }
}