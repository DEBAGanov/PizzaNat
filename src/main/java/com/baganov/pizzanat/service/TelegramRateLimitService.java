/**
 * @file: TelegramRateLimitService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 * @dependencies: TelegramRateLimitConfig, Spring Scheduling
 * @created: 2025-01-15
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.TelegramRateLimitConfig;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramRateLimitService {

    private final TelegramRateLimitConfig rateLimitConfig;
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    private final AtomicInteger messagesThisSecond = new AtomicInteger(0);
    private final AtomicInteger messagesThisMinute = new AtomicInteger(0);
    private final AtomicLong lastSecondReset = new AtomicLong(System.currentTimeMillis());
    private final AtomicLong lastMinuteReset = new AtomicLong(System.currentTimeMillis());
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
    private final ConcurrentHashMap<String, BroadcastProgress> activeBroadcasts = new ConcurrentHashMap<>();

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
     */
    public boolean canSendMessage() {
        resetCountersIfNeeded();
        
        return messagesThisSecond.get() < rateLimitConfig.getMessagesPerSecond() &&
               messagesThisMinute.get() < rateLimitConfig.getMessagesPerMinute();
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public void registerMessageSent() {
        resetCountersIfNeeded();
        messagesThisSecond.incrementAndGet();
        messagesThisMinute.incrementAndGet();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
     */
    public long getRecommendedDelay() {
        if (canSendMessage()) {
            return rateLimitConfig.getDelayBetweenMessages();
        }
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ —Å–µ–∫—É–Ω–¥—É, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—É–Ω–¥—ã
        if (messagesThisSecond.get() >= rateLimitConfig.getMessagesPerSecond()) {
            long timeSinceLastReset = System.currentTimeMillis() - lastSecondReset.get();
            return Math.max(1000 - timeSinceLastReset, 0) + rateLimitConfig.getDelayBetweenMessages();
        }
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
        if (messagesThisMinute.get() >= rateLimitConfig.getMessagesPerMinute()) {
            long timeSinceLastReset = System.currentTimeMillis() - lastMinuteReset.get();
            return Math.max(60000 - timeSinceLastReset, 0);
        }
        
        return rateLimitConfig.getDelayBetweenMessages();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
     */
    public String createBroadcast(int totalUsers) {
        String broadcastId = "broadcast_" + System.currentTimeMillis();
        BroadcastProgress progress = new BroadcastProgress(totalUsers);
        activeBroadcasts.put(broadcastId, progress);
        
        log.info("üì¢ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ {}: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", broadcastId, totalUsers);
        return broadcastId;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    public void updateBroadcastProgress(String broadcastId, boolean success) {
        BroadcastProgress progress = activeBroadcasts.get(broadcastId);
        if (progress != null) {
            if (success) {
                progress.incrementSuccess();
            } else {
                progress.incrementFailure();
            }
            
            if (rateLimitConfig.isEnableDetailedLogging()) {
                log.debug("üìä –†–∞—Å—Å—ã–ª–∫–∞ {}: —É—Å–ø–µ—à–Ω–æ={}, –æ—à–∏–±–æ–∫={}, –≤—Å–µ–≥–æ={}", 
                    broadcastId, progress.getSuccessCount(), progress.getFailureCount(), progress.getTotalUsers());
            }
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public BroadcastProgress finalizeBroadcast(String broadcastId) {
        BroadcastProgress progress = activeBroadcasts.remove(broadcastId);
        if (progress != null) {
            progress.setCompleted(true);
            progress.setCompletedAt(LocalDateTime.now());
            
            log.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={}, –æ—à–∏–±–æ–∫={}, –≤—Ä–µ–º—è={}–º–∏–Ω", 
                broadcastId, 
                progress.getSuccessCount(), 
                progress.getFailureCount(),
                ChronoUnit.MINUTES.between(progress.getStartedAt(), progress.getCompletedAt()));
        }
        return progress;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    public BroadcastProgress getBroadcastProgress(String broadcastId) {
        return activeBroadcasts.get(broadcastId);
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private void resetCountersIfNeeded() {
        long currentTime = System.currentTimeMillis();
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–µ–∫—É–Ω–¥
        if (currentTime - lastSecondReset.get() >= 1000) {
            messagesThisSecond.set(0);
            lastSecondReset.set(currentTime);
        }
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–Ω—É—Ç
        if (currentTime - lastMinuteReset.get() >= 60000) {
            messagesThisMinute.set(0);
            lastMinuteReset.set(currentTime);
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    public static class BroadcastProgress {
        private final int totalUsers;
        private final AtomicInteger successCount = new AtomicInteger(0);
        private final AtomicInteger failureCount = new AtomicInteger(0);
        private final LocalDateTime startedAt = LocalDateTime.now();
        private LocalDateTime completedAt;
        private boolean completed = false;

        public BroadcastProgress(int totalUsers) {
            this.totalUsers = totalUsers;
        }

        public void incrementSuccess() {
            successCount.incrementAndGet();
        }

        public void incrementFailure() {
            failureCount.incrementAndGet();
        }

        // Getters and setters
        public int getTotalUsers() { return totalUsers; }
        public int getSuccessCount() { return successCount.get(); }
        public int getFailureCount() { return failureCount.get(); }
        public int getProcessedCount() { return successCount.get() + failureCount.get(); }
        public LocalDateTime getStartedAt() { return startedAt; }
        public LocalDateTime getCompletedAt() { return completedAt; }
        public void setCompletedAt(LocalDateTime completedAt) { this.completedAt = completedAt; }
        public boolean isCompleted() { return completed; }
        public void setCompleted(boolean completed) { this.completed = completed; }
    }
}
