/**
 * @file: PaymentPollingService.java
 * @description: –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–¥–µ—Ä–∂–∫–∏ webhook'–æ–≤
 * @dependencies: YooKassaPaymentService, AdminBotService, PaymentRepository
 * @created: 2025-01-23
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.entity.Payment;
import com.baganov.pizzanat.entity.PaymentStatus;
import com.baganov.pizzanat.entity.PaymentMethod;
import com.baganov.pizzanat.entity.Order;
import com.baganov.pizzanat.entity.OrderPaymentStatus;
import com.baganov.pizzanat.repository.PaymentRepository;
import com.baganov.pizzanat.repository.OrderRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã
 * 
 * –ü–†–û–ë–õ–ï–ú–ê: Webhook'–∏ –æ—Ç –Æ–ö–∞—Å—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 10 –º–∏–Ω—É—Ç
 * –†–ï–®–ï–ù–ò–ï: –û–ø—Ä–∞—à–∏–≤–∞–µ–º –Æ–ö–∞—Å—Å—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING/WAITING_FOR_CAPTURE
 * 
 * –õ–û–ì–ò–ö–ê:
 * 1. –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–≤–æ–∑—Ä–∞—Å—Ç < 10 –º–∏–Ω—É—Ç)
 * 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –Æ–ö–∞—Å—Å—ã —á–µ—Ä–µ–∑ API
 * 3. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ SUCCEEDED - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π "–û–ü–õ–ê–ß–ï–ù –°–ë–ü"
 * 4. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å CANCELLED/FAILED - –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PaymentPollingService {

    private final PaymentRepository paymentRepository;
    private final OrderRepository orderRepository;
    private final YooKassaPaymentService yooKassaPaymentService;
    private final AdminBotService adminBotService;

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏ –º–ª–∞–¥—à–µ 10 –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö PENDING/WAITING_FOR_CAPTURE
     */
    @Scheduled(fixedRate = 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    @Async
    @Transactional
    public void pollPendingPayments() {
        try {
            // –í—Ä–µ–º—è 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º
            LocalDateTime tenMinutesAgo = LocalDateTime.now().minus(10, ChronoUnit.MINUTES);
            
            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
            List<Payment> pendingPayments = paymentRepository
                .findActivePaymentsForPolling(tenMinutesAgo);
            
            if (pendingPayments.isEmpty()) {
                log.debug("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–ø—Ä–æ—Å–∞");
                return;
            }
            
            log.info("üîÑ –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã", pendingPayments.size());
            
            for (Payment payment : pendingPayments) {
                pollSinglePayment(payment);
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å—ã: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    @Async
    @Transactional
    public void pollSinglePayment(Payment payment) {
        try {
            PaymentStatus oldStatus = payment.getStatus();
            
            log.debug("üîç –û–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–∞ #{} (—Å—Ç–∞—Ç—É—Å: {}, –≤–æ–∑—Ä–∞—Å—Ç: {}–º–∏–Ω)", 
                payment.getId(), oldStatus, 
                ChronoUnit.MINUTES.between(payment.getCreatedAt(), LocalDateTime.now()));
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –Æ–ö–∞—Å—Å—ã
            var updatedPayment = yooKassaPaymentService.checkPaymentStatus(payment.getId());
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
            payment = paymentRepository.findById(payment.getId())
                .orElseThrow(() -> new RuntimeException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"));
            
            PaymentStatus newStatus = payment.getStatus();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
            if (oldStatus != newStatus) {
                log.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ #{} –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ polling: {} ‚Üí {}", 
                    payment.getId(), oldStatus, newStatus);
                
                handlePaymentStatusChange(payment, oldStatus, newStatus);
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ #{}: {}", payment.getId(), e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ polling
     */
    private void handlePaymentStatusChange(Payment payment, PaymentStatus oldStatus, PaymentStatus newStatus) {
        Order order = payment.getOrder();
        
        switch (newStatus) {
            case SUCCEEDED:
                // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç
                handleSuccessfulPayment(payment, order);
                break;
                
            case CANCELLED:
                log.warn("‚ùå –ü–ª–∞—Ç–µ–∂ #{} –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ polling –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}", 
                    payment.getId(), order.getId());
                // –ê–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                adminBotService.sendPaymentCancelAlert(payment, "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –æ–ø—Ä–æ—Å –Æ–ö–∞—Å—Å—ã)");
                break;
                
            case FAILED:
                log.error("üí• –ü–ª–∞—Ç–µ–∂ #{} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π —á–µ—Ä–µ–∑ polling –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}", 
                    payment.getId(), order.getId());
                // –ê–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º  
                adminBotService.sendPaymentFailureAlert(payment, "–ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –æ–ø—Ä–æ—Å –Æ–ö–∞—Å—Å—ã)");
                break;
                
            default:
                log.debug("üîÑ –ü–ª–∞—Ç–µ–∂ #{} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ {} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", 
                    payment.getId(), newStatus);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
     */
    private void handleSuccessfulPayment(Payment payment, Order order) {
        try {
            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ #{} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ polling –¥–ª—è –∑–∞–∫–∞–∑–∞ #{} (—Å–ø–æ—Å–æ–±: {})", 
                payment.getId(), order.getId(), payment.getMethod());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            order.setPaymentStatus(OrderPaymentStatus.PAID);
            orderRepository.save(order);
            log.info("üí∞ –ó–∞–∫–∞–∑ #{} - —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ PAID —á–µ—Ä–µ–∑ polling", order.getId());
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
            String paymentLabel = getPaymentMethodLabel(payment.getMethod());
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            adminBotService.sendSuccessfulPaymentOrderNotification(order, paymentLabel);
            
            log.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç", 
                order.getId(), paymentLabel);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ #{}: {}", payment.getId(), e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–π –ø–æ–º–µ—Ç–∫–∏ –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
     */
    private String getPaymentMethodLabel(PaymentMethod method) {
        switch (method) {
            case SBP:
                return "–û–ü–õ–ê–ß–ï–ù –°–ë–ü";
            case BANK_CARD:
                return "–û–ü–õ–ê–ß–ï–ù –ö–ê–†–¢–û–ô";
            case CASH:
                return "–ù–ê–õ–ò–ß–ù–´–ú–ò";
            default:
                return "–û–ü–õ–ê–ß–ï–ù –û–ù–õ–ê–ô–ù";
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    @Async
    @Transactional
    public void forcePollPayment(Long paymentId) {
        try {
            Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));
            
            log.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ #{}", paymentId);
            pollSinglePayment(payment);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ #{}: {}", paymentId, e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @Transactional(readOnly = true)
    public void logPollingStatistics() {
        try {
            LocalDateTime tenMinutesAgo = LocalDateTime.now().minus(10, ChronoUnit.MINUTES);
            List<Payment> activePayments = paymentRepository.findActivePaymentsForPolling(tenMinutesAgo);
            
            if (!activePayments.isEmpty()) {
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–ø—Ä–æ—Å–∞: {} —à—Ç.", activePayments.size());
                
                activePayments.forEach(payment -> 
                    log.debug("   - –ü–ª–∞—Ç–µ–∂ #{}: —Å—Ç–∞—Ç—É—Å {}, –≤–æ–∑—Ä–∞—Å—Ç {}–º–∏–Ω", 
                        payment.getId(), payment.getStatus(), 
                        ChronoUnit.MINUTES.between(payment.getCreatedAt(), LocalDateTime.now()))
                );
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ polling: {}", e.getMessage());
        }
    }
} 