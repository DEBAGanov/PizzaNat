package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.TelegramConfig;
import com.baganov.pizzanat.model.dto.telegram.TelegramUpdate;
import com.baganov.pizzanat.model.dto.telegram.TelegramUserData;
import com.baganov.pizzanat.util.TokenGenerator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility –∏–∑ SOLID.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramWebhookService {

    @Qualifier("telegramAuthRestTemplate")
    private final RestTemplate telegramAuthRestTemplate;

    private final TelegramAuthService telegramAuthService;
    private final TokenGenerator tokenGenerator;
    private final TelegramConfig.TelegramAuthProperties telegramAuthProperties;

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ update –æ—Ç Telegram
     * 
     * @param update –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram webhook
     */
    public void processUpdate(TelegramUpdate update) {
        try {
            if (update == null) {
                log.warn("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π Telegram update");
                return;
            }

            log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram update: {}", update.getUpdateId());

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage()) {
                processMessage(update);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (inline –∫–Ω–æ–ø–∫–∏)
            if (update.hasCallbackQuery()) {
                processCallbackQuery(update);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram update: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * 
     * @param update Telegram update —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    private void processMessage(TelegramUpdate update) {
        TelegramUpdate.TelegramMessage message = update.getMessage();

        if (message == null || message.getText() == null) {
            return;
        }

        String text = message.getText().trim();
        Long chatId = message.getChat().getId();
        TelegramUserData user = message.getFrom();

        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), text);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º
        if (text.startsWith("/start ")) {
            handleStartCommand(text, chatId, user);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
        else if (text.equals("/start")) {
            sendWelcomeMessage(chatId);
        } else if (text.equals("/help")) {
            sendHelpMessage(chatId);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            sendUnknownCommandMessage(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
     * 
     * @param update Telegram update —Å callback query
     */
    private void processCallbackQuery(TelegramUpdate update) {
        TelegramUpdate.TelegramCallbackQuery callbackQuery = update.getCallbackQuery();

        if (callbackQuery == null || callbackQuery.getData() == null) {
            return;
        }

        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChat().getId();
        TelegramUserData user = callbackQuery.getFrom();

        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), data);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (data.startsWith("confirm_auth_")) {
            String authToken = data.substring(13); // —É–±–∏—Ä–∞–µ–º "confirm_auth_"
            handleAuthConfirmation(authToken, chatId, user);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        else if (data.startsWith("cancel_auth_")) {
            String authToken = data.substring(12); // —É–±–∏—Ä–∞–µ–º "cancel_auth_"
            handleAuthCancellation(authToken, chatId, user);
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        answerCallbackQuery(callbackQuery.getId());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param command –ø–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @param chatId  ID —á–∞—Ç–∞
     * @param user    –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleStartCommand(String command, Long chatId, TelegramUserData user) {
        String authToken = tokenGenerator.extractTokenFromStartCommand(command);

        if (authToken != null) {
            log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å —Ç–æ–∫–µ–Ω–æ–º: {}",
                    user.getId(), authToken);
            sendAuthConfirmationMessage(chatId, authToken, user);
        } else {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    user.getId(), command);
            sendInvalidTokenMessage(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param authToken —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @param chatId    ID —á–∞—Ç–∞
     * @param user      –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleAuthConfirmation(String authToken, Long chatId, TelegramUserData user) {
        try {
            telegramAuthService.confirmAuth(authToken, user);
            sendAuthSuccessMessage(chatId, user);
            log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å —Ç–æ–∫–µ–Ω–æ–º: {}",
                    user.getId(), authToken);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {}: {}",
                    authToken, e.getMessage());
            sendAuthErrorMessage(chatId, e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param authToken —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @param chatId    ID —á–∞—Ç–∞
     * @param user      –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleAuthCancellation(String authToken, Long chatId, TelegramUserData user) {
        sendAuthCancelledMessage(chatId);
        log.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {}",
                user.getId(), authToken);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param chatId    ID —á–∞—Ç–∞
     * @param authToken —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @param user      –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void sendAuthConfirmationMessage(Long chatId, String authToken, TelegramUserData user) {
        String message = String.format(
                "üçï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaNat!*\n\n" +
                        "–ü—Ä–∏–≤–µ—Ç, %s!\n\n" +
                        "–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?\n\n" +
                        "–ù–∞–∂–º–∏—Ç–µ ‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å* –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç",
                user.getDisplayName());

        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        Map<String, Object> keyboard = Map.of(
                "inline_keyboard", new Object[][] {
                        {
                                Map.of(
                                        "text", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                        "callback_data", "confirm_auth_" + authToken),
                                Map.of(
                                        "text", "‚ùå –û—Ç–º–µ–Ω–∞",
                                        "callback_data", "cancel_auth_" + authToken)
                        }
                });

        sendMessage(chatId, message, "Markdown", keyboard);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param user   –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void sendAuthSuccessMessage(Long chatId, TelegramUserData user) {
        String message = String.format(
                "‚úÖ *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n" +
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n\n" +
                        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PizzaNat. " +
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑.",
                user.getDisplayName());

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendAuthCancelledMessage(Long chatId) {
        String message = "‚ùå *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n" +
                "–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. " +
                "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.";

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * 
     * @param chatId       ID —á–∞—Ç–∞
     * @param errorMessage —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    private void sendAuthErrorMessage(Long chatId, String errorMessage) {
        String message = "‚ùå *–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*\n\n" +
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. " +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.\n\n" +
                "_–î–µ—Ç–∞–ª–∏: " + errorMessage + "_";

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendWelcomeMessage(Long chatId) {
        String message = "üçï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PizzaNat!*\n\n" +
                "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n" +
                "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n" +
                "–ö–æ–º–∞–Ω–¥—ã:\n" +
                "/help - —Å–ø—Ä–∞–≤–∫–∞";

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendHelpMessage(Long chatId) {
        String message = "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ PizzaNat Bot*\n\n" +
                "*–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*\n" +
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PizzaNat\n" +
                "2. –í—ã–±–µ—Ä–∏—Ç–µ \"–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram\"\n" +
                "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É\n" +
                "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ —ç—Ç–æ–º –±–æ—Ç–µ\n\n" +
                "*–ö–æ–º–∞–Ω–¥—ã:*\n" +
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞";

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendUnknownCommandMessage(Long chatId) {
        String message = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.";

        sendMessage(chatId, message, null, null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendInvalidTokenMessage(Long chatId) {
        String message = "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\n" +
                "–°—Å—ã–ª–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.\n\n" +
                "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.";

        sendMessage(chatId, message, "Markdown", null);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     * 
     * @param chatId      ID —á–∞—Ç–∞
     * @param text        —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param parseMode   —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)
     * @param replyMarkup –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    private void sendMessage(Long chatId, String text, String parseMode, Object replyMarkup) {
        try {
            if (!telegramAuthProperties.isValid()) {
                log.warn("Telegram auth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                return;
            }

            String url = telegramAuthProperties.getApiUrl() + "/sendMessage";

            Map<String, Object> request = new java.util.HashMap<>();
            request.put("chat_id", chatId);
            request.put("text", text);

            if (parseMode != null) {
                request.put("parse_mode", parseMode);
            }

            if (replyMarkup != null) {
                request.put("reply_markup", replyMarkup);
            }

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);

            ResponseEntity<String> response = telegramAuthRestTemplate.postForEntity(url, entity, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                log.debug("Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {}", chatId);
            } else {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {}", response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–≤–µ—Ç –Ω–∞ callback query
     * 
     * @param callbackQueryId ID callback query
     */
    private void answerCallbackQuery(String callbackQueryId) {
        try {
            if (!telegramAuthProperties.isValid()) {
                return;
            }

            String url = telegramAuthProperties.getApiUrl() + "/answerCallbackQuery";

            Map<String, Object> request = Map.of("callback_query_id", callbackQueryId);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);

            telegramAuthRestTemplate.postForEntity(url, entity, String.class);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {}", e.getMessage(), e);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook –≤ Telegram
     * 
     * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
     */
    public boolean registerWebhook() {
        try {
            if (!telegramAuthProperties.isValid() || telegramAuthProperties.getWebhookUrl() == null) {
                log.error("Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return false;
            }

            String url = telegramAuthProperties.getApiUrl() + "/setWebhook";

            Map<String, Object> request = Map.of("url", telegramAuthProperties.getWebhookUrl());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);

            ResponseEntity<String> response = telegramAuthRestTemplate.postForEntity(url, entity, String.class);

            boolean success = response.getStatusCode().is2xxSuccessful();
            log.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook: {}, URL: {}",
                    success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞", telegramAuthProperties.getWebhookUrl());

            return success;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ webhook –∏–∑ Telegram
     * 
     * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
     */
    public boolean deleteWebhook() {
        try {
            if (!telegramAuthProperties.isValid()) {
                return false;
            }

            String url = telegramAuthProperties.getApiUrl() + "/deleteWebhook";

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = telegramAuthRestTemplate.postForEntity(url, entity, String.class);

            boolean success = response.getStatusCode().is2xxSuccessful();
            log.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook: {}", success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞");

            return success;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
     * 
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
     */
    public Object getWebhookInfo() {
        try {
            if (!telegramAuthProperties.isValid()) {
                return Map.of(
                        "error", "Telegram auth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        "configured", false);
            }

            String url = telegramAuthProperties.getApiUrl() + "/getWebhookInfo";

            ResponseEntity<String> response = telegramAuthRestTemplate.getForEntity(url, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                return Map.of(
                        "webhookInfo", response.getBody(),
                        "configured", true,
                        "timestamp", LocalDateTime.now());
            } else {
                return Map.of(
                        "error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        "status", response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {}", e.getMessage(), e);
            return Map.of(
                    "error", e.getMessage(),
                    "timestamp", LocalDateTime.now());
        }
    }
}