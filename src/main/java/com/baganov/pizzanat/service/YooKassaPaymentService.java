/**
 * @file: YooKassaPaymentService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –ÆKassa API
 * @dependencies: YooKassaConfig, PaymentRepository, OrderRepository, WebClient
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.YooKassaConfig;
import com.baganov.pizzanat.entity.*;
import com.baganov.pizzanat.event.NewOrderEvent;
import com.baganov.pizzanat.model.dto.payment.CreatePaymentRequest;
import com.baganov.pizzanat.model.dto.payment.PaymentResponse;
import com.baganov.pizzanat.model.dto.payment.SbpBankInfo;
import com.baganov.pizzanat.repository.OrderRepository;
import com.baganov.pizzanat.repository.PaymentRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Timer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;

import java.math.BigDecimal;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa
 */
@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
public class YooKassaPaymentService {

    private final YooKassaConfig yooKassaConfig;
    private final WebClient yooKassaWebClient;
    private final PaymentRepository paymentRepository;
    private final OrderRepository orderRepository;
    private final ObjectMapper objectMapper;
    private final PaymentMetricsService paymentMetricsService;
    private final PaymentAlertService paymentAlertService;
    private final ApplicationEventPublisher eventPublisher;

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa API
     */
    @Transactional
    public PaymentResponse createPayment(CreatePaymentRequest request) {
        log.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {}", request.getOrderId());

        // –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        Timer.Sample timerSample = paymentMetricsService.startPaymentCreationTimer();

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        Order order = orderRepository.findById(request.getOrderId().intValue())
                .orElseThrow(() -> new IllegalArgumentException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + request.getOrderId()));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å
        validateOrderForPayment(order);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
        BigDecimal amount = request.hasCustomAmount() ? request.getAmount() : order.getTotalAmount();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        Payment payment = new Payment(order, request.getMethod(), amount);
        payment.setBankId(request.getBankId());
        payment.setIdempotenceKey(generateIdempotenceKey());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        payment = paymentRepository.save(payment);

        try {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            paymentMetricsService.recordPaymentCreated(payment);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –∫—Ä—É–ø–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            paymentAlertService.onPaymentCreated(payment);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa API
            Map<String, Object> yooKassaRequest = buildYooKassaPaymentRequest(payment, request);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa
            JsonNode response = sendPaymentRequest(yooKassaRequest, payment.getIdempotenceKey());

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            updatePaymentFromYooKassaResponse(payment, response);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            payment = paymentRepository.save(payment);

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ –ÆKassa —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ID={}, YooKassa ID={}",
                    payment.getId(), payment.getYookassaPaymentId());

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            PaymentResponse result = mapToPaymentResponse(payment);
            return paymentMetricsService.recordPaymentCreationTime(timerSample, result);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {}: {}", request.getOrderId(), e.getMessage());

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—à–∏–±–∫—É
            PaymentStatus oldStatus = payment.getStatus();
            payment.setStatus(PaymentStatus.FAILED);
            payment.setErrorMessage(e.getMessage());
            payment = paymentRepository.save(payment);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            paymentMetricsService.recordPaymentStatusChange(payment, oldStatus);
            paymentAlertService.onPaymentStatusChanged(payment, oldStatus);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
            paymentMetricsService.recordPaymentCreationTime(timerSample, null);

            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
     */
    @Transactional(readOnly = true)
    public PaymentResponse getPayment(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        return mapToPaymentResponse(payment);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ÆKassa ID
     */
    @Transactional(readOnly = true)
    public PaymentResponse getPaymentByYooKassaId(String yookassaPaymentId) {
        Payment payment = paymentRepository.findByYookassaPaymentId(yookassaPaymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + yookassaPaymentId));

        return mapToPaymentResponse(payment);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
     */
    @Transactional(readOnly = true)
    public List<PaymentResponse> getPaymentsForOrder(Long orderId) {
        List<Payment> payments = paymentRepository.findByOrderIdOrderByCreatedAtDesc(orderId);
        return payments.stream()
                .map(this::mapToPaymentResponse)
                .toList();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ÆKassa
     */
    @Transactional
    public boolean processWebhookNotification(JsonNode notification) {
        try {
            log.info("üîî –ü–æ–ª—É—á–µ–Ω–æ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {}", notification);

            String eventType = notification.path("event").asText();
            JsonNode paymentObject = notification.path("object");
            String yookassaPaymentId = paymentObject.path("id").asText();

            // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î
            Optional<Payment> paymentOpt = paymentRepository.findByYookassaPaymentId(yookassaPaymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {}", yookassaPaymentId);
                return false;
            }

            Payment payment = paymentOpt.get();
            PaymentStatus oldStatus = payment.getStatus();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            updatePaymentFromYooKassaResponse(payment, paymentObject);
            payment = paymentRepository.save(payment);

            log.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {} –∏–∑–º–µ–Ω–µ–Ω: {} ‚Üí {}",
                    payment.getId(), oldStatus, payment.getStatus());

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (oldStatus != payment.getStatus()) {
                paymentMetricsService.recordPaymentStatusChange(payment, oldStatus);
                paymentAlertService.onPaymentStatusChanged(payment, oldStatus);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            if (payment.getStatus() == PaymentStatus.SUCCEEDED && oldStatus != PaymentStatus.SUCCEEDED) {
                updateOrderStatusAfterPayment(payment.getOrder());
            }

            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    @Transactional
    public PaymentResponse cancelPayment(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        if (!payment.isCancellable()) {
            throw new IllegalStateException("–ü–ª–∞—Ç–µ–∂ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: " + payment.getStatus());
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –≤ –ÆKassa
            String cancelUrl = "/payments/" + payment.getYookassaPaymentId() + "/cancel";
            Map<String, Object> cancelRequest = Map.of("reason", "user_cancelled");

            JsonNode response = yooKassaWebClient
                    .post()
                    .uri(cancelUrl)
                    .header("Idempotence-Key", generateIdempotenceKey())
                    .bodyValue(cancelRequest)
                    .retrieve()
                    .bodyToMono(JsonNode.class)
                    .timeout(yooKassaConfig.getTimeout())
                    .retryWhen(Retry.backoff(yooKassaConfig.getMaxRetryAttempts(), Duration.ofSeconds(1)))
                    .block();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            updatePaymentFromYooKassaResponse(payment, response);
            payment = paymentRepository.save(payment);

            log.info("üö´ –ü–ª–∞—Ç–µ–∂ {} –æ—Ç–º–µ–Ω–µ–Ω", payment.getId());

            return mapToPaymentResponse(payment);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –°–ë–ü
     */
    public List<SbpBankInfo> getSbpBanks() {
        return Arrays.asList(
                new SbpBankInfo("sberbank", "–°–±–µ—Ä–±–∞–Ω–∫", "https://static.yoomoney.ru/files-front/banks-logos/sber.svg"),
                new SbpBankInfo("tinkoff", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/tcs.svg"),
                new SbpBankInfo("vtb", "–í–¢–ë", "https://static.yoomoney.ru/files-front/banks-logos/vtb.svg"),
                new SbpBankInfo("alfabank", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/alfabank.svg"),
                new SbpBankInfo("raiffeisen", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/raiffeisen.svg"),
                new SbpBankInfo("gazprombank", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/gazprom.svg"),
                new SbpBankInfo("rosbank", "–†–æ—Å–±–∞–Ω–∫", "https://static.yoomoney.ru/files-front/banks-logos/rosbank.svg"),
                new SbpBankInfo("mkb", "–ú–ö–ë", "https://static.yoomoney.ru/files-front/banks-logos/mkb.svg"));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
     */
    @Transactional
    public PaymentResponse checkPaymentStatus(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        if (payment.getYookassaPaymentId() == null) {
            throw new IllegalStateException("–ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa");
        }

        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ÆKassa
            JsonNode response = yooKassaWebClient
                    .get()
                    .uri("/payments/" + payment.getYookassaPaymentId())
                    .retrieve()
                    .bodyToMono(JsonNode.class)
                    .timeout(yooKassaConfig.getTimeout())
                    .block();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            PaymentStatus oldStatus = payment.getStatus();
            updatePaymentFromYooKassaResponse(payment, response);
            payment = paymentRepository.save(payment);

            if (oldStatus != payment.getStatus()) {
                log.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {} –æ–±–Ω–æ–≤–ª–µ–Ω: {} ‚Üí {}",
                        payment.getId(), oldStatus, payment.getStatus());

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                if (payment.getStatus() == PaymentStatus.SUCCEEDED && oldStatus != PaymentStatus.SUCCEEDED) {
                    updateOrderStatusAfterPayment(payment.getOrder());
                }
            }

            return mapToPaymentResponse(payment);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private void validateOrderForPayment(Order order) {
        if (order.getTotalAmount() == null || order.getTotalAmount().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ—â–µ –Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        boolean hasSuccessfulPayment = paymentRepository.existsSuccessfulPaymentForOrder(order.getId().longValue());
        if (hasSuccessfulPayment) {
            throw new IllegalStateException("–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω");
        }
    }

    private Map<String, Object> buildYooKassaPaymentRequest(Payment payment, CreatePaymentRequest request) {
        Map<String, Object> paymentRequest = new HashMap<>();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Map<String, Object> amount = Map.of(
                "value", payment.getAmount().toString(),
                "currency", payment.getCurrency());
        paymentRequest.put("amount", amount);

        // –û–ø–∏—Å–∞–Ω–∏–µ
        String description = request.getDescription() != null
                ? request.getDescription()
                : "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ" + payment.getOrder().getId() + " –≤ PizzaNat";
        paymentRequest.put("description", description);

        // –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        Map<String, Object> paymentMethod = new HashMap<>();
        paymentMethod.put("type", payment.getMethod().getYookassaMethod());

        // –î–ª—è –°–ë–ü –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (payment.getMethod() == PaymentMethod.SBP && payment.getBankId() != null) {
            paymentMethod.put("bank_id", payment.getBankId());
        }
        paymentRequest.put("payment_method", paymentMethod);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –°–ë–ü
        Map<String, Object> confirmation = new HashMap<>();
        confirmation.put("type", "redirect");
        confirmation.put("return_url", request.getReturnUrl() != null ? request.getReturnUrl()
                : "https://dimbopizza.ru/orders/" + payment.getOrder().getId());

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –°–ë–ü
        if (payment.getMethod() == PaymentMethod.SBP) {
            confirmation.put("enforce_payment_method", true);
        }
        paymentRequest.put("confirmation", confirmation);

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        Map<String, Object> metadata = Map.of(
                "order_id", payment.getOrder().getId().toString(),
                "payment_id", payment.getId().toString());
        paymentRequest.put("metadata", metadata);

        // –ó–∞—Ö–≤–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
        paymentRequest.put("capture", true);

        return paymentRequest;
    }

    private JsonNode sendPaymentRequest(Map<String, Object> request, String idempotenceKey) {
        return yooKassaWebClient
                .post()
                .uri("/payments")
                .header("Idempotence-Key", idempotenceKey)
                .bodyValue(request)
                .retrieve()
                .onStatus(HttpStatusCode::isError, response -> {
                    return response.bodyToMono(String.class)
                            .flatMap(errorBody -> {
                                log.error("‚ùå –û—à–∏–±–∫–∞ –ÆKassa API: {}", errorBody);
                                return Mono.error(new RuntimeException("–û—à–∏–±–∫–∞ –ÆKassa API: " + errorBody));
                            });
                })
                .bodyToMono(JsonNode.class)
                .timeout(yooKassaConfig.getTimeout())
                .retryWhen(Retry.backoff(yooKassaConfig.getMaxRetryAttempts(), Duration.ofSeconds(1)))
                .block();
    }

    private void updatePaymentFromYooKassaResponse(Payment payment, JsonNode response) {
        try {
            // ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            if (response.has("id")) {
                payment.setYookassaPaymentId(response.get("id").asText());
            }

            // –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (response.has("status")) {
                String yookassaStatus = response.get("status").asText();
                PaymentStatus status = PaymentStatus.fromYookassaStatus(yookassaStatus);
                payment.setStatus(status);
            }

            // URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if (response.has("confirmation") && response.get("confirmation").has("confirmation_url")) {
                payment.setConfirmationUrl(response.get("confirmation").get("confirmation_url").asText());
            }

            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if (response.has("metadata")) {
                try {
                    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JsonNode –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSONB –ø–æ–ª–µ
                    payment.setMetadata(objectMapper.writeValueAsString(response.get("metadata")));
                } catch (Exception e) {
                    log.warn("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
                    payment.setMetadata(response.get("metadata").toString());
                }
            }

            // URL —á–µ–∫–∞
            if (response.has("receipt_registration") && response.get("receipt_registration").has("status")) {
                String receiptStatus = response.get("receipt_registration").get("status").asText();
                if ("succeeded".equals(receiptStatus) && response.get("receipt_registration").has("receipt_url")) {
                    payment.setReceiptUrl(response.get("receipt_registration").get("receipt_url").asText());
                }
            }

            // –û—à–∏–±–∫–∞
            if (response.has("error")) {
                JsonNode error = response.get("error");
                String errorMessage = error.has("description") ? error.get("description").asText()
                        : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                payment.setErrorMessage(errorMessage);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ÆKassa: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ÆKassa", e);
        }
    }

    private void updateOrderStatusAfterPayment(Order order) {
        try {
            log.info("üí∞ –ó–∞–∫–∞–∑ {} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É", order.getId());

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
            // –ü–æ—Å–∫–æ–ª—å–∫—É –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, AdminBotService.hasActivePendingPayments() –≤–µ—Ä–Ω–µ—Ç false
            // –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç
            try {
                eventPublisher.publishEvent(new NewOrderEvent(this, order));
                log.info("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ #{} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", order.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}: {}", order.getId(), e.getMessage(), e);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            }

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "PAID" –∏–ª–∏ "IN_PROGRESS" –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {}: {}", order.getId(), e.getMessage());
        }
    }

    private PaymentResponse mapToPaymentResponse(Payment payment) {
        PaymentResponse response = new PaymentResponse();
        response.setId(payment.getId());
        response.setYookassaPaymentId(payment.getYookassaPaymentId());
        response.setOrderId(payment.getOrder().getId().longValue());
        response.setStatus(payment.getStatus());
        response.setMethod(payment.getMethod());
        response.setAmount(payment.getAmount());
        response.setCurrency(payment.getCurrency());
        response.setBankId(payment.getBankId());
        response.setConfirmationUrl(payment.getConfirmationUrl());
        response.setErrorMessage(payment.getErrorMessage());
        response.setReceiptUrl(payment.getReceiptUrl());
        response.setCreatedAt(payment.getCreatedAt());
        response.setPaidAt(payment.getPaidAt());
        return response;
    }

    private String generateIdempotenceKey() {
        return "pizzanat_" + UUID.randomUUID().toString().replace("-", "");
    }
}