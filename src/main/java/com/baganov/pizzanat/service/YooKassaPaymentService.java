/**
 * @file: YooKassaPaymentService.java
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –ÆKassa API
 * @dependencies: YooKassaConfig, PaymentRepository, OrderRepository, WebClient
 * @created: 2025-01-26
 */
package com.baganov.pizzanat.service;

import com.baganov.pizzanat.config.YooKassaConfig;
import com.baganov.pizzanat.entity.*;
import com.baganov.pizzanat.event.NewOrderEvent;
import com.baganov.pizzanat.event.PaymentAlertEvent;
import com.baganov.pizzanat.model.dto.payment.CreatePaymentRequest;
import com.baganov.pizzanat.model.dto.payment.PaymentResponse;
import com.baganov.pizzanat.model.dto.payment.SbpBankInfo;
import com.baganov.pizzanat.model.dto.payment.YooKassaReceiptDto;
import com.baganov.pizzanat.model.dto.payment.CustomerDto;
import com.baganov.pizzanat.model.dto.payment.ReceiptItemDto;
import com.baganov.pizzanat.model.dto.payment.AmountDto;
import com.baganov.pizzanat.repository.OrderRepository;
import com.baganov.pizzanat.repository.PaymentRepository;
import com.baganov.pizzanat.repository.OrderStatusRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Timer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.util.retry.Retry;

import java.math.BigDecimal;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –ÆKassa
 */
@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "yookassa.enabled", havingValue = "true")
public class YooKassaPaymentService {

    private final YooKassaConfig yooKassaConfig;
    private final WebClient yooKassaWebClient;
    private final PaymentRepository paymentRepository;
    private final OrderRepository orderRepository;
    private final OrderStatusRepository orderStatusRepository;
    private final ObjectMapper objectMapper;
    private final PaymentMetricsService paymentMetricsService;
    private final PaymentAlertService paymentAlertService;
    private final ApplicationEventPublisher eventPublisher;

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa API
     */
    @Transactional
    public PaymentResponse createPayment(CreatePaymentRequest request) {
        log.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {}", request.getOrderId());

        // –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        Timer.Sample timerSample = paymentMetricsService.startPaymentCreationTimer();

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        Order order = orderRepository.findById(request.getOrderId().intValue())
                .orElseThrow(() -> new IllegalArgumentException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + request.getOrderId()));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å
        validateOrderForPayment(order);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
        BigDecimal amount = request.hasCustomAmount() ? request.getAmount() : order.getTotalAmount();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        Payment payment = new Payment(order, request.getMethod(), amount);
        payment.setBankId(request.getBankId());
        payment.setIdempotenceKey(generateIdempotenceKey());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        payment = paymentRepository.save(payment);

        try {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            paymentMetricsService.recordPaymentCreated(payment);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –∫—Ä—É–ø–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            paymentAlertService.onPaymentCreated(payment);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa API
            Map<String, Object> yooKassaRequest = buildYooKassaPaymentRequest(payment, request);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa
            JsonNode response = sendPaymentRequest(yooKassaRequest, payment.getIdempotenceKey());

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            updatePaymentFromYooKassaResponse(payment, response);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            payment = paymentRepository.save(payment);

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ –ÆKassa —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ID={}, YooKassa ID={}",
                    payment.getId(), payment.getYookassaPaymentId());

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            PaymentResponse result = mapToPaymentResponse(payment);
            return paymentMetricsService.recordPaymentCreationTime(timerSample, result);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {}: {}", request.getOrderId(), e.getMessage());

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—à–∏–±–∫—É
            PaymentStatus oldStatus = payment.getStatus();
            payment.setStatus(PaymentStatus.FAILED);
            payment.setErrorMessage(e.getMessage());
            payment = paymentRepository.save(payment);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            paymentMetricsService.recordPaymentStatusChange(payment, oldStatus);
            paymentAlertService.onPaymentStatusChanged(payment, oldStatus);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
            paymentMetricsService.recordPaymentCreationTime(timerSample, null);

            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
     */
    @Transactional(readOnly = true)
    public PaymentResponse getPayment(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        return mapToPaymentResponse(payment);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ÆKassa ID
     */
    @Transactional(readOnly = true)
    public PaymentResponse getPaymentByYooKassaId(String yookassaPaymentId) {
        Payment payment = paymentRepository.findByYookassaPaymentId(yookassaPaymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + yookassaPaymentId));

        return mapToPaymentResponse(payment);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
     */
    @Transactional(readOnly = true)
    public List<PaymentResponse> getPaymentsForOrder(Long orderId) {
        List<Payment> payments = paymentRepository.findByOrderIdOrderByCreatedAtDesc(orderId);
        return payments.stream()
                .map(this::mapToPaymentResponse)
                .toList();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ÆKassa
     */
    @Transactional
    public boolean processWebhookNotification(JsonNode notification) {
        try {
            log.info("üîî –ü–æ–ª—É—á–µ–Ω–æ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {}", notification);

            String eventType = notification.path("event").asText();
            JsonNode paymentObject = notification.path("object");
            String yookassaPaymentId = paymentObject.path("id").asText();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ÆKassa API
            if (!isValidPaymentEvent(eventType)) {
                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ÆKassa: {}", eventType);
                return false;
            }

            log.info("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ÆKassa: {} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", eventType, yookassaPaymentId);

            // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î
            Optional<Payment> paymentOpt = paymentRepository.findByYookassaPaymentId(yookassaPaymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {}", yookassaPaymentId);
                return false;
            }

            Payment payment = paymentOpt.get();
            PaymentStatus oldStatus = payment.getStatus();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            updatePaymentFromYooKassaResponse(payment, paymentObject);
            payment = paymentRepository.save(payment);

            log.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {} –∏–∑–º–µ–Ω–µ–Ω: {} ‚Üí {} (—Å–æ–±—ã—Ç–∏–µ: {})",
                    payment.getId(), oldStatus, payment.getStatus(), eventType);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (oldStatus != payment.getStatus()) {
                paymentMetricsService.recordPaymentStatusChange(payment, oldStatus);
                paymentAlertService.onPaymentStatusChanged(payment, oldStatus);
                
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ÆKassa
            switch (eventType) {
                case "payment.succeeded":
                    handlePaymentSucceededEvent(payment, oldStatus);
                    break;
                case "payment.canceled":
                    handlePaymentCanceledEvent(payment, oldStatus);
                    break;
                default:
                    log.debug("üîÑ –°–æ–±—ã—Ç–∏–µ {} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", eventType);
            }

            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ API –ÆKassa
     * https://yookassa.ru/developers/using-api/webhooks
     */
    private boolean isValidPaymentEvent(String eventType) {
        return "payment.succeeded".equals(eventType) || 
               "payment.canceled".equals(eventType);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.succeeded - –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
     */
    private void handlePaymentSucceededEvent(Payment payment, PaymentStatus oldStatus) {
        if (payment.getStatus() == PaymentStatus.SUCCEEDED && oldStatus != PaymentStatus.SUCCEEDED) {
            log.info("üí∞ –ü–ª–∞—Ç–µ–∂ {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", payment.getId());
            updateOrderStatusAfterPayment(payment.getOrder());
        } else {
            log.debug("üîÑ –ü–ª–∞—Ç–µ–∂ {} —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—É—Å–µ SUCCEEDED", payment.getId());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è payment.canceled - –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
     */
    private void handlePaymentCanceledEvent(Payment payment, PaymentStatus oldStatus) {
        if (payment.getStatus() == PaymentStatus.CANCELLED && oldStatus != PaymentStatus.CANCELLED) {
            log.info("‚ùå –ü–ª–∞—Ç–µ–∂ {} –æ—Ç–º–µ–Ω–µ–Ω - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", payment.getId());
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ AlertService
            try {
                String alertMessage = String.format("‚ùå *–ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù*\n\n" +
                        "üí≥ –ü–ª–∞—Ç–µ–∂ #%d\n" +
                        "üÜî –ó–∞–∫–∞–∑ #%d\n" +
                        "üí∞ –°—É–º–º–∞: %.2f ‚ÇΩ\n" +
                        "üïê –í—Ä–µ–º—è: %s\n\n" +
                        "–ó–∞–∫–∞–∑ –ù–ï –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.",
                        payment.getId(),
                        payment.getOrder().getId(),
                        payment.getAmount().doubleValue(),
                        LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PaymentAlertEvent
                PaymentAlertEvent alertEvent = new PaymentAlertEvent(this, alertMessage, PaymentAlertEvent.AlertType.CRITICAL_PAYMENT_FAILURE);
                eventPublisher.publishEvent(alertEvent);
                log.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", payment.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", payment.getId(), e.getMessage());
            }
        } else {
            log.debug("üîÑ –ü–ª–∞—Ç–µ–∂ {} —É–∂–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—É—Å–µ CANCELLED", payment.getId());
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    @Transactional
    public PaymentResponse cancelPayment(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        if (!payment.isCancellable()) {
            throw new IllegalStateException("–ü–ª–∞—Ç–µ–∂ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: " + payment.getStatus());
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –≤ –ÆKassa
            String cancelUrl = "/payments/" + payment.getYookassaPaymentId() + "/cancel";
            Map<String, Object> cancelRequest = Map.of("reason", "user_cancelled");

            JsonNode response = yooKassaWebClient
                    .post()
                    .uri(cancelUrl)
                    .header("Idempotence-Key", generateIdempotenceKey())
                    .bodyValue(cancelRequest)
                    .retrieve()
                    .bodyToMono(JsonNode.class)
                    .timeout(yooKassaConfig.getTimeout())
                    .retryWhen(Retry.backoff(yooKassaConfig.getMaxRetryAttempts(), Duration.ofSeconds(1)))
                    .block();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            updatePaymentFromYooKassaResponse(payment, response);
            payment = paymentRepository.save(payment);

            log.info("üö´ –ü–ª–∞—Ç–µ–∂ {} –æ—Ç–º–µ–Ω–µ–Ω", payment.getId());

            return mapToPaymentResponse(payment);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –°–ë–ü
     */
    public List<SbpBankInfo> getSbpBanks() {
        return Arrays.asList(
                new SbpBankInfo("sberbank", "–°–±–µ—Ä–±–∞–Ω–∫", "https://static.yoomoney.ru/files-front/banks-logos/sber.svg"),
                new SbpBankInfo("tinkoff", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/tcs.svg"),
                new SbpBankInfo("vtb", "–í–¢–ë", "https://static.yoomoney.ru/files-front/banks-logos/vtb.svg"),
                new SbpBankInfo("alfabank", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/alfabank.svg"),
                new SbpBankInfo("raiffeisen", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/raiffeisen.svg"),
                new SbpBankInfo("gazprombank", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
                        "https://static.yoomoney.ru/files-front/banks-logos/gazprom.svg"),
                new SbpBankInfo("rosbank", "–†–æ—Å–±–∞–Ω–∫", "https://static.yoomoney.ru/files-front/banks-logos/rosbank.svg"),
                new SbpBankInfo("mkb", "–ú–ö–ë", "https://static.yoomoney.ru/files-front/banks-logos/mkb.svg"));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
     */
    @Transactional
    public PaymentResponse checkPaymentStatus(Long paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + paymentId));

        if (payment.getYookassaPaymentId() == null) {
            throw new IllegalStateException("–ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa");
        }

        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ÆKassa
            JsonNode response = yooKassaWebClient
                    .get()
                    .uri("/payments/" + payment.getYookassaPaymentId())
                    .retrieve()
                    .bodyToMono(JsonNode.class)
                    .timeout(yooKassaConfig.getTimeout())
                    .block();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            PaymentStatus oldStatus = payment.getStatus();
            updatePaymentFromYooKassaResponse(payment, response);
            payment = paymentRepository.save(payment);

            if (oldStatus != payment.getStatus()) {
                log.info("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {} –æ–±–Ω–æ–≤–ª–µ–Ω: {} ‚Üí {}",
                        payment.getId(), oldStatus, payment.getStatus());

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                if (payment.getStatus() == PaymentStatus.SUCCEEDED && oldStatus != PaymentStatus.SUCCEEDED) {
                    updateOrderStatusAfterPayment(payment.getOrder());
                }
            }

            return mapToPaymentResponse(payment);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(), e);
        }
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private void validateOrderForPayment(Order order) {
        if (order.getTotalAmount() == null || order.getTotalAmount().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ—â–µ –Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        boolean hasSuccessfulPayment = paymentRepository.existsSuccessfulPaymentForOrder(order.getId().longValue());
        if (hasSuccessfulPayment) {
            throw new IllegalStateException("–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω");
        }
    }

    private Map<String, Object> buildYooKassaPaymentRequest(Payment payment, CreatePaymentRequest request) {
        Map<String, Object> paymentRequest = new HashMap<>();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Map<String, Object> amount = Map.of(
                "value", payment.getAmount().toString(),
                "currency", payment.getCurrency());
        paymentRequest.put("amount", amount);

        // –û–ø–∏—Å–∞–Ω–∏–µ
        String description = request.getDescription() != null
                ? request.getDescription()
                : "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ" + payment.getOrder().getId() + " –≤ PizzaNat";
        paymentRequest.put("description", description);

        // –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        Map<String, Object> paymentMethod = new HashMap<>();
        paymentMethod.put("type", payment.getMethod().getYookassaMethod());

        // –î–ª—è –°–ë–ü –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (payment.getMethod() == PaymentMethod.SBP && payment.getBankId() != null) {
            paymentMethod.put("bank_id", payment.getBankId());
        }
        paymentRequest.put("payment_method", paymentMethod);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –°–ë–ü
        Map<String, Object> confirmation = new HashMap<>();
        confirmation.put("type", "redirect");
        confirmation.put("return_url", request.getReturnUrl() != null ? request.getReturnUrl()
                : "https://dimbopizza.ru/orders/" + payment.getOrder().getId());

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –°–ë–ü
        if (payment.getMethod() == PaymentMethod.SBP) {
            confirmation.put("enforce_payment_method", true);
        }
        paymentRequest.put("confirmation", confirmation);

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        Map<String, Object> metadata = Map.of(
                "order_id", payment.getOrder().getId().toString(),
                "payment_id", payment.getId().toString());
        paymentRequest.put("metadata", metadata);

        // –ó–∞—Ö–≤–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
        paymentRequest.put("capture", true);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—ã (54-–§–ó)
        YooKassaReceiptDto receipt = buildReceipt(payment.getOrder());
        if (receipt != null) {
            try {
                Map<String, Object> receiptMap = objectMapper.convertValue(receipt, Map.class);
                paymentRequest.put("receipt", receiptMap);
                log.debug("üìÑ –ß–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞—Ç–µ–∂: {} –ø–æ–∑–∏—Ü–∏–π", receipt.getItems().size());
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞: {}", e.getMessage());
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —á–µ–∫–∞, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            }
        }

        return paymentRequest;
    }

    private JsonNode sendPaymentRequest(Map<String, Object> request, String idempotenceKey) {
        return yooKassaWebClient
                .post()
                .uri("/payments")
                .header("Idempotence-Key", idempotenceKey)
                .bodyValue(request)
                .retrieve()
                .onStatus(HttpStatusCode::isError, response -> {
                    return response.bodyToMono(String.class)
                            .flatMap(errorBody -> {
                                log.error("‚ùå –û—à–∏–±–∫–∞ –ÆKassa API: {}", errorBody);
                                return Mono.error(new RuntimeException("–û—à–∏–±–∫–∞ –ÆKassa API: " + errorBody));
                            });
                })
                .bodyToMono(JsonNode.class)
                .timeout(yooKassaConfig.getTimeout())
                .retryWhen(Retry.backoff(yooKassaConfig.getMaxRetryAttempts(), Duration.ofSeconds(1)))
                .block();
    }

    private void updatePaymentFromYooKassaResponse(Payment payment, JsonNode response) {
        try {
            log.debug("üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ {} –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –ÆKassa: {}", payment.getId(), response);

            // ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            if (response.has("id")) {
                payment.setYookassaPaymentId(response.get("id").asText());
            }

            // –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (response.has("status")) {
                String yookassaStatus = response.get("status").asText();
                PaymentStatus status = PaymentStatus.fromYookassaStatus(yookassaStatus);
                payment.setStatus(status);
                log.debug("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {}", status);
            }

            // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
            if (response.has("amount")) {
                JsonNode amountNode = response.get("amount");
                if (amountNode.has("value")) {
                    BigDecimal webhookAmount = new BigDecimal(amountNode.get("value").asText());
                    if (!payment.getAmount().equals(webhookAmount)) {
                        log.warn("‚ö†Ô∏è –°—É–º–º–∞ –≤ webhook ({}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É–º–º–æ–π –ø–ª–∞—Ç–µ–∂–∞ ({}) –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{}",
                                webhookAmount, payment.getAmount(), payment.getId());
                    }
                }
            }

            // –í—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (captured_at)
            if (response.has("captured_at") && !response.get("captured_at").isNull()) {
                try {
                    String capturedAtStr = response.get("captured_at").asText();
                    // –ÆKassa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ISO 8601 —Ñ–æ—Ä–º–∞—Ç: 2023-07-10T15:45:30.123Z
                    LocalDateTime capturedAt = LocalDateTime.parse(capturedAtStr.substring(0, 19));
                    payment.setPaidAt(capturedAt);
                    log.debug("üí∞ –í—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {}", capturedAt);
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ captured_at: {}", e.getMessage());
                }
            }

            // –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (payment_method)
            if (response.has("payment_method")) {
                JsonNode paymentMethodNode = response.get("payment_method");
                if (paymentMethodNode.has("type")) {
                    String paymentMethodType = paymentMethodNode.get("type").asText();
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    switch (paymentMethodType) {
                        case "bank_card":
                            if (paymentMethodNode.has("card")) {
                                JsonNode cardNode = paymentMethodNode.get("card");
                                String cardMask = String.format("%s****%s",
                                        cardNode.path("first6").asText(""),
                                        cardNode.path("last4").asText(""));
                                log.info("üí≥ –ü–ª–∞—Ç–µ–∂ –∫–∞—Ä—Ç–æ–π: {} ({})", cardMask, 
                                        cardNode.path("card_type").asText("unknown"));
                            }
                            break;
                        case "sbp":
                            log.info("üì± –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –°–ë–ü");
                            break;
                        default:
                            log.info("üí∞ –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑: {}", paymentMethodType);
                    }
                }
            }

            // URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if (response.has("confirmation") && response.get("confirmation").has("confirmation_url")) {
                payment.setConfirmationUrl(response.get("confirmation").get("confirmation_url").asText());
            }

            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if (response.has("metadata")) {
                try {
                    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º JsonNode –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSONB –ø–æ–ª–µ
                    payment.setMetadata(objectMapper.writeValueAsString(response.get("metadata")));
                    log.debug("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}", payment.getMetadata());
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
                    payment.setMetadata(response.get("metadata").toString());
                }
            }

            // –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ (receipt)
            if (response.has("receipt")) {
                JsonNode receiptNode = response.get("receipt");
                StringBuilder receiptInfo = new StringBuilder();
                
                if (receiptNode.has("registered") && receiptNode.get("registered").asBoolean()) {
                    if (receiptNode.has("fiscal_document_number")) {
                        receiptInfo.append("–§–î: ").append(receiptNode.get("fiscal_document_number").asText());
                    }
                    if (receiptNode.has("fiscal_storage_number")) {
                        receiptInfo.append(", –§–ù: ").append(receiptNode.get("fiscal_storage_number").asText());
                    }
                    
                    log.info("üßæ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}", receiptInfo.toString());
                }
            }

            // URL —á–µ–∫–∞ (legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
            if (response.has("receipt_registration") && response.get("receipt_registration").has("status")) {
                String receiptStatus = response.get("receipt_registration").get("status").asText();
                if ("succeeded".equals(receiptStatus) && response.get("receipt_registration").has("receipt_url")) {
                    payment.setReceiptUrl(response.get("receipt_registration").get("receipt_url").asText());
                    log.info("üßæ URL —á–µ–∫–∞: {}", payment.getReceiptUrl());
                }
            }

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ (refund)
            if (response.has("refunded_amount")) {
                JsonNode refundedAmountNode = response.get("refunded_amount");
                if (refundedAmountNode.has("value")) {
                    BigDecimal refundedAmount = new BigDecimal(refundedAmountNode.get("value").asText());
                    if (refundedAmount.compareTo(BigDecimal.ZERO) > 0) {
                        log.warn("üîÑ –ü–ª–∞—Ç–µ–∂ –∏–º–µ–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É: {} ‚ÇΩ", refundedAmount);
                    }
                }
            }

            // –û—à–∏–±–∫–∞
            if (response.has("error")) {
                JsonNode error = response.get("error");
                String errorCode = error.path("code").asText("unknown");
                String errorMessage = error.has("description") ? error.get("description").asText()
                        : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                payment.setErrorMessage(String.format("%s: %s", errorCode, errorMessage));
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ #{}: {} - {}", payment.getId(), errorCode, errorMessage);
            }

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ #{} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –ÆKassa (—Å—Ç–∞—Ç—É—Å: {})", 
                    payment.getId(), payment.getStatus());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ÆKassa –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{}: {}", payment.getId(), e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ÆKassa", e);
        }
    }

    private void updateOrderStatusAfterPayment(Order order) {
        try {
            log.info("üí∞ –ó–∞–∫–∞–∑ {} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É", order.getId());

            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å "CONFIRMED" –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            Optional<OrderStatus> paidStatusOpt = orderStatusRepository.findByName("CONFIRMED");
            if (paidStatusOpt.isPresent()) {
                order.setStatus(paidStatusOpt.get());
                log.info("üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ CONFIRMED", order.getId());
            } else {
                log.warn("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å CONFIRMED –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç–µ–∂–∞
            List<Payment> payments = paymentRepository.findByOrderIdOrderByCreatedAtDesc(order.getId().longValue());
            if (!payments.isEmpty()) {
                Payment successfulPayment = payments.stream()
                    .filter(p -> p.getStatus() == PaymentStatus.SUCCEEDED)
                    .findFirst()
                    .orElse(null);
                
                if (successfulPayment != null) {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø–ª–∞—Ç–µ–∂–∞ (—É–∂–µ PaymentMethod enum)
                    order.setPaymentMethod(successfulPayment.getMethod());
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∫–∞–∫ PAID
                    order.setPaymentStatus(OrderPaymentStatus.PAID);
                    log.info("üí≥ –ó–∞–∫–∞–∑ {} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {}, —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: PAID", order.getId(), successfulPayment.getMethod());
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            order.setUpdatedAt(LocalDateTime.now());
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            Order updatedOrder = orderRepository.save(order);
            log.info("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ CONFIRMED, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {}", 
                    order.getId(), updatedOrder.getPaymentMethod());

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
            // –ü–æ—Å–∫–æ–ª—å–∫—É –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, AdminBotService.hasActivePendingPayments() –≤–µ—Ä–Ω–µ—Ç false
            // –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç
            try {
                eventPublisher.publishEvent(new NewOrderEvent(this, updatedOrder));
                log.info("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ #{} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", updatedOrder.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}: {}", updatedOrder.getId(), e.getMessage(), e);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{}: {}", order.getId(), e.getMessage(), e);
            // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
        }
    }

    private PaymentResponse mapToPaymentResponse(Payment payment) {
        PaymentResponse response = new PaymentResponse();
        response.setId(payment.getId());
        response.setYookassaPaymentId(payment.getYookassaPaymentId());
        response.setOrderId(payment.getOrder().getId().longValue());
        response.setStatus(payment.getStatus());
        response.setMethod(payment.getMethod());
        response.setAmount(payment.getAmount());
        response.setCurrency(payment.getCurrency());
        response.setBankId(payment.getBankId());
        response.setConfirmationUrl(payment.getConfirmationUrl());
        response.setErrorMessage(payment.getErrorMessage());
        response.setReceiptUrl(payment.getReceiptUrl());
        response.setCreatedAt(payment.getCreatedAt());
        response.setPaidAt(payment.getPaidAt());
        return response;
    }

    private String generateIdempotenceKey() {
        return "pizzanat_" + UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–∫ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ 54-–§–ó
     */
    private YooKassaReceiptDto buildReceipt(Order order) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (order.getContactPhone() == null || order.getContactPhone().trim().isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞ #{}", order.getId());
                return null;
            }

            if (order.getContactName() == null || order.getContactName().trim().isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞ #{}", order.getId());
                return null;
            }

            if (order.getItems() == null || order.getItems().isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ #{} –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞", order.getId());
                return null;
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Æ–ö–∞—Å—Å—ã (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX)
            String normalizedPhone = normalizePhoneNumber(order.getContactPhone());
            if (normalizedPhone == null) {
                log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –¥–ª—è —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞ #{}", 
                        order.getContactPhone(), order.getId());
                return null;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            CustomerDto customer = CustomerDto.builder()
                    .fullName(order.getContactName())
                    .phone(normalizedPhone)
                    .build();

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            List<ReceiptItemDto> items = new ArrayList<>();
            for (OrderItem orderItem : order.getItems()) {
                ReceiptItemDto receiptItem = buildReceiptItem(orderItem);
                if (receiptItem != null) {
                    items.add(receiptItem);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ–∫–∞ (–µ—Å–ª–∏ –ø–ª–∞—Ç–Ω–∞—è)
            if (order.getDeliveryCost() != null && order.getDeliveryCost().compareTo(BigDecimal.ZERO) > 0) {
                ReceiptItemDto deliveryItem = buildDeliveryReceiptItem(order.getDeliveryCost());
                if (deliveryItem != null) {
                    items.add(deliveryItem);
                    log.debug("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —á–µ–∫: {} ‚ÇΩ", order.getDeliveryCost());
                }
            }

            if (items.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}", order.getId());
                return null;
            }

            YooKassaReceiptDto receipt = YooKassaReceiptDto.builder()
                    .customer(customer)
                    .items(items)
                    .build();

            log.debug("‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}: {} –ø–æ–∑–∏—Ü–∏–π, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {} ({})", 
                    order.getId(), items.size(), order.getContactName(), normalizedPhone);

            return receipt;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{}: {}", order.getId(), e.getMessage(), e);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —á–µ–∫–∞
     */
    private ReceiptItemDto buildDeliveryReceiptItem(BigDecimal deliveryCost) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Æ–ö–∞—Å—Å—ã
            AmountDto amount = AmountDto.builder()
                    .value(deliveryCost.toString())  // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                    .currency("RUB")
                    .build();

            return ReceiptItemDto.builder()
                    .description("–î–æ—Å—Ç–∞–≤–∫–∞")  // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
                    .quantity("1.00")         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1
                    .amount(amount)           // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                    .vatCode(1)               // –ù–î–° 0% –¥–ª—è —É—Å–ª—É–≥–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                    .paymentSubject("service") // –£—Å–ª—É–≥–∞ (–Ω–µ —Ç–æ–≤–∞—Ä)
                    .paymentMode("full_payment") // –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —á–µ–∫–µ: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —á–µ–∫–∞
     */
    private ReceiptItemDto buildReceiptItem(OrderItem orderItem) {
        try {
            Product product = orderItem.getProduct();
            if (product == null) {
                log.warn("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ ID: {}", orderItem.getId());
                return null;
            }

            // –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Æ–ö–∞—Å—Å—ã
            String description = product.getName();
            if (description != null && description.length() > 128) {
                description = description.substring(0, 125) + "...";
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, –∞ –Ω–µ –æ–±—â—É—é —Å—É–º–º—É
            // YooKassa –æ–∂–∏–¥–∞–µ—Ç amount = —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, –∞ –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∞–º (amount * quantity)
            AmountDto amount = AmountDto.builder()
                    .value(orderItem.getPrice().toString())  // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, –∞ –Ω–µ getSubtotal()
                    .currency("RUB")
                    .build();

            return ReceiptItemDto.builder()
                    .description(description != null ? description : "–¢–æ–≤–∞—Ä")
                    .quantity(orderItem.getQuantity().toString() + ".00")
                    .amount(amount)
                    .vatCode(1) // –ù–î–° 0% –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã
                    .paymentSubject("commodity") // —Ç–æ–≤–∞—Ä
                    .paymentMode("full_payment") // –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {}: {}", 
                    orderItem.getId(), e.getMessage());
            return null;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Æ–ö–∞—Å—Å—ã
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: +7XXXXXXXXXX, 8XXXXXXXXXX, 7XXXXXXXXXX
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: +7XXXXXXXXXX –∏–ª–∏ null –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
     */
    private String normalizePhoneNumber(String phone) {
        if (phone == null) {
            return null;
        }

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        String cleanPhone = phone.replaceAll("[^\\d+]", "");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if (cleanPhone.matches("\\+7\\d{10}")) {
            // –£–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX
            return cleanPhone;
        } else if (cleanPhone.matches("8\\d{10}")) {
            // –§–æ—Ä–º–∞—Ç: 8XXXXXXXXXX -> +7XXXXXXXXXX
            return "+7" + cleanPhone.substring(1);
        } else if (cleanPhone.matches("7\\d{10}")) {
            // –§–æ—Ä–º–∞—Ç: 7XXXXXXXXXX -> +7XXXXXXXXXX
            return "+" + cleanPhone;
        } else if (cleanPhone.matches("\\d{10}")) {
            // –§–æ—Ä–º–∞—Ç: XXXXXXXXXX -> +7XXXXXXXXXX
            return "+7" + cleanPhone;
        }

        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return null;
    }
}