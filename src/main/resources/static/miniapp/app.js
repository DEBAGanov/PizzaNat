/**
 * PizzaNat Mini App Main Application
 * Telegram WebApp integration and UI management
 */

class PizzaNatMiniApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.api = window.PizzaAPI;
        this.cart = { items: [], totalAmount: 0 };
        this.currentCategory = null;
        this.categories = [];
        this.products = [];
        
        // Initialize app
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üöÄ Initializing PizzaNat Mini App...');
        
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            this.setupTelegramWebApp();
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await this.authenticate();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            this.setupUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.showApp();
            
            console.log('‚úÖ App initialized successfully');
            
        } catch (error) {
            console.error('‚ùå App initialization failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
     */
    setupTelegramWebApp() {
        if (!this.tg) {
            console.warn('‚ö†Ô∏è Telegram WebApp API not available');
            return;
        }

        console.log('üì± Setting up Telegram WebApp...');

        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.tg.expand();
        
        // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–≤–∞–π–ø—É
        this.tg.enableClosingConfirmation();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.applyTelegramTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        this.setupMainButton();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º back button
        this.setupBackButton();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.tg.onEvent('themeChanged', () => this.applyTelegramTheme());
        this.tg.onEvent('viewportChanged', () => this.handleViewportChange());
        this.tg.onEvent('contactRequested', (data) => this.handleContactReceived(data));
        
        console.log('‚úÖ Telegram WebApp configured');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     */
    applyTelegramTheme() {
        if (!this.tg) return;

        const themeParams = this.tg.themeParams;
        const root = document.documentElement;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (themeParams.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', themeParams.bg_color);
        }
        if (themeParams.text_color) {
            root.style.setProperty('--tg-theme-text-color', themeParams.text_color);
        }
        if (themeParams.button_color) {
            root.style.setProperty('--tg-theme-button-color', themeParams.button_color);
        }
        if (themeParams.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color);
        }

        console.log('üé® Theme applied:', themeParams);
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async authenticate() {
        if (!this.tg?.initData) {
            console.warn('‚ö†Ô∏è No Telegram initData available, using guest mode');
            return;
        }

        try {
            console.log('üîê Authenticating user...');
            
            const authResult = await this.api.authenticateWebApp(this.tg.initData);
            
            if (authResult && authResult.token) {
                console.log('‚úÖ User authenticated:', authResult.firstName, authResult.lastName);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                if (this.tg.HapticFeedback) {
                    this.tg.HapticFeedback.notificationOccurred('success');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Authentication failed:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ –≥–æ—Å—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        console.log('üìä Loading initial data...');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ—Ä–∑–∏–Ω—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [categories, cart] = await Promise.all([
                this.api.getCategories(),
                this.api.getCart().catch(() => ({ items: [], totalAmount: 0 }))
            ]);

            this.categories = categories || [];
            this.cart = cart || { items: [], totalAmount: 0 };

            console.log('‚úÖ Initial data loaded:', {
                categories: this.categories.length,
                cartItems: this.cart.items?.length || 0
            });

        } catch (error) {
            console.error('‚ùå Failed to load initial data:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        console.log('üé® Setting up UI...');

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.renderCategories();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        this.updateCartUI();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        console.log('‚úÖ UI setup complete');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        document.getElementById('cart-button')?.addEventListener('click', () => {
            this.openCart();
        });

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ bottom bar
        document.getElementById('view-cart-button')?.addEventListener('click', () => {
            this.openCart();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        document.getElementById('cart-close')?.addEventListener('click', () => {
            this.closeCart();
        });

        // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        document.getElementById('checkout-button')?.addEventListener('click', () => {
            this.proceedToCheckout();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        document.getElementById('back-button')?.addEventListener('click', () => {
            this.goBack();
        });

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        document.getElementById('retry-button')?.addEventListener('click', () => {
            this.init();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('cart-overlay')?.addEventListener('click', (e) => {
            if (e.target.id === 'cart-overlay') {
                this.closeCart();
            }
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    renderCategories() {
        const grid = document.getElementById('categories-grid');
        if (!grid) return;

        grid.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
        const allCategoryCard = this.createCategoryCard({
            id: null,
            name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã',
            description: '–ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥',
            imageUrl: '/static/images/categories/pizza.png'
        });
        grid.appendChild(allCategoryCard);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.categories.forEach(category => {
            const card = this.createCategoryCard(category);
            grid.appendChild(card);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    createCategoryCard(category) {
        const card = document.createElement('div');
        card.className = 'category-card';
        card.onclick = () => this.selectCategory(category.id);

        card.innerHTML = `
            <img src="${category.imageUrl || '/static/images/categories/pizza.png'}" 
                 alt="${category.name}" 
                 class="category-icon"
                 onerror="this.src='/static/images/categories/pizza.png'">
            <div class="category-name">${category.name}</div>
            <div class="category-description">${category.description || ''}</div>
        `;

        return card;
    }

    /**
     * –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async selectCategory(categoryId) {
        console.log('üìÇ Selecting category:', categoryId);

        // Haptic feedback
        if (this.tg?.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('medium');
        }

        try {
            this.currentCategory = categoryId;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            this.showLoading();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            const products = await this.api.getProducts(categoryId);
            this.products = Array.isArray(products) ? products : (products.content || []);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            this.renderProducts();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const category = this.categories.find(c => c.id === categoryId);
            const title = category ? category.name : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã';
            document.getElementById('products-title').textContent = title;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            this.showProductsSection();
            
            this.hideLoading();
            
        } catch (error) {
            console.error('‚ùå Failed to load products:', error);
            this.hideLoading();
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    renderProducts() {
        const grid = document.getElementById('products-grid');
        if (!grid) return;

        grid.innerHTML = '';

        if (this.products.length === 0) {
            grid.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üçï</div>
                    <div class="empty-state-text">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                </div>
            `;
            return;
        }

        this.products.forEach(product => {
            const card = this.createProductCard(product);
            grid.appendChild(card);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    createProductCard(product) {
        const card = document.createElement('div');
        card.className = 'product-card';
        
        const cartItem = this.cart.items?.find(item => item.productId === product.id);
        const quantity = cartItem ? cartItem.quantity : 0;
        
        const discountBadge = product.isSpecialOffer && product.discountPercent ? 
            `<span class="discount-badge">-${product.discountPercent}%</span>` : '';
        
        const originalPrice = product.discountedPrice && product.discountedPrice < product.price ?
            `<span class="original-price">${this.api.formatPrice(product.price)}</span>` : '';
        
        const currentPrice = product.discountedPrice && product.discountedPrice < product.price ?
            product.discountedPrice : product.price;

        card.innerHTML = `
            <img src="${product.imageUrl || '/static/images/products/pizza_cheese.png'}" 
                 alt="${product.name}" 
                 class="product-image"
                 onerror="this.src='/static/images/products/pizza_cheese.png'">
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div class="product-description">${product.description || ''}</div>
                <div class="product-footer">
                    <div class="product-price">
                        <div class="current-price">${this.api.formatPrice(currentPrice)}</div>
                        ${originalPrice}
                        ${discountBadge}
                    </div>
                    <div class="product-actions">
                        ${quantity === 0 ? 
                            `<button class="add-button" onclick="app.addToCart(${product.id})">–î–æ–±–∞–≤–∏—Ç—å</button>` :
                            `<div class="quantity-controls">
                                <button class="quantity-btn" onclick="app.decreaseQuantity(${product.id})">‚àí</button>
                                <span class="quantity-value">${quantity}</span>
                                <button class="quantity-btn" onclick="app.increaseQuantity(${product.id})">+</button>
                            </div>`
                        }
                    </div>
                </div>
            </div>
        `;

        return card;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    async addToCart(productId, quantity = 1) {
        console.log('‚ûï Adding to cart:', productId);

        try {
            // Haptic feedback
            if (this.tg?.HapticFeedback) {
                this.tg.HapticFeedback.impactOccurred('light');
            }

            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            const productCard = event?.target?.closest('.product-card');
            if (productCard) {
                productCard.classList.add('adding');
                setTimeout(() => productCard.classList.remove('adding'), 600);
            }

            const result = await this.api.addToCart(productId, quantity);
            this.cart = result;
            
            this.updateCartUI();
            this.renderProducts(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            
        } catch (error) {
            console.error('‚ùå Failed to add to cart:', error);
            this.showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É');
        }
    }

    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     */
    async increaseQuantity(productId) {
        const cartItem = this.cart.items?.find(item => item.productId === productId);
        if (cartItem) {
            await this.updateCartItemQuantity(productId, cartItem.quantity + 1);
        }
    }

    /**
     * –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     */
    async decreaseQuantity(productId) {
        const cartItem = this.cart.items?.find(item => item.productId === productId);
        if (cartItem) {
            if (cartItem.quantity === 1) {
                await this.removeFromCart(productId);
            } else {
                await this.updateCartItemQuantity(productId, cartItem.quantity - 1);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     */
    async updateCartItemQuantity(productId, quantity) {
        try {
            const result = await this.api.updateCartItem(productId, quantity);
            this.cart = result;
            
            this.updateCartUI();
            this.renderProducts();
            
        } catch (error) {
            console.error('‚ùå Failed to update cart item:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     */
    async removeFromCart(productId) {
        try {
            const result = await this.api.removeFromCart(productId);
            this.cart = result;
            
            this.updateCartUI();
            this.renderProducts();
            
        } catch (error) {
            console.error('‚ùå Failed to remove from cart:', error);
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ—Ä–∑–∏–Ω—ã
     */
    updateCartUI() {
        const itemCount = this.cart.items?.length || 0;
        const totalAmount = this.cart.totalAmount || 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        document.getElementById('cart-count').textContent = itemCount;
        document.getElementById('bottom-count').textContent = itemCount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã
        document.getElementById('cart-total').textContent = this.api.formatPrice(totalAmount);
        document.getElementById('bottom-total').textContent = this.api.formatPrice(totalAmount);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º bottom bar
        const bottomBar = document.getElementById('bottom-bar');
        if (itemCount > 0) {
            bottomBar.style.display = 'block';
        } else {
            bottomBar.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        this.renderCartItems();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     */
    renderCartItems() {
        const content = document.getElementById('cart-content');
        if (!content) return;

        content.innerHTML = '';

        if (!this.cart.items || this.cart.items.length === 0) {
            content.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üõí</div>
                    <div class="empty-state-text">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>
                </div>
            `;
            return;
        }

        this.cart.items.forEach(item => {
            const itemElement = this.createCartItem(item);
            content.appendChild(itemElement);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
     */
    createCartItem(item) {
        const element = document.createElement('div');
        element.className = 'cart-item';

        element.innerHTML = `
            <img src="${item.productImageUrl || '/static/images/products/pizza_cheese.png'}" 
                 alt="${item.productName}" 
                 class="cart-item-image"
                 onerror="this.src='/static/images/products/pizza_cheese.png'">
            <div class="cart-item-info">
                <div class="cart-item-name">${item.productName}</div>
                <div class="cart-item-price">${this.api.formatPrice(item.totalPrice)}</div>
            </div>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="app.decreaseQuantity(${item.productId})">‚àí</button>
                <span class="quantity-value">${item.quantity}</span>
                <button class="quantity-btn" onclick="app.increaseQuantity(${item.productId})">+</button>
            </div>
        `;

        return element;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
     */
    openCart() {
        if (this.tg?.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('medium');
        }

        document.getElementById('cart-overlay').style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
     */
    closeCart() {
        document.getElementById('cart-overlay').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    /**
     * –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async proceedToCheckout() {
        if (!this.cart.items || this.cart.items.length === 0) {
            this.showError('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        if (this.tg?.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('heavy');
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (this.tg?.requestContact) {
            try {
                await this.requestUserContact();
                return; // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ handleContactReceived
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await this.createOrderWithData({
            deliveryAddress: '–≥. –í–æ–ª–∂—Å–∫, –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω',
            deliveryType: '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º',
            contactName: this.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            contactPhone: '+79999999999',
            comment: '–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram Mini App',
            paymentMethod: 'SBP'
        });
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async requestUserContact() {
        if (!this.tg?.requestContact) {
            throw new Error('requestContact –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }

        console.log('üìû –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
        
        return new Promise((resolve, reject) => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞'));
            }, 30000); // 30 —Å–µ–∫—É–Ω–¥

            // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handleContactReceived
            this.contactPromise = { resolve, reject, timeout };
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            this.tg.requestContact();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    handleContactReceived(data) {
        console.log('üìû –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', data);

        if (this.contactPromise) {
            clearTimeout(this.contactPromise.timeout);
            
            if (data.status === 'sent') {
                // –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã
                const contactData = {
                    deliveryAddress: '–≥. –í–æ–ª–∂—Å–∫, –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω',
                    deliveryType: '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º',
                    contactName: data.contact?.first_name || this.tg?.initDataUnsafe?.user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    contactPhone: data.contact?.phone_number || '+79999999999',
                    comment: '–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram Mini App',
                    paymentMethod: 'SBP'
                };

                this.createOrderWithData(contactData);
                this.contactPromise.resolve(contactData);
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                this.contactPromise.reject(new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
            }
            
            this.contactPromise = null;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    async createOrderWithData(orderData) {
        try {
            console.log('üìù –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏:', orderData);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            const order = await this.api.createOrder(orderData);
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            const payment = await this.api.createPayment(order.id, 'SBP');
            
            if (payment.success && payment.confirmationUrl) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
                this.tg?.openLink(payment.confirmationUrl);
                
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                this.cart = { items: [], totalAmount: 0 };
                this.updateCartUI();
                this.closeCart();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.tg?.showAlert('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...');
                
            } else {
                throw new Error(payment.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
            }
            
        } catch (error) {
            console.error('‚ùå Checkout failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + error.message);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
     */
    goBack() {
        if (this.currentCategory !== null) {
            this.currentCategory = null;
            this.hideProductsSection();
            
            if (this.tg?.HapticFeedback) {
                this.tg.HapticFeedback.impactOccurred('light');
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    showProductsSection() {
        document.getElementById('categories-section').style.display = 'none';
        document.getElementById('products-section').style.display = 'block';
        document.getElementById('back-button').style.display = 'block';
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º back button –≤ Telegram
        if (this.tg?.BackButton) {
            this.tg.BackButton.show();
            this.tg.BackButton.onClick(() => this.goBack());
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    hideProductsSection() {
        document.getElementById('categories-section').style.display = 'block';
        document.getElementById('products-section').style.display = 'none';
        document.getElementById('back-button').style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º back button –≤ Telegram
        if (this.tg?.BackButton) {
            this.tg.BackButton.hide();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
     */
    setupMainButton() {
        if (!this.tg?.MainButton) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.tg.MainButton.hide();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
     */
    setupBackButton() {
        if (!this.tg?.BackButton) return;

        this.tg.BackButton.hide();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
     */
    handleViewportChange() {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
        console.log('üì± Viewport changed:', this.tg?.viewportHeight);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    showApp() {
        document.getElementById('loading-screen').style.display = 'none';
        document.getElementById('app').style.display = 'block';
        document.getElementById('error-screen').style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    showLoading() {
        document.getElementById('loading-screen').style.display = 'flex';
        document.getElementById('app').style.display = 'none';
        document.getElementById('error-screen').style.display = 'none';
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    hideLoading() {
        document.getElementById('loading-screen').style.display = 'none';
        document.getElementById('app').style.display = 'block';
        document.getElementById('error-screen').style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        document.getElementById('loading-screen').style.display = 'none';
        document.getElementById('app').style.display = 'none';
        document.getElementById('error-screen').style.display = 'flex';
        document.getElementById('error-message').textContent = message;

        if (this.tg?.HapticFeedback) {
            this.tg.HapticFeedback.notificationOccurred('error');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
function initApp() {
    console.log('üçï PizzaNat Mini App starting...');
    app = new PizzaNatMiniApp();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.app = app;
