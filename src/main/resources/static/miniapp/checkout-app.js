/**
 * PizzaNat Mini App - Checkout Page
 * Order processing with delivery and payment selection
 */

class PizzaNatCheckoutApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.api = window.PizzaAPI;
        this.cart = { items: [], totalAmount: 0 };
        this.deliveryMethod = 'DELIVERY'; // Default to delivery
        this.paymentMethod = 'SBP'; // Default to SBP
        this.deliveryCost = 200; // Default delivery cost
        this.address = '';
        this.authToken = null;
        
        // Load cart from localStorage
        this.loadCartFromStorage();
        
        // Initialize app
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üöÄ Initializing PizzaNat Checkout...');
        
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            this.setupTelegramWebApp();
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await this.authenticate();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
            console.log('üõí Cart check: items =', this.cart.items.length);
            if (this.cart.items.length === 0) {
                console.warn('‚ö†Ô∏è Empty cart detected, adding test items for development');
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                this.cart.items = [
                    {
                        productId: 1,
                        name: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∏—Ü—Ü–∞',
                        price: 500,
                        quantity: 1,
                        imageUrl: 'https://via.placeholder.com/100'
                    }
                ];
                this.cart.totalAmount = 500;
                this.saveCartToStorage();
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            this.setupUI();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadUserData();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.showApp();
            
            console.log('‚úÖ Checkout initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Checkout initialization failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
     */
    setupTelegramWebApp() {
        if (!this.tg) {
            console.warn('‚ö†Ô∏è Telegram WebApp API not available');
            return;
        }

        console.log('üì± Setting up Telegram WebApp...');

        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.tg.expand();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.applyTelegramTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º back button
        if (this.tg.BackButton) {
            this.tg.BackButton.show();
            this.tg.BackButton.onClick(() => {
                window.history.back();
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.tg.onEvent('themeChanged', () => this.applyTelegramTheme());
        
        console.log('‚úÖ Telegram WebApp configured');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     */
    applyTelegramTheme() {
        if (!this.tg?.themeParams) return;

        const themeParams = this.tg.themeParams;
        const root = document.documentElement;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (themeParams.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', themeParams.bg_color);
        }
        if (themeParams.text_color) {
            root.style.setProperty('--tg-theme-text-color', themeParams.text_color);
        }
        if (themeParams.button_color) {
            root.style.setProperty('--tg-theme-button-color', themeParams.button_color);
        }
        if (themeParams.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color);
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async authenticate() {
        console.log('üîê Starting authentication...');
        console.log('üì± Telegram WebApp available:', !!this.tg);
        console.log('üìã Telegram initData available:', !!this.tg?.initData);
        
        if (!this.tg?.initData) {
            console.warn('‚ö†Ô∏è No Telegram initData available - using demo mode');
            return;
        }

        console.log('üîê Authenticating user with initData...');

        try {
            // –°–æ–∑–¥–∞–µ–º API –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.api) {
                this.api = new PizzaAPI();
                console.log('üì° API instance created with baseURL:', this.api.baseURL);
            }
            
            const response = await this.api.authenticateWebApp(this.tg.initData);
            console.log('üîê Auth response:', response);
            
            this.authToken = response.token;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ API
            this.api.setAuthToken(this.authToken);
            
            console.log('‚úÖ User authenticated successfully');
        } catch (error) {
            console.error('‚ùå Authentication failed:', error.message, error);
            console.log('üîß Continuing without auth...');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserData() {
        try {
            console.log('üìã Loading user data from auth...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            const userProfile = await this.api.getUserProfile();
            console.log('üë§ User profile:', userProfile);
            
            if (userProfile) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ firstName –∏ lastName
                const fullName = [userProfile.firstName, userProfile.lastName]
                    .filter(part => part && part.trim())
                    .join(' ') || userProfile.displayName || userProfile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                const phoneNumber = userProfile.phone || userProfile.phoneNumber || '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                const userNameEl = document.getElementById('user-name');
                if (userNameEl) {
                    userNameEl.textContent = fullName;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                const userPhoneEl = document.getElementById('user-phone');
                if (userPhoneEl) {
                    userPhoneEl.textContent = phoneNumber || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω';
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
                this.userData = {
                    name: fullName,
                    phone: phoneNumber
                };
                
                console.log('‚úÖ User data loaded successfully');
            } else {
                console.warn('‚ö†Ô∏è No user profile found');
                this.handleMissingUserData();
            }
            
        } catch (error) {
            console.error('‚ùå Failed to load user data:', error.message, error);
            console.log('üîß Trying to work without auth...');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const userNameEl = document.getElementById('user-name');
            const userPhoneEl = document.getElementById('user-phone');
            
            if (userNameEl) userNameEl.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram';
            if (userPhoneEl) userPhoneEl.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            
            this.userData = {
                name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram',
                phone: ''
            };
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (this.tg && this.tg.requestContact) {
                console.log('üì± Requesting phone contact from user...');
                this.tg.requestContact();
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    handleMissingUserData() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const userNameEl = document.getElementById('user-name');
        const userPhoneEl = document.getElementById('user-phone');
        
        if (userNameEl) {
            userNameEl.textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
            userNameEl.style.color = 'var(--tg-theme-destructive-text-color, #ff6b6b)';
        }
        
        if (userPhoneEl) {
            userPhoneEl.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
            userPhoneEl.style.color = 'var(--tg-theme-destructive-text-color, #ff6b6b)';
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (this.tg && this.tg.requestContact) {
            console.log('üì± Requesting phone contact from user...');
            this.tg.requestContact();
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
        const submitButton = document.getElementById('submit-order');
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupUI() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
        this.renderOrderItems();
        
        // Back button
        document.getElementById('back-button')?.addEventListener('click', () => {
            window.history.back();
        });

        // Delivery method change
        document.querySelectorAll('input[name="deliveryMethod"]').forEach(input => {
            input.addEventListener('change', (e) => {
                this.handleDeliveryMethodChange(e.target.value);
            });
        });

        // Payment method change
        document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
            input.addEventListener('change', (e) => {
                this.handlePaymentMethodChange(e.target.value);
            });
        });

        // Address input
        const addressInput = document.getElementById('address-input');
        if (addressInput) {
            addressInput.addEventListener('input', this.debounce((e) => {
                this.handleAddressInput(e.target.value);
            }, 300));
        }

        // Submit order
        document.getElementById('submit-order')?.addEventListener('click', () => {
            this.submitOrder();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        this.setupAddressInput();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupKeyboardHandling();

        // Initialize with default values
        this.handleDeliveryMethodChange(this.deliveryMethod);
        this.handlePaymentMethodChange(this.paymentMethod);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
     */
    renderOrderItems() {
        const container = document.getElementById('order-items');
        if (!container) return;

        container.innerHTML = '';

        this.cart.items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'order-item';
            itemElement.innerHTML = `
                <img src="${item.imageUrl || '/static/images/products/pizza_4_chees.png'}" 
                     alt="${item.name}" 
                     class="order-item-image">
                <div class="order-item-info">
                    <div class="order-item-title">${item.name}</div>
                    <div class="order-item-details">${item.quantity} —à—Ç. √ó ‚ÇΩ${item.price}</div>
                </div>
                <div class="order-item-price">‚ÇΩ${item.subtotal}</div>
            `;
            container.appendChild(itemElement);
        });

        this.updateTotals();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async handleDeliveryMethodChange(method) {
        this.deliveryMethod = method;
        const addressSection = document.getElementById('address-section');

        if (method === 'DELIVERY') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            addressSection.style.display = 'block';
            this.deliveryCost = 200; // Default delivery cost
            
            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –≤–≤–µ–¥–µ–Ω, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            const address = document.getElementById('address-input')?.value;
            if (address) {
                await this.calculateDeliveryCost(address);
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            addressSection.style.display = 'none';
            this.deliveryCost = 0;
        }

        this.updateDeliveryPrice();
        this.updateTotals();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    handlePaymentMethodChange(method) {
        this.paymentMethod = method;
        console.log('Payment method changed to:', method);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
     */
    async handleAddressInput(address) {
        this.address = address;

        if (address.length < 3) return;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
            await this.loadAddressSuggestions(address);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
            if (this.deliveryMethod === 'DELIVERY') {
                await this.calculateDeliveryCost(address);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    async loadAddressSuggestions(query) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ API
            const suggestions = await this.api.getAddressSuggestions(query);
            console.log('üìç Address suggestions received:', suggestions);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç API - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å
            let formattedSuggestions;
            if (Array.isArray(suggestions)) {
                formattedSuggestions = suggestions.map(suggestion => {
                    if (typeof suggestion === 'string') {
                        return suggestion;
                    } else if (suggestion.shortAddress) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞ –∏ –¥–æ–º)
                        return suggestion.shortAddress;
                    } else if (suggestion.address) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–í–æ–ª–∂—Å–∫, "
                        const fullAddress = suggestion.address;
                        const volzhskIndex = fullAddress.indexOf('–í–æ–ª–∂—Å–∫, ');
                        if (volzhskIndex !== -1) {
                            return fullAddress.substring(volzhskIndex + 8).trim();
                        }
                        return fullAddress;
                    } else if (suggestion.value) {
                        return suggestion.value;
                    } else {
                        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
                    }
                });
            } else {
                formattedSuggestions = [];
            }
            
            this.displayAddressSuggestions(formattedSuggestions);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤:', error);
            // Fallback to local suggestions
            const fallbackSuggestions = [
                `–≥. –í–æ–ª–∂—Å–∫, —É–ª. ${query}`,
                `–≥. –í–æ–ª–∂—Å–∫, –ø—Ä. ${query}`,
                `–≥. –í–æ–ª–∂—Å–∫, ${query}`
            ];
            this.displayAddressSuggestions(fallbackSuggestions);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    displayAddressSuggestions(suggestions) {
        const container = document.getElementById('address-suggestions');
        if (!container) return;

        container.innerHTML = '';

        if (suggestions.length === 0) {
            container.style.display = 'none';
            return;
        }

        suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.className = 'address-suggestion-item';
            item.textContent = suggestion;
            container.appendChild(item);
        });

        container.style.display = 'block';
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async calculateDeliveryCost(address) {
        try {
            console.log('Calculating delivery cost for:', address);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            const data = await this.api.calculateDeliveryCost(address, this.cart.totalAmount);
            console.log('üìä Delivery cost response:', data);
            
            if (data && typeof data.deliveryCost === 'number') {
                this.deliveryCost = data.deliveryCost;
                console.log('‚úÖ Delivery cost calculated:', this.deliveryCost, 'rubles');
            } else if (data && data.deliveryAvailable === false) {
                this.deliveryCost = 0; // –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                console.warn('‚ö†Ô∏è Delivery not available for this address');
            } else {
                this.deliveryCost = 200; // Default cost
                console.warn('‚ö†Ô∏è Using default delivery cost');
            }
        } catch (error) {
            console.warn('Error calculating delivery cost:', error);
            this.deliveryCost = 200; // Default cost
        }

        this.updateDeliveryPrice();
        this.updateTotals();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    updateDeliveryPrice() {
        const priceElement = document.getElementById('delivery-price');
        if (priceElement) {
            priceElement.textContent = this.deliveryCost > 0 ? `‚ÇΩ${this.deliveryCost}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º
     */
    updateTotals() {
        const itemsTotal = this.cart.totalAmount;
        const totalAmount = itemsTotal + this.deliveryCost;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        document.getElementById('items-total').textContent = `‚ÇΩ${itemsTotal}`;
        document.getElementById('delivery-cost').textContent = `‚ÇΩ${this.deliveryCost}`;
        document.getElementById('total-amount').textContent = `‚ÇΩ${totalAmount}`;
        document.getElementById('final-total').textContent = `‚ÇΩ${totalAmount}`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    setupAddressInput() {
        const addressInput = document.getElementById('address-input');
        const addressSuggestions = document.getElementById('address-suggestions');
        
        if (!addressInput || !addressSuggestions) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        addressInput.addEventListener('focus', () => {
            document.body.classList.add('keyboard-visible');
            addressSuggestions.classList.add('keyboard-visible');
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
            setTimeout(() => {
                addressInput.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
            }, 300);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        addressInput.addEventListener('blur', () => {
            setTimeout(() => {
                document.body.classList.remove('keyboard-visible');
                addressSuggestions.classList.remove('keyboard-visible');
            }, 150); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        addressSuggestions.addEventListener('click', async (e) => {
            const suggestionItem = e.target.closest('.address-suggestion-item');
            if (suggestionItem) {
                const selectedAddress = suggestionItem.textContent.trim();
                addressInput.value = selectedAddress;
                this.address = selectedAddress;
                addressSuggestions.innerHTML = '';
                addressInput.blur();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                console.log('üöó Calculating delivery cost for selected address:', selectedAddress);
                await this.calculateDeliveryCost(selectedAddress);
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    setupKeyboardHandling() {
        if (!this.tg) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã viewport (–ø–æ—è–≤–ª–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        let initialViewportHeight = window.visualViewport?.height || window.innerHeight;
        
        const handleViewportChange = () => {
            const currentHeight = window.visualViewport?.height || window.innerHeight;
            const heightDiff = initialViewportHeight - currentHeight;
            
            if (heightDiff > 150) { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
                document.body.classList.add('keyboard-visible');
            } else { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã–ª–∞—Å—å
                document.body.classList.remove('keyboard-visible');
            }
        };
        
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', handleViewportChange);
        } else {
            window.addEventListener('resize', handleViewportChange);
        }
    }
    
    /**
     * –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async submitOrder() {
        try {
            // Validation - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
            if (!this.cart.items || this.cart.items.length === 0) {
                this.showError('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
                return;
            }

            // Validation - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (!this.userData || !this.userData.name) {
                this.showError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å');
                return;
            }

            if (!this.userData.phone) {
                this.showError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å');
                return;
            }

            if (this.deliveryMethod === 'DELIVERY' && !this.address) {
                this.showError('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
                return;
            }

            // Disable submit button
            const submitButton = document.getElementById('submit-order');
            submitButton.disabled = true;
            submitButton.textContent = '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...';

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–∞—Ö)
            const orderData = {
                contactName: this.userData.name,
                contactPhone: this.userData.phone,
                comment: document.getElementById('order-comment')?.value.trim() || '',
                paymentMethod: this.paymentMethod,
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                items: this.cart.items.map(item => ({
                    productId: item.productId,
                    quantity: item.quantity,
                    price: item.price
                }))
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            if (this.deliveryMethod === 'DELIVERY') {
                orderData.deliveryAddress = this.address;
                orderData.deliveryType = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º';
                orderData.deliveryCost = this.deliveryCost;
            } else {
                orderData.deliveryLocationId = 1; // ID —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                orderData.deliveryType = '–°–∞–º–æ–≤—ã–≤–æ–∑';
                orderData.deliveryCost = 0;
            }

            console.log('Creating order with data:', orderData);

            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            console.log('üõí Adding items to backend cart...');
            await this.api.clearCart();
            
            for (const item of this.cart.items) {
                await this.api.addToCart(item.productId, item.quantity);
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–±–µ–∑ –ø–æ–ª—è items - –±—ç–∫–µ–Ω–¥ –≤–æ–∑—å–º–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
            const orderDataForAPI = {
                contactName: orderData.contactName,
                contactPhone: orderData.contactPhone,
                comment: orderData.comment,
                paymentMethod: orderData.paymentMethod
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            if (this.deliveryMethod === 'DELIVERY') {
                orderDataForAPI.deliveryAddress = this.address;
                orderDataForAPI.deliveryType = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º';
                orderDataForAPI.deliveryCost = this.deliveryCost;
            } else {
                orderDataForAPI.deliveryLocationId = 1;
                orderDataForAPI.deliveryType = '–°–∞–º–æ–≤—ã–≤–æ–∑';
                orderDataForAPI.deliveryCost = 0;
            }

            console.log('Creating order with backend cart data:', orderDataForAPI);
            const order = await this.api.createOrder(orderDataForAPI);
            
            if (this.paymentMethod === 'SBP') {
                // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –°–ë–ü
                const payment = await this.api.createPayment(order.id, 'SBP');
                
                if (payment.success && payment.confirmationUrl) {
                    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                    this.clearCart();
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
                    this.tg?.openLink(payment.confirmationUrl);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    this.tg?.showAlert('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...');
                    
                } else {
                    throw new Error(payment.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
                }
            } else {
                // –î–ª—è –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                this.clearCart();
                this.tg?.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–¥—É—Ç –≤ —á–∞—Ç.');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                setTimeout(() => {
                    window.location.href = 'menu.html';
                }, 3000);
            }
            
        } catch (error) {
            console.error('‚ùå Order submission failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + error.message);
            
            // Re-enable submit button
            const submitButton = document.getElementById('submit-order');
            submitButton.disabled = false;
            this.updateTotals(); // This will update the button text
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
     */
    clearCart() {
        this.cart = { items: [], totalAmount: 0 };
        localStorage.removeItem('pizzanat_cart');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
     */
    loadCartFromStorage() {
        try {
            const saved = localStorage.getItem('pizzanat_cart');
            if (saved) {
                this.cart = JSON.parse(saved);
            }
        } catch (error) {
            console.warn('Failed to load cart from localStorage:', error);
            this.cart = { items: [], totalAmount: 0 };
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    showApp() {
        document.getElementById('loading-screen').style.display = 'none';
        document.getElementById('app').style.display = 'block';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        if (this.tg?.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.PizzaNatCheckoutApp = PizzaNatCheckoutApp;
