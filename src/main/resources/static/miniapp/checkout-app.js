/**
 * PizzaNat Mini App - Checkout Page
 * Order processing with delivery and payment selection
 */

class PizzaNatCheckoutApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.api = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ init()
        this.cart = { items: [], totalAmount: 0 };
        this.deliveryMethod = 'DELIVERY'; // Default to delivery
        this.paymentMethod = 'SBP'; // Default to SBP
        this.deliveryCost = 200; // Default delivery cost
        this.address = '';
        this.authToken = null;
        this.pendingOrderSubmission = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        
        // Load cart from localStorage
        this.loadCartFromStorage();
        
        // Initialize app
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üöÄ Initializing PizzaNat Checkout...');
        
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM API
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM API:');
        console.log('  - window.Telegram –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram);
        console.log('  - window.Telegram.WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
        if (window.Telegram?.WebApp) {
            console.log('  - Telegram WebApp version:', window.Telegram.WebApp.version);
            console.log('  - Telegram WebApp platform:', window.Telegram.WebApp.platform);
            console.log('  - Telegram WebApp methods:', Object.keys(window.Telegram.WebApp).filter(key => typeof window.Telegram.WebApp[key] === 'function'));
        }
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            if (!this.api) {
                if (window.PizzaAPI) {
                    this.api = window.PizzaAPI;
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                    this.api = new PizzaAPI();
                }
                console.log('üì° API initialized:', this.api.baseURL);
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            this.setupTelegramWebApp();
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await this.authenticate();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
            console.log('üõí Cart check: items =', this.cart.items.length);
            if (this.cart.items.length === 0) {
                console.warn('‚ö†Ô∏è Empty cart detected, adding test items for development');
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                this.cart.items = [
                    {
                        productId: 1,
                        name: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∏—Ü—Ü–∞',
                        price: 500,
                        quantity: 1,
                        subtotal: 500,
                        imageUrl: '/static/images/products/pizza_4_chees.png'
                    }
                ];
                this.cart.totalAmount = 500;
                this.saveCartToStorage();
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            this.setupUI();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadUserData();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            await this.loadLastDeliveryAddress();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.showApp();
            
            console.log('‚úÖ Checkout initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Checkout initialization failed:', error);
            console.error('‚ùå Error stack:', error.stack);
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞: ${error.message}`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
     */
    setupTelegramWebApp() {
        if (!this.tg) {
            console.warn('‚ö†Ô∏è Telegram WebApp API not available');
            return;
        }

        console.log('üì± Setting up Telegram WebApp...');
        console.log('üîç Telegram API version:', this.tg.version);
        console.log('üîç Telegram platform:', this.tg.platform);
        console.log('üîç Telegram WebApp features:', {
            requestContact: typeof this.tg.requestContact,
            requestWriteAccess: typeof this.tg.requestWriteAccess,
            showAlert: typeof this.tg.showAlert,
            showPopup: typeof this.tg.showPopup,
            cloudStorage: typeof this.tg.CloudStorage,
            biometricManager: typeof this.tg.BiometricManager
        });

        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.tg.expand();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.applyTelegramTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º back button
        if (this.tg.BackButton) {
            this.tg.BackButton.show();
            this.tg.BackButton.onClick(() => {
                window.history.back();
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        this.tg.onEvent('themeChanged', () => this.applyTelegramTheme());
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (Bot API 6.9+)
        this.tg.onEvent('contactRequested', (data) => {
            console.log('üìû === –°–û–ë–´–¢–ò–ï contactRequested –ü–û–õ–£–ß–ï–ù–û ===');
            console.log('üìû –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', data);
            console.log('üìû –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof data);
            console.log('üìû JSON –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(data, null, 2));
            this.handleContactReceived(data);
        });
        
        // –°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –õ–° (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ)
        this.tg.onEvent('writeAccessRequested', (data) => {
            console.log('‚úçÔ∏è writeAccessRequested event received:', data);
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –í–°–ï–• —Å–æ–±—ã—Ç–∏–π
        const originalOnEvent = this.tg.onEvent;
        this.tg.onEvent = (eventType, handler) => {
            console.log('üîß Registering event handler for:', eventType);
            return originalOnEvent.call(this.tg, eventType, (data) => {
                console.log(`üéØ Event '${eventType}' fired with data:`, data);
                handler(data);
            });
        };
        
        // –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        this.tg.onEvent('contactRequested', (data) => {
            console.log('üìû contactRequested event received:', data);
            this.handleContactReceived(data);
        });
        
        console.log('‚úÖ Telegram WebApp configured');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
     */
    applyTelegramTheme() {
        if (!this.tg?.themeParams) return;

        const themeParams = this.tg.themeParams;
        const root = document.documentElement;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (themeParams.bg_color) {
            root.style.setProperty('--tg-theme-bg-color', themeParams.bg_color);
        }
        if (themeParams.text_color) {
            root.style.setProperty('--tg-theme-text-color', themeParams.text_color);
        }
        if (themeParams.button_color) {
            root.style.setProperty('--tg-theme-button-color', themeParams.button_color);
        }
        if (themeParams.button_text_color) {
            root.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color);
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async authenticate() {
        console.log('üîê Starting authentication...');
        console.log('üì± Telegram WebApp available:', !!this.tg);
        console.log('üìã Telegram initData available:', !!this.tg?.initData);
        
        if (!this.tg?.initData) {
            console.warn('‚ö†Ô∏è No Telegram initData available - using demo mode');
            return;
        }

            if (!this.api) {
            console.error('‚ùå API not initialized for authentication');
            return;
            }
            
        console.log('üîê Authenticating user with initData...');

        try {
            const response = await this.api.authenticateWebApp(this.tg.initData);
            console.log('üîê Auth response:', response);
            
            this.authToken = response.token;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ API
            this.api.setAuthToken(this.authToken);
            
            console.log('‚úÖ User authenticated successfully');
        } catch (error) {
            console.error('‚ùå Authentication failed:', error.message, error);
            console.log('üîß Continuing without auth...');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Telegram API
     */
    handleContactReceived(data) {
        console.log('üìû –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', data);
        console.log('üìû –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof data);
        console.log('üìû –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(data, null, 2));

        // –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Bot API 6.9+
        // —Å–æ–±—ã—Ç–∏–µ contactRequested –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        let contactData = null;
        let contactReceived = false;
        
        if (data) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            if (data.status === 'sent' || data.status === 'allowed') {
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
                contactReceived = true;
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                if (data.contact) {
                    contactData = data.contact;
                } else if (this.tg?.initDataUnsafe?.user) {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–∑ initData –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    const user = this.tg.initDataUnsafe.user;
                    contactData = {
                        first_name: user.first_name,
                        last_name: user.last_name,
                        phone_number: user.phone_number
                    };
                }
            } else if (data.status === 'cancelled') {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞');
                this.handleContactCancelled();
                return;
            } else {
                console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:', data.status);
            }
            
            // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞, –Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!contactReceived && (data.contact || (data.first_name && data.phone_number))) {
                console.log('üîÑ Fallback: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                contactData = data.contact || data;
                contactReceived = true;
            }
        }

        if (contactData && contactData.phone_number) {
            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:', contactData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const contactName = contactData.first_name || this.userData?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const contactPhone = contactData.phone_number || '';

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const currentName = this.userData?.name || contactName;

            this.userData = {
                name: currentName,
                phone: contactPhone
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const userNameEl = document.getElementById('user-name');
            const userPhoneEl = document.getElementById('user-phone');
            
            if (userNameEl && !userNameEl.textContent.includes('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')) {
                userNameEl.textContent = currentName;
                userNameEl.style.color = '';
            }
            
            if (userPhoneEl) {
                userPhoneEl.textContent = contactPhone;
                userPhoneEl.style.color = '';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            this.updateSubmitButtonState();

            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { name: currentName, phone: contactPhone });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if (this.tg?.showAlert) {
                this.tg.showAlert('–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.');
            }
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            if (this.pendingOrderSubmission) {
                console.log('üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º');
                this.pendingOrderSubmission = false;
                setTimeout(() => {
                this.submitOrder();
                }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            }
        } else {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª:', data);
            this.handleContactCancelled();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    handleContactCancelled() {
        console.log('üö´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        
        if (this.pendingOrderSubmission) {
            this.pendingOrderSubmission = false;
        }
        
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.tryAlternativeContactMethod();
        }, 2000);
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    tryAlternativeContactMethod() {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
        
        if (this.tg && this.tg.initDataUnsafe && this.tg.initDataUnsafe.user) {
            const user = this.tg.initDataUnsafe.user;
            console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData:', user);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ initData
            if (user.phone_number) {
                console.log('üì± –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ initData:', user.phone_number);
                this.handleContactReceived({
                    first_name: user.first_name,
                    last_name: user.last_name,
                    phone_number: user.phone_number
                });
                return;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        this.showManualPhoneInput();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (API 7.7)
     */
    showManualPhoneInput() {
        console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ (API 7.7)...');
        
        const userPhoneEl = document.getElementById('user-phone');
        if (userPhoneEl) {
            userPhoneEl.innerHTML = `
                <div style="margin-bottom: 10px;">
                    <button onclick="window.checkoutApp.requestContactAgain()" 
                            style="width: 100%; padding: 8px 16px; background: #007acc; color: white; border: none; border-radius: 4px; margin-bottom: 8px;">
                        üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –µ—â–µ —Ä–∞–∑
                    </button>
                </div>
                <div style="text-align: center; margin: 10px 0; color: #666;">–∏–ª–∏</div>
                <input type="tel" 
                       id="manual-phone-input" 
                       placeholder="+7 XXX XXX XX XX" 
                       style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box;"
                       maxlength="18">
                <button onclick="window.checkoutApp.submitManualPhone()" 
                        style="width: 100%; margin-top: 8px; padding: 8px 16px; background: #28a745; color: white; border: none; border-radius: 4px;">
                    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä
                </button>
            `;
        }
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–≤–µ—Ä—Å–∏—è API 7.7 - –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
     */
    requestContactAgain() {
        console.log('üì± === –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ó–ê–ü–†–û–°–ê –ö–û–ù–¢–ê–ö–¢–ê ===');
        console.log('üì± –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø:');
        console.log('  - this.tg –¥–æ—Å—Ç—É–ø–µ–Ω:', !!this.tg);
        console.log('  - this.tg.version:', this.tg?.version);
        console.log('  - this.tg.platform:', this.tg?.platform);
        console.log('  - typeof this.tg.requestContact:', typeof this.tg?.requestContact);
        console.log('  - window.Telegram –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram);
        console.log('  - window.Telegram.WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
        console.log('  - window.Telegram.WebApp.version:', window.Telegram?.WebApp?.version);
        console.log('  - typeof window.Telegram.WebApp.requestContact:', typeof window.Telegram?.WebApp?.requestContact);
        
        if (!this.tg) {
            console.error('‚ùå Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.showManualPhoneInput();
            return;
        }
        
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram WebApp:', Object.keys(this.tg).filter(key => typeof this.tg[key] === 'function'));
        
        if (typeof this.tg.requestContact === 'function') {
            console.log('‚úÖ requestContact –ù–ê–ô–î–ï–ù! –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            
            try {
                console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º this.tg.requestContact()...');
                this.tg.requestContact();
                console.log('üìû requestContact() –≤—ã–∑–≤–∞–Ω –ë–ï–ó –û–®–ò–ë–û–ö');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç
                setTimeout(() => {
                    console.log('‚è∞ –¢–ê–ô–ú–ê–£–¢: —Å–æ–±—ã—Ç–∏–µ contactRequested –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ 8 —Å–µ–∫—É–Ω–¥');
                    this.showManualPhoneInput();
                }, 8000);
                
            } catch (error) {
                console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ requestContact:');
                console.error('  - error.name:', error.name);
                console.error('  - error.message:', error.message);
                console.error('  - error.stack:', error.stack);
                this.showManualPhoneInput();
            }
        } else {
            console.warn('‚ö†Ô∏è requestContact –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –ù–ï –§–£–ù–ö–¶–ò–Ø');
            console.warn('  - typeof this.tg.requestContact:', typeof this.tg.requestContact);
            console.warn('  - this.tg.requestContact value:', this.tg.requestContact);
            this.showManualPhoneInput();
        }
        
        console.log('üì± === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ó–ê–ü–†–û–°–ê –ö–û–ù–¢–ê–ö–¢–ê ===');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    submitManualPhone() {
        const phoneInput = document.getElementById('manual-phone-input');
        if (phoneInput && phoneInput.value.trim()) {
            const phone = phoneInput.value.trim();
            console.log('üì± –†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞:', phone);
            
            this.userData = this.userData || {};
            this.userData.phone = phone;
            
            const userPhoneEl = document.getElementById('user-phone');
            if (userPhoneEl) {
                userPhoneEl.textContent = phone;
                userPhoneEl.style.color = '';
            }
            
            this.updateSubmitButtonState();
            
            if (this.tg?.showAlert) {
                this.tg.showAlert('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserData() {
        try {
            console.log('üìã Loading user data from auth...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            const userProfile = await this.api.getUserProfile();
            console.log('üë§ User profile:', userProfile);
            
            if (userProfile) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ firstName –∏ lastName
                const fullName = [userProfile.firstName, userProfile.lastName]
                    .filter(part => part && part.trim())
                    .join(' ') || userProfile.displayName || userProfile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                const phoneNumber = userProfile.phone || userProfile.phoneNumber || '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                const userNameEl = document.getElementById('user-name');
                if (userNameEl) {
                    userNameEl.textContent = fullName;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                const userPhoneEl = document.getElementById('user-phone');
                if (userPhoneEl) {
                    userPhoneEl.textContent = phoneNumber || '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
                    if (!phoneNumber) {
                        userPhoneEl.style.color = 'var(--tg-theme-destructive-text-color, #ff6b6b)';
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
                this.userData = {
                    name: fullName,
                    phone: phoneNumber
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                this.updateSubmitButtonState();
                
                console.log('‚úÖ User data loaded successfully', { hasPhone: !!phoneNumber });
                
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è
                if (!phoneNumber) {
                    console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è...');
                    
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º initData
                    setTimeout(() => {
                        this.tryAlternativeContactMethod();
                    }, 500);
                    
                    // –ü–æ—Ç–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç (API 7.7 - –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
                    if (this.tg && this.tg.requestContact) {
                        setTimeout(() => {
                            console.log('üì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ requestContact (API 7.7)...');
                            try {
                                this.tg.requestContact();
                            } catch (error) {
                                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
                            }
                        }, 1000);
                    } else {
                        console.log('‚ÑπÔ∏è requestContact –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    }
                }
            } else {
                console.warn('‚ö†Ô∏è No user profile found');
                this.handleMissingUserData();
            }
            
        } catch (error) {
            console.error('‚ùå Failed to load user data:', error.message, error);
            console.log('üîß Trying to work without auth...');
            this.handleMissingUserData();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
     */
    updateSubmitButtonState() {
        const submitButton = document.getElementById('submit-order');
        if (!submitButton) {
            console.warn('‚ö†Ô∏è Submit button not found in DOM');
            return;
        }

        const hasName = this.userData?.name && this.userData.name !== '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
        const hasPhone = this.userData?.phone && this.userData.phone.length > 0;
        const hasCart = this.cart?.items && this.cart.items.length > 0;
        const totalAmount = (this.cart?.totalAmount || 0) + (this.deliveryCost || 0);

        if (hasName && hasPhone && hasCart) {
            submitButton.disabled = false;
            submitButton.textContent = `–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ÇΩ${totalAmount}`;
            submitButton.style.opacity = '1';
        } else {
            submitButton.disabled = true;
            if (!hasPhone) {
                submitButton.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            } else if (!hasName) {
                submitButton.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
            } else if (!hasCart) {
                submitButton.textContent = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
            }
            submitButton.style.opacity = '0.6';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    handleMissingUserData() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const telegramUser = this.tg?.initDataUnsafe?.user;
        const fallbackName = telegramUser ? 
            [telegramUser.first_name, telegramUser.last_name].filter(Boolean).join(' ') : 
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userNameEl = document.getElementById('user-name');
        const userPhoneEl = document.getElementById('user-phone');
        
        if (userNameEl) {
            userNameEl.textContent = fallbackName;
        }
        
        if (userPhoneEl) {
            userPhoneEl.textContent = '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            userPhoneEl.style.color = 'var(--tg-theme-destructive-text-color, #ff6b6b)';
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        this.userData = {
            name: fallbackName,
            phone: ''
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        this.updateSubmitButtonState();
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        setTimeout(() => {
            this.tryAlternativeContactMethod();
        }, 500);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ requestContact (API 7.7)
        if (this.tg && this.tg.requestContact) {
            console.log('üì± Requesting phone contact from user (API 7.7)...');
            setTimeout(() => {
                try {
            this.tg.requestContact();
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
                }
            }, 1500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        } else {
            console.log('‚ÑπÔ∏è requestContact –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async loadLastDeliveryAddress() {
        try {
            console.log('üìç Loading last delivery address...');
            const lastDelivery = await this.api.getLastDeliveryAddress();
            
            if (lastDelivery && lastDelivery.address) {
                console.log('‚úÖ Last delivery address found:', lastDelivery);
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
                const addressInput = document.getElementById('address-input');
                if (addressInput) {
                    addressInput.value = lastDelivery.address;
                    this.address = lastDelivery.address;
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                this.deliveryCost = lastDelivery.deliveryCost;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.updateDeliveryPrice();
                this.updateTotals();
                
                console.log(`üìç Address prefilled: ${lastDelivery.address}, cost: ${lastDelivery.deliveryCost}‚ÇΩ`);
            } else {
                console.log('‚ÑπÔ∏è No previous delivery address found');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not load last delivery address:', error);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupUI() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
        this.renderOrderItems();
        
        // Back button
        document.getElementById('back-button')?.addEventListener('click', () => {
            window.history.back();
        });

        // Delivery method change
        document.querySelectorAll('input[name="deliveryMethod"]').forEach(input => {
            input.addEventListener('change', (e) => {
                this.handleDeliveryMethodChange(e.target.value);
            });
        });

        // Payment method change
        document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
            input.addEventListener('change', (e) => {
                this.handlePaymentMethodChange(e.target.value);
            });
        });

        // Address input
        const addressInput = document.getElementById('address-input');
        if (addressInput) {
            addressInput.addEventListener('input', this.debounce((e) => {
                this.handleAddressInput(e.target.value);
            }, 300));
        }

        // Submit order
        document.getElementById('submit-order')?.addEventListener('click', () => {
            this.submitOrder();
        });

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        document.getElementById('retry-button')?.addEventListener('click', () => {
            console.log('üîÑ Retry button clicked, reloading page...');
            window.location.reload();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        this.setupAddressInput();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupKeyboardHandling();

        // Initialize with default values
        this.handleDeliveryMethodChange(this.deliveryMethod);
        this.handlePaymentMethodChange(this.paymentMethod);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
     */
    renderOrderItems() {
        const container = document.getElementById('order-items');
        if (!container) {
            console.warn('‚ö†Ô∏è Order items container not found in DOM');
            return;
        }

        container.innerHTML = '';

        if (!this.cart.items || this.cart.items.length === 0) {
            container.innerHTML = '<div class="empty-cart">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
            return;
        }

        this.cart.items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'order-item';
            itemElement.innerHTML = `
                <img src="${item.imageUrl || '/static/images/products/pizza_4_chees.png'}" 
                     alt="${item.name || '–¢–æ–≤–∞—Ä'}" 
                     class="order-item-image">
                <div class="order-item-info">
                    <div class="order-item-title">${item.name || '–¢–æ–≤–∞—Ä'}</div>
                    <div class="order-item-details">${item.quantity || 1} —à—Ç. √ó ‚ÇΩ${item.price || 0}</div>
                </div>
                <div class="order-item-price">‚ÇΩ${item.subtotal || (item.price * item.quantity) || 0}</div>
            `;
            container.appendChild(itemElement);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤
        setTimeout(() => {
        this.updateTotals();
        }, 50);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async handleDeliveryMethodChange(method) {
        this.deliveryMethod = method;
        const addressSection = document.getElementById('address-section');

        if (method === 'DELIVERY') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            addressSection.style.display = 'block';
            this.deliveryCost = 200; // Default delivery cost
            
            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –≤–≤–µ–¥–µ–Ω, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            const address = document.getElementById('address-input')?.value;
            if (address) {
                await this.calculateDeliveryCost(address);
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            addressSection.style.display = 'none';
            this.deliveryCost = 0;
        }

        this.updateDeliveryPrice();
        this.updateTotals();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    handlePaymentMethodChange(method) {
        this.paymentMethod = method;
        console.log('Payment method changed to:', method);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
     */
    async handleAddressInput(address) {
        this.address = address;

        if (address.length < 3) return;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
            await this.loadAddressSuggestions(address);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
            if (this.deliveryMethod === 'DELIVERY') {
                await this.calculateDeliveryCost(address);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    async loadAddressSuggestions(query) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ API
            const suggestions = await this.api.getAddressSuggestions(query);
            console.log('üìç Address suggestions received:', suggestions);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç API - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å
            let formattedSuggestions;
            if (Array.isArray(suggestions)) {
                formattedSuggestions = suggestions.map(suggestion => {
                    if (typeof suggestion === 'string') {
                        return suggestion;
                    } else if (suggestion.shortAddress) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞ –∏ –¥–æ–º)
                        return suggestion.shortAddress;
                    } else if (suggestion.address) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–í–æ–ª–∂—Å–∫, "
                        const fullAddress = suggestion.address;
                        const volzhskIndex = fullAddress.indexOf('–í–æ–ª–∂—Å–∫, ');
                        if (volzhskIndex !== -1) {
                            return fullAddress.substring(volzhskIndex + 8).trim();
                        }
                        return fullAddress;
                    } else if (suggestion.value) {
                        return suggestion.value;
                    } else {
                        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
                    }
                });
            } else {
                formattedSuggestions = [];
            }
            
            this.displayAddressSuggestions(formattedSuggestions);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤:', error);
            // Fallback to local suggestions
            const fallbackSuggestions = [
                `–≥. –í–æ–ª–∂—Å–∫, —É–ª. ${query}`,
                `–≥. –í–æ–ª–∂—Å–∫, –ø—Ä. ${query}`,
                `–≥. –í–æ–ª–∂—Å–∫, ${query}`
            ];
            this.displayAddressSuggestions(fallbackSuggestions);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    displayAddressSuggestions(suggestions) {
        const container = document.getElementById('address-suggestions');
        if (!container) return;

        container.innerHTML = '';

        if (suggestions.length === 0) {
            container.style.display = 'none';
            return;
        }

        suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.className = 'address-suggestion-item';
            item.textContent = suggestion;
            container.appendChild(item);
        });

        container.style.display = 'block';
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async calculateDeliveryCost(address) {
        try {
            console.log('Calculating delivery cost for:', address);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            const data = await this.api.calculateDeliveryCost(address, this.cart.totalAmount);
            console.log('üìä Delivery cost response:', data);
            
            if (data && typeof data.deliveryCost === 'number') {
                this.deliveryCost = data.deliveryCost;
                console.log('‚úÖ Delivery cost calculated:', this.deliveryCost, 'rubles');
            } else if (data && data.deliveryAvailable === false) {
                this.deliveryCost = 0; // –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                console.warn('‚ö†Ô∏è Delivery not available for this address');
            } else {
                this.deliveryCost = 200; // Default cost
                console.warn('‚ö†Ô∏è Using default delivery cost');
            }
        } catch (error) {
            console.warn('Error calculating delivery cost:', error);
            this.deliveryCost = 200; // Default cost
        }

        this.updateDeliveryPrice();
        this.updateTotals();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    updateDeliveryPrice() {
        const priceElement = document.getElementById('delivery-price');
        if (priceElement) {
            priceElement.textContent = this.deliveryCost > 0 ? `‚ÇΩ${this.deliveryCost}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º
     */
    updateTotals() {
        const itemsTotal = this.cart.totalAmount || 0;
        const totalAmount = itemsTotal + (this.deliveryCost || 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const itemsTotalEl = document.getElementById('items-total');
        if (itemsTotalEl) {
            itemsTotalEl.textContent = `‚ÇΩ${itemsTotal}`;
        }
        
        const deliveryCostEl = document.getElementById('delivery-cost');
        if (deliveryCostEl) {
            deliveryCostEl.textContent = `‚ÇΩ${this.deliveryCost || 0}`;
        }
        
        const totalAmountEl = document.getElementById('total-amount');
        if (totalAmountEl) {
            totalAmountEl.textContent = `‚ÇΩ${totalAmount}`;
        }
        
        const finalTotalEl = document.getElementById('final-total');
        if (finalTotalEl) {
            finalTotalEl.textContent = `‚ÇΩ${totalAmount}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
        this.updateSubmitButtonState();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    setupAddressInput() {
        const addressInput = document.getElementById('address-input');
        const addressSuggestions = document.getElementById('address-suggestions');
        
        if (!addressInput || !addressSuggestions) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        addressInput.addEventListener('focus', () => {
            document.body.classList.add('keyboard-visible');
            addressSuggestions.classList.add('keyboard-visible');
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
            setTimeout(() => {
                addressInput.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
            }, 300);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        addressInput.addEventListener('blur', () => {
            setTimeout(() => {
                document.body.classList.remove('keyboard-visible');
                addressSuggestions.classList.remove('keyboard-visible');
            }, 150); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        addressSuggestions.addEventListener('click', async (e) => {
            const suggestionItem = e.target.closest('.address-suggestion-item');
            if (suggestionItem) {
                const selectedAddress = suggestionItem.textContent.trim();
                addressInput.value = selectedAddress;
                this.address = selectedAddress;
                addressSuggestions.innerHTML = '';
                addressInput.blur();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                console.log('üöó Calculating delivery cost for selected address:', selectedAddress);
                await this.calculateDeliveryCost(selectedAddress);
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    setupKeyboardHandling() {
        if (!this.tg) return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã viewport (–ø–æ—è–≤–ª–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        let initialViewportHeight = window.visualViewport?.height || window.innerHeight;
        
        const handleViewportChange = () => {
            const currentHeight = window.visualViewport?.height || window.innerHeight;
            const heightDiff = initialViewportHeight - currentHeight;
            
            if (heightDiff > 150) { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
                document.body.classList.add('keyboard-visible');
            } else { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã–ª–∞—Å—å
                document.body.classList.remove('keyboard-visible');
            }
        };
        
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', handleViewportChange);
        } else {
            window.addEventListener('resize', handleViewportChange);
        }
    }
    
    /**
     * –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async submitOrder() {
        try {
            // Validation - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
            if (!this.cart.items || this.cart.items.length === 0) {
                this.showError('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
                return;
            }

            // Validation - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (!this.userData || !this.userData.name) {
                this.showError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å');
                return;
            }

            if (!this.userData.phone) {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
                if (this.tg && this.tg.requestContact) {
                    console.log('üì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
                    this.pendingOrderSubmission = true; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (this.tg.showPopup) {
                        this.tg.showPopup({
                            title: '–ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                            message: '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                            buttons: [
                                { type: 'ok', text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' }
                            ]
                        }, () => {
                    this.tg.requestContact();
                        });
                    } else {
                        this.tg.requestContact();
                    }
                    return;
                } else {
                    this.showError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å');
                    return;
                }
            }

            if (this.deliveryMethod === 'DELIVERY' && !this.address) {
                this.showError('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
                return;
            }

            // Disable submit button
            const submitButton = document.getElementById('submit-order');
            submitButton.disabled = true;
            submitButton.textContent = '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...';

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–∞—Ö)
            const orderData = {
                contactName: this.userData.name,
                contactPhone: this.userData.phone,
                comment: document.getElementById('order-comment')?.value.trim() || '',
                paymentMethod: this.paymentMethod,
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                items: this.cart.items.map(item => ({
                    productId: item.productId,
                    quantity: item.quantity,
                    price: item.price
                }))
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            if (this.deliveryMethod === 'DELIVERY') {
                orderData.deliveryAddress = this.address;
                orderData.deliveryType = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º';
                orderData.deliveryCost = this.deliveryCost;
            } else {
                orderData.deliveryLocationId = 1; // ID —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                orderData.deliveryType = '–°–∞–º–æ–≤—ã–≤–æ–∑';
                orderData.deliveryCost = 0;
            }

            console.log('Creating order with data:', orderData);

            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            console.log('üõí Adding items to backend cart...');
            await this.api.clearCart();
            
            for (const item of this.cart.items) {
                await this.api.addToCart(item.productId, item.quantity);
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–±–µ–∑ –ø–æ–ª—è items - –±—ç–∫–µ–Ω–¥ –≤–æ–∑—å–º–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
            const orderDataForAPI = {
                contactName: orderData.contactName,
                contactPhone: orderData.contactPhone,
                comment: orderData.comment,
                paymentMethod: orderData.paymentMethod
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            if (this.deliveryMethod === 'DELIVERY') {
                orderDataForAPI.deliveryAddress = this.address;
                orderDataForAPI.deliveryType = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º';
                orderDataForAPI.deliveryCost = this.deliveryCost;
            } else {
                orderDataForAPI.deliveryLocationId = 1;
                orderDataForAPI.deliveryType = '–°–∞–º–æ–≤—ã–≤–æ–∑';
                orderDataForAPI.deliveryCost = 0;
            }

            console.log('Creating order with backend cart data:', orderDataForAPI);
            const order = await this.api.createOrder(orderDataForAPI);
            
            if (this.paymentMethod === 'SBP') {
                // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –°–ë–ü
                console.log('üí≥ Creating SBP payment for order:', order.id);
                const payment = await this.api.createPayment(order.id, 'SBP');
                
                console.log('üí≥ Payment response:', payment);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –Æ–ö–∞—Å—Å—ã
                if (payment && (payment.confirmation?.confirmation_url || payment.confirmationUrl)) {
                    const paymentUrl = payment.confirmation?.confirmation_url || payment.confirmationUrl;
                    
                    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                    this.clearCart();
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
                    this.tg?.openLink(paymentUrl);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    this.tg?.showAlert('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...');
                    
                } else {
                    console.error('‚ùå Invalid payment response structure:', payment);
                    throw new Error('–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
                }
            } else {
                // –î–ª—è –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
                this.clearCart();
                this.tg?.showAlert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–¥—É—Ç –≤ —á–∞—Ç.');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                setTimeout(() => {
                    window.location.href = 'menu.html';
                }, 3000);
            }
            
        } catch (error) {
            console.error('‚ùå Order submission failed:', error);
            console.error('‚ùå Error details:', {
                message: error.message,
                stack: error.stack,
                response: error.response
            });
            
            // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
            let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞';
            if (error.message.includes('payment')) {
                errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
            } else if (error.message.includes('order')) {
                errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞';
            }
            errorMessage += ': ' + error.message;
            
            this.showError(errorMessage);
            
            // Re-enable submit button
            const submitButton = document.getElementById('submit-order');
            submitButton.disabled = false;
            this.updateTotals(); // This will update the button text
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
     */
    clearCart() {
        this.cart = { items: [], totalAmount: 0 };
        localStorage.removeItem('pizzanat_cart');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
     */
    loadCartFromStorage() {
        try {
            const saved = localStorage.getItem('pizzanat_cart');
            if (saved) {
                this.cart = JSON.parse(saved);
            }
        } catch (error) {
            console.warn('Failed to load cart from localStorage:', error);
            this.cart = { items: [], totalAmount: 0 };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        setTimeout(() => {
            this.updateSubmitButtonState();
        }, 100);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
     */
    saveCartToStorage() {
        try {
            localStorage.setItem('pizzanat_cart', JSON.stringify(this.cart));
        } catch (error) {
            console.warn('Failed to save cart to localStorage:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    showApp() {
        const loadingScreen = document.getElementById('loading-screen');
        const appContainer = document.getElementById('app');
        
        if (loadingScreen) {
            loadingScreen.style.display = 'none';
        }
        
        if (appContainer) {
            appContainer.style.display = 'block';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const criticalElements = [
            'order-items',
            'submit-order',
            'user-name',
            'user-phone',
            'items-total',
            'delivery-cost',
            'total-amount',
            'final-total'
        ];
        
        const missingElements = criticalElements.filter(id => !document.getElementById(id));
        if (missingElements.length > 0) {
            console.warn('‚ö†Ô∏è Missing DOM elements:', missingElements);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setTimeout(() => {
            this.updateTotals();
        }, 100);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        if (this.tg?.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.PizzaNatCheckoutApp = PizzaNatCheckoutApp;
