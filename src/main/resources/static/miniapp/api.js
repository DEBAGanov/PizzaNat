/**
 * PizzaNat Mini App API Module
 * Handles all API communication with the backend
 */

class PizzaAPI {
    constructor() {
        // API base URL - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        this.baseURL = window.location.origin;
        this.apiPath = '/api/v1';
        
        // Auth token
        this.authToken = localStorage.getItem('pizzanat_token');
        
        // Request timeout
        this.timeout = 30000;
        
        console.log('üçï PizzaAPI initialized with base URL:', this.baseURL);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    setAuthToken(token) {
        this.authToken = token;
        localStorage.setItem('pizzanat_token', token);
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
     */
    async authenticateWebApp(initDataRaw) {
        console.log('üîê Authenticating via Telegram WebApp...');
        
        try {
            const response = await this.makeRequest('/telegram-webapp/auth', {
                method: 'POST',
                body: JSON.stringify({
                    initDataRaw: initDataRaw,
                    deviceId: this.getDeviceId(),
                    userAgent: navigator.userAgent,
                    platform: 'telegram-miniapp'
                })
            });

            if (response.token) {
                this.authToken = response.token;
                localStorage.setItem('pizzanat_token', this.authToken);
                console.log('‚úÖ Authentication successful, user ID:', response.userId);
                return response;
            } else {
                throw new Error('No token received');
            }
        } catch (error) {
            console.error('‚ùå Authentication failed:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async getCategories() {
        console.log('üìÇ Loading categories...');
        return this.makeRequest('/categories', { requiresAuth: false });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    async getProducts(categoryId = null, page = 0, size = 20) {
        console.log('üçï Loading products...', { categoryId, page, size });
        
        let url = `/products?page=${page}&size=${size}`;
        if (categoryId) {
            url = `/products/category/${categoryId}`;
        }
        
        const response = await this.makeRequest(url, { requiresAuth: false });
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º content (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
        return response.content || response || [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async getProductsByCategory(categoryId) {
        console.log('üçï Loading products by category:', categoryId);
        const response = await this.makeRequest(`/products/category/${categoryId}`, { requiresAuth: false });
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º content (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
        return response.content || response || [];
    }

    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    async searchProducts(query) {
        console.log('üîç Searching products:', query);
        return this.makeRequest(`/products/search?query=${encodeURIComponent(query)}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
     */
    async getCart() {
        console.log('üõí Loading cart...');
        return this.makeRequest('/cart');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    async addToCart(productId, quantity = 1, selectedOptions = {}) {
        console.log('‚ûï Adding to cart:', { productId, quantity, selectedOptions });
        
        return this.makeRequest('/cart/items', {
            method: 'POST',
            body: JSON.stringify({
                productId: productId,
                quantity: quantity,
                selectedOptions: selectedOptions
            })
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     */
    async updateCartItem(productId, quantity) {
        console.log('üîÑ Updating cart item:', { productId, quantity });
        
        return this.makeRequest(`/cart/items/${productId}`, {
            method: 'PUT',
            body: JSON.stringify({ quantity: quantity })
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     */
    async removeFromCart(productId) {
        console.log('üóëÔ∏è Removing from cart:', productId);
        
        return this.makeRequest(`/cart/items/${productId}`, {
            method: 'DELETE'
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
     */
    async clearCart() {
        console.log('üßπ Clearing cart...');
        
        return this.makeRequest('/cart', {
            method: 'DELETE'
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async createOrder(orderData) {
        console.log('üìù Creating order...', orderData);
        
        return this.makeRequest('/orders', {
            method: 'POST',
            body: JSON.stringify(orderData)
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserOrders() {
        console.log('üìã Loading user orders...');
        return this.makeRequest('/orders');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
     */
    async getOrder(orderId) {
        console.log('üìã Loading order:', orderId);
        return this.makeRequest(`/orders/${orderId}`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ YooKassa
     */
    async createPayment(orderId, method = 'SBP', bankId = null) {
        console.log('üí≥ Creating payment...', { orderId, method, bankId });
        
        return this.makeRequest('/payments/yookassa/create', {
            method: 'POST',
            body: JSON.stringify({
                orderId: orderId,
                method: method,
                bankId: bankId,
                returnUrl: `https://t.me/DIMBOpizzaBot/DIMBO`
            })
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserProfile() {
        console.log('üë§ Loading user profile...');
        return this.makeRequest('/user/profile');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤ –°–ë–ü
     */
    async getSbpBanks() {
        console.log('üè¶ Loading SBP banks...');
        return this.makeRequest('/payments/yookassa/sbp-banks');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    async getAddressSuggestions(query) {
        console.log('üîç Loading address suggestions for:', query);
        return this.makeRequest(`/address/suggestions?query=${encodeURIComponent(query)}`);
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async calculateDeliveryCost(address, orderAmount = 0) {
        console.log('üí∞ Calculating delivery cost for:', address, 'Order amount:', orderAmount);
        return this.makeRequest(`/delivery/estimate?address=${encodeURIComponent(address)}&orderAmount=${orderAmount}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    async getDeliveryLocations() {
        console.log('üìç Loading delivery locations...');
        return this.makeRequest('/delivery-locations');
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseURL}${this.apiPath}${endpoint}`;
        
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if (this.authToken) {
            defaultOptions.headers['Authorization'] = `Bearer ${this.authToken}`;
        }

        const finalOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers
            }
        };

        console.log(`üåê Making request: ${finalOptions.method} ${url}`);

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.timeout);

            const response = await fetch(url, {
                ...finalOptions,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorText = await response.text();
                console.error(`‚ùå Request failed: ${response.status} ${response.statusText}`, errorText);
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const data = await response.json();
                console.log(`‚úÖ Request successful: ${finalOptions.method} ${url}`, data);
                return data;
            } else {
                const text = await response.text();
                console.log(`‚úÖ Request successful (text): ${finalOptions.method} ${url}`, text);
                return text;
            }

        } catch (error) {
            if (error.name === 'AbortError') {
                console.error('‚è∞ Request timeout:', url);
                throw new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            }
            
            console.error('‚ùå Request error:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    getDeviceId() {
        let deviceId = localStorage.getItem('pizzanat_device_id');
        if (!deviceId) {
            deviceId = 'tgwa_' + Math.random().toString(36).substr(2, 9) + Date.now().toString(36);
            localStorage.setItem('pizzanat_device_id', deviceId);
        }
        return deviceId;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    clearAuth() {
        this.authToken = null;
        localStorage.removeItem('pizzanat_token');
        console.log('üîì Auth cleared');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthenticated() {
        return !!this.authToken;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }

    /**
     * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.PizzaAPI = new PizzaAPI();

console.log('üçï PizzaNat API module loaded');
