#!/bin/bash

# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - Stage 6
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ÆKassa - Stage 6${NC}"
echo -e "${CYAN}=============================================${NC}"
echo ""

# –ë–∞–∑–æ–≤—ã–π URL
BASE_URL="http://localhost:8080"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

test_header() {
    echo ""
    echo -e "${CYAN}üìã $1${NC}"
    echo -e "${CYAN}$(printf '=%.0s' {1..50})${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
test_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint..."
HEALTH_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/health_response.json "$BASE_URL/actuator/health" || echo "000")
if [[ "$HEALTH_RESPONSE" == "200" ]]; then
    success "Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    cat /tmp/health_response.json | jq . 2>/dev/null || cat /tmp/health_response.json
else
    error "Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP: $HEALTH_RESPONSE)"
fi

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa
test_header "–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa"

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa..."
if docker compose logs app | grep -i "yookassa.*webClient\|yookassa.*–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" > /dev/null; then
    success "–ÆKassa WebClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
else
    warning "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa"
fi

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
ENV_CHECK=$(docker compose exec -T app printenv | grep YOOKASSA_ || echo "")
if [[ -n "$ENV_CHECK" ]]; then
    success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ÆKassa –Ω–∞–π–¥–µ–Ω—ã:"
    echo "$ENV_CHECK" | while read line; do
        if [[ "$line" == *"SECRET_KEY"* ]]; then
            echo "  ${line%=*}=***–°–ö–†–´–¢–û***"
        else
            echo "  $line"
        fi
    done
else
    error "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
test_header "–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"

log "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ API..."

PAYMENT_REQUEST='{
    "amount": 1000,
    "orderId": "test-order-'$(date +%s)'",
    "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ÆKassa",
    "returnUrl": "pizzanat://payment/result",
    "paymentMethod": "bank_card"
}'

echo "üì§ –ó–∞–ø—Ä–æ—Å:"
echo "$PAYMENT_REQUEST" | jq .

PAYMENT_RESPONSE=$(curl -s -w "%{http_code}" \
    -H "Content-Type: application/json" \
    -d "$PAYMENT_REQUEST" \
    -o /tmp/payment_response.json \
    "$BASE_URL/api/v1/mobile/payments/create" || echo "000")

echo ""
echo "üì• –û—Ç–≤–µ—Ç (HTTP: $PAYMENT_RESPONSE):"

if [[ "$PAYMENT_RESPONSE" == "200" ]]; then
    success "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
    cat /tmp/payment_response.json | jq . 2>/dev/null || cat /tmp/payment_response.json

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
    PAYMENT_ID=$(cat /tmp/payment_response.json | jq -r '.paymentId // empty' 2>/dev/null)
    CONFIRMATION_URL=$(cat /tmp/payment_response.json | jq -r '.confirmationUrl // empty' 2>/dev/null)

    if [[ -n "$PAYMENT_ID" ]]; then
        success "ID –ø–ª–∞—Ç–µ–∂–∞: $PAYMENT_ID"
    fi

    if [[ -n "$CONFIRMATION_URL" ]]; then
        success "URL –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: $CONFIRMATION_URL"
    fi
else
    error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
    cat /tmp/payment_response.json 2>/dev/null || echo "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
fi

# –¢–µ—Å—Ç 3: –°–ë–ü –ø–ª–∞—Ç–µ–∂
test_header "–¢–µ—Å—Ç 3: –°–ë–ü –ø–ª–∞—Ç–µ–∂"

log "–°–æ–∑–¥–∞–Ω–∏–µ –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞..."

SBP_REQUEST='{
    "amount": 500,
    "orderId": "test-sbp-'$(date +%s)'",
    "description": "–¢–µ—Å—Ç–æ–≤—ã–π –°–ë–ü –ø–ª–∞—Ç–µ–∂",
    "returnUrl": "pizzanat://payment/result",
    "paymentMethod": "sbp"
}'

echo "üì§ –°–ë–ü –∑–∞–ø—Ä–æ—Å:"
echo "$SBP_REQUEST" | jq .

SBP_RESPONSE=$(curl -s -w "%{http_code}" \
    -H "Content-Type: application/json" \
    -d "$SBP_REQUEST" \
    -o /tmp/sbp_response.json \
    "$BASE_URL/api/v1/mobile/payments/create" || echo "000")

echo ""
echo "üì• –°–ë–ü –æ—Ç–≤–µ—Ç (HTTP: $SBP_RESPONSE):"

if [[ "$SBP_RESPONSE" == "200" ]]; then
    success "–°–ë–ü –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
    cat /tmp/sbp_response.json | jq . 2>/dev/null || cat /tmp/sbp_response.json
else
    error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞"
    cat /tmp/sbp_response.json 2>/dev/null || echo "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
fi

# –¢–µ—Å—Ç 4: –ú–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
test_header "–¢–µ—Å—Ç 4: –ú–µ—Ç—Ä–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"

log "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π..."

METRICS_RESPONSE=$(curl -s -w "%{http_code}" \
    -o /tmp/metrics_response.json \
    "$BASE_URL/api/v1/payments/metrics" || echo "000")

echo "üìä –ú–µ—Ç—Ä–∏–∫–∏ (HTTP: $METRICS_RESPONSE):"

if [[ "$METRICS_RESPONSE" == "200" ]]; then
    success "–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã"
    cat /tmp/metrics_response.json | jq . 2>/dev/null || cat /tmp/metrics_response.json
else
    warning "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã"
    cat /tmp/metrics_response.json 2>/dev/null || echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
fi

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
test_header "–¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"

log "–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –ÆKassa..."
ERROR_LOGS=$(docker compose logs app | grep -i "yookassa.*error\|yookassa.*exception" | tail -5)

if [[ -n "$ERROR_LOGS" ]]; then
    warning "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
    echo "$ERROR_LOGS"
else
    success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ÆKassa (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ)..."
YOOKASSA_LOGS=$(docker compose logs app | grep -i "yookassa" | tail -10)
if [[ -n "$YOOKASSA_LOGS" ]]; then
    echo "$YOOKASSA_LOGS"
else
    warning "–õ–æ–≥–∏ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –¢–µ—Å—Ç 6: Webhook endpoint
test_header "–¢–µ—Å—Ç 6: Webhook endpoint"

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint..."

WEBHOOK_TEST='{
    "type": "payment.succeeded",
    "event": "payment.succeeded",
    "object": {
        "id": "test-webhook-payment-id",
        "status": "succeeded",
        "amount": {
            "value": "100.00",
            "currency": "RUB"
        },
        "metadata": {
            "orderId": "test-webhook-order"
        }
    }
}'

WEBHOOK_RESPONSE=$(curl -s -w "%{http_code}" \
    -H "Content-Type: application/json" \
    -d "$WEBHOOK_TEST" \
    -o /tmp/webhook_response.json \
    "$BASE_URL/api/v1/payments/yookassa/webhook" || echo "000")

echo "üîî Webhook —Ç–µ—Å—Ç (HTTP: $WEBHOOK_RESPONSE):"

if [[ "$WEBHOOK_RESPONSE" == "200" ]]; then
    success "Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
    cat /tmp/webhook_response.json 2>/dev/null || echo "OK"
else
    warning "Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É"
    cat /tmp/webhook_response.json 2>/dev/null || echo "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
test_header "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"

echo ""
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ÆKassa Stage 6:"
echo ""
echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "  ‚Ä¢ Shop ID: 1116141"
echo "  ‚Ä¢ API URL: https://api.yookassa.ru/v3"
echo "  ‚Ä¢ Webhook URL: https://debaganov-pizzanat-0177.twc1.net/api/v1/payments/yookassa/webhook"
echo ""
echo "üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
echo "  ‚Ä¢ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: 5555555555554444"
echo "  ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞: 4111111111111112"
echo "  ‚Ä¢ 3DS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: 4000000000000002"
echo "  ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: 4000000000000051"
echo "  ‚Ä¢ CVV: 123, —Å—Ä–æ–∫: 12/30"
echo ""
echo "üöÄ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
echo "  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: POST $BASE_URL/api/v1/mobile/payments/create"
echo "  ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: GET $BASE_URL/api/v1/payments/metrics"
echo "  ‚Ä¢ Webhook: POST $BASE_URL/api/v1/payments/yookassa/webhook"
echo ""
echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
echo "  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: https://yookassa.ru/docs/support/merchant/payments/implement/test-store"
echo "  ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: https://yookassa.ru/developers/payment-acceptance/testing-and-going-live/testing#test-bank-card-data"
echo ""

if [[ "$PAYMENT_RESPONSE" == "200" && "$WEBHOOK_RESPONSE" == "200" ]]; then
    success "–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ÆKassa –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
elif [[ "$PAYMENT_RESPONSE" == "200" ]]; then
    warning "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å webhook."
else
    error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏."
fi

echo ""
log "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤: docker compose logs -f app | grep -i yookassa"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm -f /tmp/health_response.json /tmp/payment_response.json /tmp/sbp_response.json /tmp/metrics_response.json /tmp/webhook_response.json