#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 26.01.2025

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL="http://localhost:8080"
API_PREFIX="/api/v1"
METRICS_ENDPOINT="${API_PREFIX}/payments/metrics"

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    ((PASSED_TESTS++))
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    ((FAILED_TESTS++))
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_header() {
    echo -e "\n${PURPLE}=== $1 ===${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
make_request() {
    local method=$1
    local endpoint=$2
    local expected_code=${3:-200}
    local auth_header=${4:-""}
    
    ((TOTAL_TESTS++))
    
    local curl_cmd="curl -s -w '%{http_code}' -X $method"
    if [[ -n "$auth_header" ]]; then
        curl_cmd="$curl_cmd -H 'Authorization: $auth_header'"
    fi
    curl_cmd="$curl_cmd -H 'Content-Type: application/json' $BASE_URL$endpoint"
    
    log_info "–í—ã–ø–æ–ª–Ω—è—é: $method $endpoint"
    
    local response=$(eval $curl_cmd)
    local http_code="${response: -3}"
    local body="${response%???}"
    
    if [[ "$http_code" == "$expected_code" ]]; then
        log_success "HTTP $http_code - OK"
        echo "$body"
        return 0
    else
        log_error "HTTP $http_code (–æ–∂–∏–¥–∞–ª—Å—è $expected_code)"
        echo "$body"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
check_json_field() {
    local json=$1
    local field=$2
    local description=$3
    
    ((TOTAL_TESTS++))
    
    if echo "$json" | jq -e ".$field" > /dev/null 2>&1; then
        log_success "$description - –ø–æ–ª–µ '$field' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        return 0
    else
        log_error "$description - –ø–æ–ª–µ '$field' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
get_admin_token() {
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    echo "Bearer test-admin-token"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    log_header "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê YOOKASSA"
    echo "–ë–∞–∑–æ–≤—ã–π URL: $BASE_URL"
    echo "–î–∞—Ç–∞: $(date '+%d.%m.%Y %H:%M:%S')"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
    log_header "1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–ê"
    
    if make_request "GET" "/actuator/health" 200; then
        log_success "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    log_header "2. –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø"
    
    ADMIN_TOKEN=$(get_admin_token)
    log_info "–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω: ${ADMIN_TOKEN:0:20}..."
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint'–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    log_header "3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"
    
    # 3.1 Health check —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
    log_info "3.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"
    health_response=$(make_request "GET" "$METRICS_ENDPOINT/health" 200)
    if [[ $? -eq 0 ]]; then
        check_json_field "$health_response" "status" "Health status"
        check_json_field "$health_response" "service" "Service name"
        check_json_field "$health_response" "timestamp" "Timestamp"
    fi
    
    # 3.2 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    log_info "3.2 –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    config_response=$(make_request "GET" "$METRICS_ENDPOINT/config" 200 "$ADMIN_TOKEN")
    if [[ $? -eq 0 ]]; then
        check_json_field "$config_response" "yookassa_enabled" "–ÆKassa enabled status"
        check_json_field "$config_response" "metrics_enabled" "Metrics enabled status"
        check_json_field "$config_response" "monitoring" "Monitoring config"
        check_json_field "$config_response" "endpoints" "Endpoints list"
    fi
    
    # 3.3 –°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫
    log_info "3.3 –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"
    summary_response=$(make_request "GET" "$METRICS_ENDPOINT/summary" 200 "$ADMIN_TOKEN")
    if [[ $? -eq 0 ]]; then
        check_json_field "$summary_response" "totalPayments" "Total payments"
        check_json_field "$summary_response" "successfulPayments" "Successful payments"
        check_json_field "$summary_response" "failedPayments" "Failed payments"
        check_json_field "$summary_response" "conversionRate" "Conversion rate"
        check_json_field "$summary_response" "totalAmount" "Total amount"
    fi
    
    # 3.4 –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    log_info "3.4 –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"
    details_response=$(make_request "GET" "$METRICS_ENDPOINT/details" 200 "$ADMIN_TOKEN")
    if [[ $? -eq 0 ]]; then
        check_json_field "$details_response" "summary" "Summary data"
        check_json_field "$details_response" "metrics_collection" "Metrics collection info"
        check_json_field "$details_response" "performance" "Performance data"
    fi
    
    # 3.5 –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    log_info "3.5 –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"
    refresh_response=$(make_request "POST" "$METRICS_ENDPOINT/refresh" 200 "$ADMIN_TOKEN")
    if [[ $? -eq 0 ]]; then
        check_json_field "$refresh_response" "status" "Refresh status"
        check_json_field "$refresh_response" "message" "Refresh message"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prometheus –º–µ—Ç—Ä–∏–∫
    log_header "4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROMETHEUS –ú–ï–¢–†–ò–ö"
    
    log_info "4.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint'–∞ Prometheus"
    prometheus_response=$(make_request "GET" "/actuator/prometheus" 200)
    if [[ $? -eq 0 ]]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ÆKassa
        if echo "$prometheus_response" | grep -q "yookassa_payments_total"; then
            log_success "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_total –Ω–∞–π–¥–µ–Ω–∞"
            ((PASSED_TESTS++))
        else
            log_error "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_total –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            ((FAILED_TESTS++))
        fi
        ((TOTAL_TESTS++))
        
        if echo "$prometheus_response" | grep -q "yookassa_payments_success"; then
            log_success "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_success –Ω–∞–π–¥–µ–Ω–∞"
            ((PASSED_TESTS++))
        else
            log_error "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_success –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            ((FAILED_TESTS++))
        fi
        ((TOTAL_TESTS++))
        
        if echo "$prometheus_response" | grep -q "yookassa_payments_failure"; then
            log_success "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_failure –Ω–∞–π–¥–µ–Ω–∞"
            ((PASSED_TESTS++))
        else
            log_error "–ú–µ—Ç—Ä–∏–∫–∞ yookassa_payments_failure –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            ((FAILED_TESTS++))
        fi
        ((TOTAL_TESTS++))
    fi
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    log_header "5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–õ–ï–†–¢–û–í"
    
    log_info "5.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"
    if echo "$config_response" | jq -e ".monitoring.alert_thresholds" > /dev/null 2>&1; then
        log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–∞"
        ((PASSED_TESTS++))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        low_conversion=$(echo "$config_response" | jq -r ".monitoring.alert_thresholds.low_conversion_rate")
        high_failure=$(echo "$config_response" | jq -r ".monitoring.alert_thresholds.high_failure_rate")
        max_response=$(echo "$config_response" | jq -r ".monitoring.alert_thresholds.max_response_time_ms")
        
        log_info "–ü–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤: –∫–æ–Ω–≤–µ—Ä—Å–∏—è < $low_conversion%, –æ—à–∏–±–∫–∏ > $high_failure%, –≤—Ä–µ–º—è > ${max_response}ms"
    else
        log_error "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        ((FAILED_TESTS++))
    fi
    ((TOTAL_TESTS++))
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    log_header "6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
    
    log_info "6.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º endpoint'–∞–º"
    unauthorized_response=$(make_request "GET" "$METRICS_ENDPOINT/summary" 401)
    if [[ $? -eq 0 ]]; then
        log_success "–ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    fi
    
    log_info "6.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"
    invalid_token_response=$(make_request "GET" "$METRICS_ENDPOINT/summary" 401 "Bearer invalid-token")
    if [[ $? -eq 0 ]]; then
        log_success "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    log_header "7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
    
    log_info "7.1 –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ health endpoint'–∞"
    start_time=$(date +%s%N)
    make_request "GET" "$METRICS_ENDPOINT/health" 200 > /dev/null
    end_time=$(date +%s%N)
    response_time=$(( (end_time - start_time) / 1000000 )) # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    if [[ $response_time -lt 1000 ]]; then
        log_success "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ health endpoint: ${response_time}ms (< 1000ms)"
        ((PASSED_TESTS++))
    else
        log_warning "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ health endpoint: ${response_time}ms (> 1000ms)"
        ((FAILED_TESTS++))
    fi
    ((TOTAL_TESTS++))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log_header "üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
    
    success_rate=$(( PASSED_TESTS * 100 / TOTAL_TESTS ))
    
    echo -e "${CYAN}–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:${NC} $TOTAL_TESTS"
    echo -e "${GREEN}–£—Å–ø–µ—à–Ω—ã—Ö:${NC} $PASSED_TESTS"
    echo -e "${RED}–ù–µ—É–¥–∞—á–Ω—ã—Ö:${NC} $FAILED_TESTS"
    echo -e "${YELLOW}–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:${NC} ${success_rate}%"
    echo ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if [[ $success_rate -ge 90 ]]; then
        echo -e "${GREEN}‚úÖ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£${NC}"
        echo -e "${GREEN}–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
        exit_code=0
    elif [[ $success_rate -ge 70 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò${NC}"
        echo -e "${YELLOW}–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å${NC}"
        exit_code=1
    else
        echo -e "${RED}‚ùå –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ù–ï –ì–û–¢–û–í–ê${NC}"
        echo -e "${RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
        exit_code=2
    fi
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log_header "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
    
    if [[ $FAILED_TESTS -gt 0 ]]; then
        echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"
        echo "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (YOOKASSA_ENABLED=true)"
        echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        echo "4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Micrometer –∏ Actuator –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    if [[ $success_rate -ge 90 ]]; then
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
        echo "‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        echo "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞"
    fi
    
    echo ""
    echo "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "1. ./scripts/activate_yookassa_production.sh"
    echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ Grafana/Prometheus"
    echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    exit $exit_code
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        log_error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
check_dependencies
main "$@" 