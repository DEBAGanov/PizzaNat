#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa –¥–ª—è PizzaNat
# –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ÆKassa –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL="http://localhost:8080"
API_BASE="/api/v1"

echo -e "${CYAN}üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa –¥–ª—è PizzaNat${NC}"
echo -e "${CYAN}=================================================${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP –æ—Ç–≤–µ—Ç–∞
check_response() {
    local response="$1"
    local expected_status="$2"
    local description="$3"
    
    local status=$(echo "$response" | tail -n1)
    local body=$(echo "$response" | head -n -1)
    
    if [[ "$status" == "$expected_status" ]]; then
        echo -e "${GREEN}‚úÖ $description - OK (HTTP $status)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description - FAIL (HTTP $status)${NC}"
        echo -e "${RED}Response: $body${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON –ø–æ–ª—è
check_json_field() {
    local json="$1"
    local field="$2"
    local expected="$3"
    local description="$4"
    
    local actual=$(echo "$json" | jq -r ".$field")
    
    if [[ "$actual" == "$expected" ]]; then
        echo -e "${GREEN}‚úÖ $description - OK ($actual)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description - FAIL (expected: $expected, got: $actual)${NC}"
        return 1
    fi
}

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

run_test() {
    local test_name="$1"
    shift
    
    echo -e "${BLUE}üß™ –¢–µ—Å—Ç: $test_name${NC}"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    if "$@"; then
        PASSED_TESTS=$((PASSED_TESTS + 1))
        echo ""
    else
        FAILED_TESTS=$((FAILED_TESTS + 1))
        echo ""
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
test_service_availability() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    
    local response=$(curl -s -w "\n%{http_code}" "$BASE_URL/actuator/health" || echo -e "\n000")
    check_response "$response" "200" "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa
test_yookassa_configuration() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ÆKassa...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint –ÆKassa
    local response=$(curl -s -w "\n%{http_code}" "$BASE_URL$API_BASE/payments/yookassa/health" || echo -e "\n000")
    
    if check_response "$response" "200" "–ÆKassa health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"; then
        local body=$(echo "$response" | head -n -1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
        check_json_field "$body" "status" "UP" "–°—Ç–∞—Ç—É—Å –ÆKassa"
        check_json_field "$body" "service" "yookassa" "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"
        
        local enabled=$(echo "$body" | jq -r ".enabled")
        if [[ "$enabled" == "true" ]]; then
            echo -e "${GREEN}‚úÖ –ÆKassa –≤–∫–ª—é—á–µ–Ω–∞${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è –ÆKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞ (YOOKASSA_ENABLED=false)${NC}"
        fi
        
        return 0
    else
        return 1
    fi
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
test_environment_variables() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if [[ -f ".env" ]]; then
        echo -e "${GREEN}‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        local vars_to_check=("YOOKASSA_ENABLED" "YOOKASSA_SHOP_ID" "YOOKASSA_SECRET_KEY" "YOOKASSA_API_URL")
        local all_vars_present=true
        
        for var in "${vars_to_check[@]}"; do
            if grep -q "^$var=" .env; then
                local value=$(grep "^$var=" .env | cut -d'=' -f2)
                if [[ -n "$value" && "$value" != "your_shop_id_here" && "$value" != "your_secret_key_here" ]]; then
                    echo -e "${GREEN}‚úÖ $var —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è $var –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder${NC}"
                    all_vars_present=false
                fi
            else
                echo -e "${RED}‚ùå $var –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env${NC}"
                all_vars_present=false
            fi
        done
        
        return $([[ "$all_vars_present" == "true" ]] && echo 0 || echo 1)
    else
        echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        echo -e "${YELLOW}üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª: cp env-yookassa-template.txt .env${NC}"
        return 1
    fi
}

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–æ–≤ –°–ë–ü
test_sbp_banks() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –°–ë–ü...${NC}"
    
    local response=$(curl -s -w "\n%{http_code}" "$BASE_URL$API_BASE/payments/yookassa/sbp/banks" || echo -e "\n000")
    
    if check_response "$response" "200" "–°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –°–ë–ü –¥–æ—Å—Ç—É–ø–µ–Ω"; then
        local body=$(echo "$response" | head -n -1)
        local banks_count=$(echo "$body" | jq '. | length')
        
        if [[ "$banks_count" -gt 0 ]]; then
            echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ $banks_count –±–∞–Ω–∫–æ–≤ –°–ë–ü${NC}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–∞–Ω–∫–∞
            echo -e "${CYAN}–ü—Ä–∏–º–µ—Ä—ã –±–∞–Ω–∫–æ–≤:${NC}"
            echo "$body" | jq -r '.[0:3][] | "  ‚Ä¢ \(.name) (\(.bic))"'
            
            return 0
        else
            echo -e "${RED}‚ùå –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –ø—É—Å—Ç${NC}"
            return 1
        fi
    else
        return 1
    fi
}

# 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–µ—Å–ª–∏ –ÆKassa –≤–∫–ª—é—á–µ–Ω–∞)
test_payment_creation() {
    echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...${NC}"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ÆKassa
    local health_response=$(curl -s "$BASE_URL$API_BASE/payments/yookassa/health" || echo "{}")
    local enabled=$(echo "$health_response" | jq -r ".enabled // false")
    
    if [[ "$enabled" != "true" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ÆKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞${NC}"
        return 0
    fi
    
    echo -e "${CYAN}–ÆKassa –≤–∫–ª—é—á–µ–Ω–∞, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    local order_response=$(curl -s -X POST "$BASE_URL$API_BASE/orders" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test_token" \
        -d '{
            "items": [{"productId": 1, "quantity": 1}],
            "deliveryAddress": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
            "phoneNumber": "+79991234567",
            "paymentMethod": "YOOKASSA"
        }' || echo "{}")
    
    local order_id=$(echo "$order_response" | jq -r ".id // null")
    
    if [[ "$order_id" != "null" && -n "$order_id" ]]; then
        echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω (ID: $order_id)${NC}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        local payment_response=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL$API_BASE/payments/yookassa/create" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer test_token" \
            -d "{
                \"orderId\": $order_id,
                \"amount\": 500.00,
                \"currency\": \"RUB\",
                \"description\": \"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\",
                \"paymentMethod\": \"sbp\",
                \"returnUrl\": \"pizzanat://payment/result\"
            }" || echo -e "\n000")
        
        check_response "$payment_response" "200" "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞${NC}"
        return 0
    fi
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint
test_webhook_endpoint() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º webhook endpoint...${NC}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ webhook (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –¥–ª—è –ø—É—Å—Ç–æ–≥–æ body)
    local response=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL$API_BASE/payments/yookassa/webhook" \
        -H "Content-Type: application/json" \
        -d '{}' || echo -e "\n000")
    
    # Webhook –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if check_response "$response" "400" "Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"; then
        echo -e "${GREEN}‚úÖ Webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã${NC}"
        return 0
    else
        return 1
    fi
}

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
test_application_logs() {
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
    
    if command -v docker-compose &> /dev/null; then
        echo -e "${CYAN}–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:${NC}"
        docker-compose logs --tail=10 app | grep -i yookassa || echo "–õ–æ–≥–∏ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo -e "${GREEN}‚úÖ –õ–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–æ–≤${NC}"
        return 0
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    echo -e "${PURPLE}–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa...${NC}"
    echo ""
    
    run_test "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞" test_service_availability
    run_test "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa" test_yookassa_configuration
    run_test "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è" test_environment_variables
    run_test "–ë–∞–Ω–∫–∏ –°–ë–ü" test_sbp_banks
    run_test "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞" test_payment_creation
    run_test "Webhook endpoint" test_webhook_endpoint
    run_test "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" test_application_logs
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo -e "${CYAN}=================================================${NC}"
    echo -e "${CYAN}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${CYAN}=================================================${NC}"
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $PASSED_TESTS${NC}"
    echo -e "${RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $FAILED_TESTS${NC}"
    echo -e "${BLUE}üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS${NC}"
    
    if [[ $FAILED_TESTS -eq 0 ]]; then
        echo ""
        echo -e "${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ÆKassa –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.${NC}"
        echo ""
        echo -e "${CYAN}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:${NC}"
        echo -e "${YELLOW}1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ YOOKASSA_ENABLED=true –≤ .env${NC}"
        echo -e "${YELLOW}2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY${NC}"
        echo -e "${YELLOW}3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: docker-compose restart app${NC}"
        echo -e "${YELLOW}4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏${NC}"
    else
        echo ""
        echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa${NC}"
        echo -e "${YELLOW}üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ${NC}"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main "$@"