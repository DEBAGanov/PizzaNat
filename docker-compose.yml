version: "3.8"

services:
  # postgres:
  #   image: postgres:${POSTGRES_VERSION:-15-alpine}
  #   container_name: pizzanat-postgres
  #   restart: always
  #   environment:
  #     POSTGRES_DB: pizzanat_db
  #     POSTGRES_USER: pizzanat_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-strong_password_change_me}
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data/pgdata
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U pizzanat_user -d pizzanat_db"]
  #     interval: ${HEALTH_CHECK_INTERVAL:-10s}
  #     timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
  #     retries: ${HEALTH_CHECK_RETRIES:-5}
  #   networks:
  #     - pizzanat-network
  #   profiles:
  #     - dev

  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: pizzanat-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-strong_redis_password_change_me}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
    networks:
      - pizzanat-network

  minio:
    image: "minio/minio:${MINIO_VERSION:-latest}"
    container_name: pizzanat-minio
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - "MINIO_ROOT_USER=${MINIO_ROOT_USER:-accesskey}"
      - "MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-secretkey}"
      - "MINIO_SERVER_URL=http://localhost:9000"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    networks:
      - pizzanat-network

  minio-init:
    image: minio/mc
    container_name: pizzanat-minio-init
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./src/main/resources/images:/images
      - ./init-scripts:/scripts
    entrypoint: >
      /bin/sh -c "
        chmod +x /scripts/minio-init.sh &&
        /scripts/minio-init.sh
      "
    environment:
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-accesskey}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-secretkey}
      - BUCKET_NAME=pizzanat
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/ready"]
      interval: 15s
      timeout: 13s
      retries: 5
    restart: on-failure
    networks:
      - pizzanat-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pizzanat-app
    restart: on-failure
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      # Конфигурация БД
      SPRING_DATASOURCE_URL: ${TIMEWEB_DB_URL:-jdbc:postgresql://45.95.235.22:5432/default_db}
      SPRING_DATASOURCE_USERNAME: ${TIMEWEB_DB_USER:-gen_user}
      SPRING_DATASOURCE_PASSWORD: ${TIMEWEB_DB_PASSWORD:-strong_password_change_me}
      # Остальные настройки
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-strong_redis_password_change_me}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-accesskey}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-secretkey}
      S3_ENDPOINT: http://minio:9000
      S3_PUBLIC_URL: ${S3_PUBLIC_URL:-http://localhost}
      S3_BUCKET: pizzanat
      JWT_SECRET: ${JWT_SECRET:-"YTg1MmViNjM0MWY5MTk4NTk1OWM4YzhjZTRlMjIzMTZmNWI1ODk3YmY3YmI3NjhjNWFmYTU1NDYzY2E3OGVmMg=="}
      SPRING_MAIL_HOST: ${MAIL_HOST:-smtp.example.com}
      SPRING_MAIL_PORT: ${MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME:-mail@example.com}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD:-mail_password}
      APP_NOTIFICATION_EMAIL_FROM: ${NOTIFICATION_EMAIL:-no-reply@pizzanat.com}
      APP_NOTIFICATION_EMAIL_ENABLED: ${NOTIFICATION_ENABLED:-false}
      SERVER_PORT: ${SERVER_PORT:-8080}
      PAYMENT_ROBOKASSA_MERCHANT_LOGIN: ${ROBOKASSA_MERCHANT_LOGIN:-your_merchant_login}
      PAYMENT_ROBOKASSA_PASSWORD1: ${ROBOKASSA_PASSWORD1:-your_password1}
      PAYMENT_ROBOKASSA_PASSWORD2: ${ROBOKASSA_PASSWORD2:-your_password2}
      PAYMENT_ROBOKASSA_TEST_MODE: ${ROBOKASSA_TEST_MODE:-true}
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${SERVER_PORT:-8080}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: 60s
    networks:
      - pizzanat-network

  # Опционально: добавление прокси-сервера nginx для SSL и балансировки
  nginx:
    image: nginx:${NGINX_VERSION:-alpine}
    container_name: pizzanat-nginx
    restart: always
    depends_on:
      app:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pizzanat-network

networks:
  pizzanat-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data:
